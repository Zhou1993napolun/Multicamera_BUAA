[05/30 17:16:36] fastreid INFO: Rank of current process: 0. World size: 1
[05/30 17:16:36] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[05/30 17:16:36] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[05/30 17:16:36] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[05/30 17:16:36] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[05/30 17:16:36] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit7/mgn_R50-ibn/config.yaml
[05/30 17:16:36] fastreid.utils.env INFO: Using a generated random seed 37360566
[05/30 17:16:36] fastreid.engine.defaults INFO: Prepare training set
[05/30 17:16:36] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 98      | 1631       | 1           |[0m
[05/30 17:16:36] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[05/30 17:16:37] fastreid.engine.defaults INFO: Auto-scaling the num_classes=98
[05/30 17:16:37] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[05/30 17:16:37] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[05/30 17:16:44] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=98, scale=64, margin=0.35)
  )
)
[05/30 17:16:45] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[05/30 17:16:45] fastreid.engine.train_loop INFO: Starting training from epoch 0
[05/30 17:16:45] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[05/30 17:16:56] fastreid.utils.events INFO:  eta: 0:06:01  epoch/iter: 0/24  total_loss: 55.5  loss_cls_b1: 6.133  loss_cls_b2: 6.026  loss_cls_b21: 6.192  loss_cls_b22: 6.043  loss_cls_b3: 6.14  loss_cls_b31: 6.114  loss_cls_b32: 5.991  loss_cls_b33: 6.041  loss_triplet_b1: 1.254  loss_triplet_b2: 1.226  loss_triplet_b3: 1.211  loss_triplet_b22: 1.468  loss_triplet_b33: 1.566  time: 0.2453  data_time: 0.0009  lr: 3.81e-05  max_mem: 22745M
[05/30 17:17:02] fastreid.utils.events INFO:  eta: 0:05:54  epoch/iter: 1/49  total_loss: 55.95  loss_cls_b1: 6.13  loss_cls_b2: 6.058  loss_cls_b21: 6.101  loss_cls_b22: 6.049  loss_cls_b3: 6.142  loss_cls_b31: 6.113  loss_cls_b32: 6.002  loss_cls_b33: 6.076  loss_triplet_b1: 1.314  loss_triplet_b2: 1.293  loss_triplet_b3: 1.286  loss_triplet_b22: 1.531  loss_triplet_b33: 1.638  time: 0.2449  data_time: 0.0006  lr: 4.21e-05  max_mem: 22745M
[05/30 17:17:09] fastreid.utils.events INFO:  eta: 0:05:51  epoch/iter: 2/74  total_loss: 55.91  loss_cls_b1: 6.13  loss_cls_b2: 6.072  loss_cls_b21: 6.192  loss_cls_b22: 6.018  loss_cls_b3: 6.149  loss_cls_b31: 6.018  loss_cls_b32: 6.016  loss_cls_b33: 6.076  loss_triplet_b1: 1.355  loss_triplet_b2: 1.334  loss_triplet_b3: 1.306  loss_triplet_b22: 1.585  loss_triplet_b33: 1.707  time: 0.2474  data_time: 0.0010  lr: 4.60e-05  max_mem: 22745M
[05/30 17:17:15] fastreid.utils.events INFO:  eta: 0:05:46  epoch/iter: 3/99  total_loss: 56.05  loss_cls_b1: 6.13  loss_cls_b2: 6.08  loss_cls_b21: 6.12  loss_cls_b22: 6.015  loss_cls_b3: 6.136  loss_cls_b31: 6.019  loss_cls_b32: 6.035  loss_cls_b33: 6.073  loss_triplet_b1: 1.345  loss_triplet_b2: 1.348  loss_triplet_b3: 1.336  loss_triplet_b22: 1.598  loss_triplet_b33: 1.742  time: 0.2481  data_time: 0.0009  lr: 5.00e-05  max_mem: 22745M
[05/30 17:17:21] fastreid.utils.events INFO:  eta: 0:05:42  epoch/iter: 4/124  total_loss: 56.05  loss_cls_b1: 6.133  loss_cls_b2: 6.088  loss_cls_b21: 6.127  loss_cls_b22: 6.017  loss_cls_b3: 6.15  loss_cls_b31: 6.035  loss_cls_b32: 6.035  loss_cls_b33: 6.071  loss_triplet_b1: 1.346  loss_triplet_b2: 1.359  loss_triplet_b3: 1.326  loss_triplet_b22: 1.596  loss_triplet_b33: 1.707  time: 0.2492  data_time: 0.0013  lr: 5.39e-05  max_mem: 22745M
[05/30 17:17:28] fastreid.utils.events INFO:  eta: 0:05:36  epoch/iter: 5/149  total_loss: 56.04  loss_cls_b1: 6.139  loss_cls_b2: 6.088  loss_cls_b21: 6.144  loss_cls_b22: 6.013  loss_cls_b3: 6.15  loss_cls_b31: 6.038  loss_cls_b32: 6.039  loss_cls_b33: 6.064  loss_triplet_b1: 1.345  loss_triplet_b2: 1.342  loss_triplet_b3: 1.323  loss_triplet_b22: 1.598  loss_triplet_b33: 1.724  time: 0.2493  data_time: 0.0010  lr: 5.78e-05  max_mem: 22745M
[05/30 17:17:34] fastreid.utils.events INFO:  eta: 0:05:30  epoch/iter: 6/174  total_loss: 56.1  loss_cls_b1: 6.133  loss_cls_b2: 6.082  loss_cls_b21: 6.144  loss_cls_b22: 6.008  loss_cls_b3: 6.152  loss_cls_b31: 6.037  loss_cls_b32: 6.039  loss_cls_b33: 6.058  loss_triplet_b1: 1.36  loss_triplet_b2: 1.354  loss_triplet_b3: 1.337  loss_triplet_b22: 1.599  loss_triplet_b33: 1.754  time: 0.2496  data_time: 0.0010  lr: 6.18e-05  max_mem: 22745M
[05/30 17:17:41] fastreid.utils.events INFO:  eta: 0:05:25  epoch/iter: 7/199  total_loss: 56.11  loss_cls_b1: 6.131  loss_cls_b2: 6.09  loss_cls_b21: 6.143  loss_cls_b22: 6.009  loss_cls_b3: 6.151  loss_cls_b31: 6.046  loss_cls_b32: 6.048  loss_cls_b33: 6.065  loss_triplet_b1: 1.359  loss_triplet_b2: 1.351  loss_triplet_b3: 1.327  loss_triplet_b22: 1.583  loss_triplet_b33: 1.757  time: 0.2499  data_time: 0.0013  lr: 6.57e-05  max_mem: 22745M
[05/30 17:17:41] fastreid.utils.events INFO:  eta: 0:05:25  epoch/iter: 7/199  total_loss: 56.11  loss_cls_b1: 6.131  loss_cls_b2: 6.09  loss_cls_b21: 6.143  loss_cls_b22: 6.009  loss_cls_b3: 6.151  loss_cls_b31: 6.046  loss_cls_b32: 6.048  loss_cls_b33: 6.065  loss_triplet_b1: 1.359  loss_triplet_b2: 1.351  loss_triplet_b3: 1.327  loss_triplet_b22: 1.583  loss_triplet_b33: 1.757  time: 0.2499  data_time: 0.0013  lr: 6.57e-05  max_mem: 22745M
[05/30 17:17:47] fastreid.utils.events INFO:  eta: 0:05:19  epoch/iter: 8/224  total_loss: 56.24  loss_cls_b1: 6.136  loss_cls_b2: 6.097  loss_cls_b21: 6.127  loss_cls_b22: 6.002  loss_cls_b3: 6.151  loss_cls_b31: 6.044  loss_cls_b32: 6.039  loss_cls_b33: 6.075  loss_triplet_b1: 1.363  loss_triplet_b2: 1.363  loss_triplet_b3: 1.343  loss_triplet_b22: 1.594  loss_triplet_b33: 1.765  time: 0.2506  data_time: 0.0009  lr: 6.95e-05  max_mem: 22745M
[05/30 17:17:53] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:17:53] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[05/30 17:17:53] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[05/30 17:18:00] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2101 s / batch. ETA=0:00:01
[05/30 17:18:03] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:03.989371 (0.362670 s / batch per device, on 1 devices)
[05/30 17:18:03] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.361582 s / batch per device, on 1 devices)
[05/30 17:18:03] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[05/30 17:18:03] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 77.78    | 89.74    | 92.02     | 54.69 | 10.45  | 66.24    |[0m
[05/30 17:18:03] fastreid.utils.events INFO:  eta: 0:05:13  epoch/iter: 9/249  total_loss: 56.43  loss_cls_b1: 6.147  loss_cls_b2: 6.097  loss_cls_b21: 6.158  loss_cls_b22: 5.981  loss_cls_b3: 6.154  loss_cls_b31: 6.036  loss_cls_b32: 6.043  loss_cls_b33: 6.075  loss_triplet_b1: 1.379  loss_triplet_b2: 1.389  loss_triplet_b3: 1.352  loss_triplet_b22: 1.604  loss_triplet_b33: 1.778  time: 0.2507  data_time: 0.0010  lr: 7.34e-05  max_mem: 22745M
[05/30 17:18:10] fastreid.utils.events INFO:  eta: 0:05:05  epoch/iter: 10/274  total_loss: 56.51  loss_cls_b1: 6.127  loss_cls_b2: 6.095  loss_cls_b21: 6.127  loss_cls_b22: 6.011  loss_cls_b3: 6.155  loss_cls_b31: 6.049  loss_cls_b32: 6.043  loss_cls_b33: 6.077  loss_triplet_b1: 1.379  loss_triplet_b2: 1.397  loss_triplet_b3: 1.365  loss_triplet_b22: 1.598  loss_triplet_b33: 1.765  time: 0.2510  data_time: 0.0011  lr: 7.74e-05  max_mem: 22745M
[05/30 17:18:16] fastreid.utils.events INFO:  eta: 0:04:58  epoch/iter: 11/299  total_loss: 56.51  loss_cls_b1: 6.118  loss_cls_b2: 6.094  loss_cls_b21: 6.127  loss_cls_b22: 6.025  loss_cls_b3: 6.162  loss_cls_b31: 6.068  loss_cls_b32: 6.036  loss_cls_b33: 6.086  loss_triplet_b1: 1.404  loss_triplet_b2: 1.402  loss_triplet_b3: 1.38  loss_triplet_b22: 1.623  loss_triplet_b33: 1.778  time: 0.2505  data_time: 0.0008  lr: 8.13e-05  max_mem: 22745M
[05/30 17:18:22] fastreid.utils.events INFO:  eta: 0:04:52  epoch/iter: 12/324  total_loss: 56.58  loss_cls_b1: 6.11  loss_cls_b2: 6.098  loss_cls_b21: 6.137  loss_cls_b22: 6.021  loss_cls_b3: 6.139  loss_cls_b31: 6.058  loss_cls_b32: 6.038  loss_cls_b33: 6.09  loss_triplet_b1: 1.43  loss_triplet_b2: 1.412  loss_triplet_b3: 1.389  loss_triplet_b22: 1.686  loss_triplet_b33: 1.835  time: 0.2502  data_time: 0.0008  lr: 8.52e-05  max_mem: 22745M
[05/30 17:18:29] fastreid.utils.events INFO:  eta: 0:04:46  epoch/iter: 13/349  total_loss: 56.66  loss_cls_b1: 6.085  loss_cls_b2: 6.107  loss_cls_b21: 6.121  loss_cls_b22: 6.028  loss_cls_b3: 6.151  loss_cls_b31: 6.067  loss_cls_b32: 6.038  loss_cls_b33: 6.095  loss_triplet_b1: 1.443  loss_triplet_b2: 1.448  loss_triplet_b3: 1.411  loss_triplet_b22: 1.7  loss_triplet_b33: 1.864  time: 0.2502  data_time: 0.0006  lr: 8.92e-05  max_mem: 22745M
[05/30 17:18:35] fastreid.utils.events INFO:  eta: 0:04:39  epoch/iter: 14/374  total_loss: 56.65  loss_cls_b1: 6.098  loss_cls_b2: 6.115  loss_cls_b21: 6.118  loss_cls_b22: 6.037  loss_cls_b3: 6.139  loss_cls_b31: 6.067  loss_cls_b32: 6.034  loss_cls_b33: 6.101  loss_triplet_b1: 1.443  loss_triplet_b2: 1.448  loss_triplet_b3: 1.411  loss_triplet_b22: 1.7  loss_triplet_b33: 1.862  time: 0.2499  data_time: 0.0008  lr: 9.31e-05  max_mem: 22745M
[05/30 17:18:41] fastreid.utils.events INFO:  eta: 0:04:33  epoch/iter: 15/399  total_loss: 56.78  loss_cls_b1: 6.108  loss_cls_b2: 6.109  loss_cls_b21: 6.11  loss_cls_b22: 6.037  loss_cls_b3: 6.147  loss_cls_b31: 6.07  loss_cls_b32: 6.032  loss_cls_b33: 6.102  loss_triplet_b1: 1.478  loss_triplet_b2: 1.499  loss_triplet_b3: 1.454  loss_triplet_b22: 1.722  loss_triplet_b33: 1.881  time: 0.2500  data_time: 0.0011  lr: 9.71e-05  max_mem: 22745M
[05/30 17:18:41] fastreid.utils.events INFO:  eta: 0:04:33  epoch/iter: 15/399  total_loss: 56.78  loss_cls_b1: 6.108  loss_cls_b2: 6.109  loss_cls_b21: 6.11  loss_cls_b22: 6.037  loss_cls_b3: 6.147  loss_cls_b31: 6.07  loss_cls_b32: 6.032  loss_cls_b33: 6.102  loss_triplet_b1: 1.478  loss_triplet_b2: 1.499  loss_triplet_b3: 1.454  loss_triplet_b22: 1.722  loss_triplet_b33: 1.881  time: 0.2500  data_time: 0.0011  lr: 9.71e-05  max_mem: 22745M
[05/30 17:18:48] fastreid.utils.events INFO:  eta: 0:04:28  epoch/iter: 16/424  total_loss: 56.93  loss_cls_b1: 6.087  loss_cls_b2: 6.112  loss_cls_b21: 6.105  loss_cls_b22: 6.034  loss_cls_b3: 6.142  loss_cls_b31: 6.079  loss_cls_b32: 6.052  loss_cls_b33: 6.095  loss_triplet_b1: 1.5  loss_triplet_b2: 1.522  loss_triplet_b3: 1.469  loss_triplet_b22: 1.726  loss_triplet_b33: 1.919  time: 0.2504  data_time: 0.0009  lr: 1.01e-04  max_mem: 22745M
[05/30 17:18:54] fastreid.utils.events INFO:  eta: 0:04:21  epoch/iter: 17/449  total_loss: 56.96  loss_cls_b1: 6.074  loss_cls_b2: 6.121  loss_cls_b21: 6.089  loss_cls_b22: 6.068  loss_cls_b3: 6.128  loss_cls_b31: 6.084  loss_cls_b32: 6.066  loss_cls_b33: 6.084  loss_triplet_b1: 1.511  loss_triplet_b2: 1.537  loss_triplet_b3: 1.474  loss_triplet_b22: 1.74  loss_triplet_b33: 1.926  time: 0.2505  data_time: 0.0007  lr: 1.05e-04  max_mem: 22745M
[05/30 17:19:01] fastreid.utils.events INFO:  eta: 0:04:16  epoch/iter: 18/474  total_loss: 56.98  loss_cls_b1: 6.092  loss_cls_b2: 6.129  loss_cls_b21: 6.087  loss_cls_b22: 6.05  loss_cls_b3: 6.123  loss_cls_b31: 6.094  loss_cls_b32: 6.073  loss_cls_b33: 6.098  loss_triplet_b1: 1.525  loss_triplet_b2: 1.548  loss_triplet_b3: 1.483  loss_triplet_b22: 1.744  loss_triplet_b33: 1.933  time: 0.2509  data_time: 0.0008  lr: 1.09e-04  max_mem: 22745M
[05/30 17:19:07] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:19:07] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[05/30 17:19:07] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[05/30 17:19:10] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2110 s / batch. ETA=0:00:01
[05/30 17:19:11] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.226644 (0.202422 s / batch per device, on 1 devices)
[05/30 17:19:11] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.201408 s / batch per device, on 1 devices)
[05/30 17:19:12] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[05/30 17:19:12] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 78.63    | 88.60    | 91.17     | 52.12 | 9.62   | 65.38    |[0m
[05/30 17:19:12] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_best.pth
[05/30 17:19:12] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_0019.pth
[05/30 17:19:13] fastreid.utils.events INFO:  eta: 0:04:09  epoch/iter: 19/499  total_loss: 56.99  loss_cls_b1: 6.095  loss_cls_b2: 6.133  loss_cls_b21: 6.09  loss_cls_b22: 6.052  loss_cls_b3: 6.115  loss_cls_b31: 6.083  loss_cls_b32: 6.089  loss_cls_b33: 6.082  loss_triplet_b1: 1.533  loss_triplet_b2: 1.553  loss_triplet_b3: 1.487  loss_triplet_b22: 1.75  loss_triplet_b33: 1.934  time: 0.2509  data_time: 0.0010  lr: 1.13e-04  max_mem: 22745M
[05/30 17:19:20] fastreid.utils.events INFO:  eta: 0:04:04  epoch/iter: 20/524  total_loss: 56.98  loss_cls_b1: 6.097  loss_cls_b2: 6.13  loss_cls_b21: 6.081  loss_cls_b22: 6.069  loss_cls_b3: 6.101  loss_cls_b31: 6.083  loss_cls_b32: 6.088  loss_cls_b33: 6.074  loss_triplet_b1: 1.534  loss_triplet_b2: 1.558  loss_triplet_b3: 1.499  loss_triplet_b22: 1.75  loss_triplet_b33: 1.939  time: 0.2512  data_time: 0.0008  lr: 1.17e-04  max_mem: 22745M
[05/30 17:19:26] fastreid.utils.events INFO:  eta: 0:03:57  epoch/iter: 21/549  total_loss: 57.06  loss_cls_b1: 6.114  loss_cls_b2: 6.135  loss_cls_b21: 6.088  loss_cls_b22: 6.071  loss_cls_b3: 6.107  loss_cls_b31: 6.083  loss_cls_b32: 6.08  loss_cls_b33: 6.082  loss_triplet_b1: 1.535  loss_triplet_b2: 1.558  loss_triplet_b3: 1.506  loss_triplet_b22: 1.761  loss_triplet_b33: 1.94  time: 0.2511  data_time: 0.0008  lr: 1.21e-04  max_mem: 22745M
[05/30 17:19:32] fastreid.utils.events INFO:  eta: 0:03:51  epoch/iter: 22/574  total_loss: 57.16  loss_cls_b1: 6.122  loss_cls_b2: 6.139  loss_cls_b21: 6.09  loss_cls_b22: 6.066  loss_cls_b3: 6.097  loss_cls_b31: 6.085  loss_cls_b32: 6.08  loss_cls_b33: 6.082  loss_triplet_b1: 1.56  loss_triplet_b2: 1.562  loss_triplet_b3: 1.526  loss_triplet_b22: 1.806  loss_triplet_b33: 1.958  time: 0.2512  data_time: 0.0007  lr: 1.24e-04  max_mem: 22745M
[05/30 17:19:39] fastreid.utils.events INFO:  eta: 0:03:45  epoch/iter: 23/599  total_loss: 57.08  loss_cls_b1: 6.106  loss_cls_b2: 6.14  loss_cls_b21: 6.093  loss_cls_b22: 6.068  loss_cls_b3: 6.097  loss_cls_b31: 6.082  loss_cls_b32: 6.075  loss_cls_b33: 6.082  loss_triplet_b1: 1.533  loss_triplet_b2: 1.541  loss_triplet_b3: 1.506  loss_triplet_b22: 1.76  loss_triplet_b33: 1.942  time: 0.2511  data_time: 0.0006  lr: 1.28e-04  max_mem: 22745M
[05/30 17:19:39] fastreid.utils.events INFO:  eta: 0:03:45  epoch/iter: 23/599  total_loss: 57.08  loss_cls_b1: 6.106  loss_cls_b2: 6.14  loss_cls_b21: 6.093  loss_cls_b22: 6.068  loss_cls_b3: 6.097  loss_cls_b31: 6.082  loss_cls_b32: 6.075  loss_cls_b33: 6.082  loss_triplet_b1: 1.533  loss_triplet_b2: 1.541  loss_triplet_b3: 1.506  loss_triplet_b22: 1.76  loss_triplet_b33: 1.942  time: 0.2511  data_time: 0.0006  lr: 1.28e-04  max_mem: 22745M
[05/30 17:19:45] fastreid.utils.events INFO:  eta: 0:03:38  epoch/iter: 24/624  total_loss: 57.14  loss_cls_b1: 6.134  loss_cls_b2: 6.152  loss_cls_b21: 6.095  loss_cls_b22: 6.075  loss_cls_b3: 6.097  loss_cls_b31: 6.081  loss_cls_b32: 6.072  loss_cls_b33: 6.09  loss_triplet_b1: 1.533  loss_triplet_b2: 1.543  loss_triplet_b3: 1.523  loss_triplet_b22: 1.793  loss_triplet_b33: 1.954  time: 0.2511  data_time: 0.0008  lr: 1.32e-04  max_mem: 22745M
[05/30 17:19:52] fastreid.utils.events INFO:  eta: 0:03:32  epoch/iter: 25/649  total_loss: 57.19  loss_cls_b1: 6.144  loss_cls_b2: 6.149  loss_cls_b21: 6.098  loss_cls_b22: 6.09  loss_cls_b3: 6.109  loss_cls_b31: 6.082  loss_cls_b32: 6.07  loss_cls_b33: 6.099  loss_triplet_b1: 1.527  loss_triplet_b2: 1.536  loss_triplet_b3: 1.526  loss_triplet_b22: 1.78  loss_triplet_b33: 1.95  time: 0.2510  data_time: 0.0009  lr: 1.36e-04  max_mem: 22745M
[05/30 17:19:58] fastreid.utils.events INFO:  eta: 0:03:26  epoch/iter: 26/674  total_loss: 56.96  loss_cls_b1: 6.122  loss_cls_b2: 6.153  loss_cls_b21: 6.099  loss_cls_b22: 6.101  loss_cls_b3: 6.113  loss_cls_b31: 6.081  loss_cls_b32: 6.066  loss_cls_b33: 6.097  loss_triplet_b1: 1.512  loss_triplet_b2: 1.52  loss_triplet_b3: 1.485  loss_triplet_b22: 1.744  loss_triplet_b33: 1.928  time: 0.2510  data_time: 0.0011  lr: 1.40e-04  max_mem: 22745M
[05/30 17:20:05] fastreid.utils.events INFO:  eta: 0:03:20  epoch/iter: 27/699  total_loss: 56.99  loss_cls_b1: 6.131  loss_cls_b2: 6.149  loss_cls_b21: 6.1  loss_cls_b22: 6.108  loss_cls_b3: 6.119  loss_cls_b31: 6.081  loss_cls_b32: 6.055  loss_cls_b33: 6.086  loss_triplet_b1: 1.516  loss_triplet_b2: 1.522  loss_triplet_b3: 1.501  loss_triplet_b22: 1.757  loss_triplet_b33: 1.939  time: 0.2512  data_time: 0.0011  lr: 1.44e-04  max_mem: 22745M
[05/30 17:20:11] fastreid.utils.events INFO:  eta: 0:03:14  epoch/iter: 28/724  total_loss: 57.14  loss_cls_b1: 6.148  loss_cls_b2: 6.155  loss_cls_b21: 6.111  loss_cls_b22: 6.095  loss_cls_b3: 6.128  loss_cls_b31: 6.082  loss_cls_b32: 6.05  loss_cls_b33: 6.097  loss_triplet_b1: 1.518  loss_triplet_b2: 1.541  loss_triplet_b3: 1.511  loss_triplet_b22: 1.771  loss_triplet_b33: 1.951  time: 0.2513  data_time: 0.0009  lr: 1.48e-04  max_mem: 22745M
[05/30 17:20:17] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:20:17] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[05/30 17:20:17] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[05/30 17:20:21] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2138 s / batch. ETA=0:00:01
[05/30 17:20:22] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.253420 (0.204856 s / batch per device, on 1 devices)
[05/30 17:20:22] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.203797 s / batch per device, on 1 devices)
[05/30 17:20:22] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[05/30 17:20:22] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 78.35    | 87.46    | 90.88     | 51.58 | 9.52   | 64.96    |[0m
[05/30 17:20:22] fastreid.utils.events INFO:  eta: 0:03:07  epoch/iter: 29/749  total_loss: 56.97  loss_cls_b1: 6.124  loss_cls_b2: 6.157  loss_cls_b21: 6.102  loss_cls_b22: 6.085  loss_cls_b3: 6.121  loss_cls_b31: 6.094  loss_cls_b32: 6.053  loss_cls_b33: 6.076  loss_triplet_b1: 1.508  loss_triplet_b2: 1.53  loss_triplet_b3: 1.501  loss_triplet_b22: 1.761  loss_triplet_b33: 1.928  time: 0.2513  data_time: 0.0009  lr: 1.52e-04  max_mem: 22745M
[05/30 17:20:29] fastreid.utils.events INFO:  eta: 0:03:01  epoch/iter: 30/774  total_loss: 56.96  loss_cls_b1: 6.11  loss_cls_b2: 6.162  loss_cls_b21: 6.1  loss_cls_b22: 6.101  loss_cls_b3: 6.124  loss_cls_b31: 6.101  loss_cls_b32: 6.05  loss_cls_b33: 6.101  loss_triplet_b1: 1.515  loss_triplet_b2: 1.536  loss_triplet_b3: 1.504  loss_triplet_b22: 1.765  loss_triplet_b33: 1.928  time: 0.2513  data_time: 0.0009  lr: 1.56e-04  max_mem: 22745M
[05/30 17:20:35] fastreid.utils.events INFO:  eta: 0:02:55  epoch/iter: 31/799  total_loss: 57.11  loss_cls_b1: 6.121  loss_cls_b2: 6.165  loss_cls_b21: 6.102  loss_cls_b22: 6.101  loss_cls_b3: 6.125  loss_cls_b31: 6.105  loss_cls_b32: 6.038  loss_cls_b33: 6.11  loss_triplet_b1: 1.518  loss_triplet_b2: 1.547  loss_triplet_b3: 1.52  loss_triplet_b22: 1.763  loss_triplet_b33: 1.936  time: 0.2513  data_time: 0.0012  lr: 1.60e-04  max_mem: 22745M
[05/30 17:20:35] fastreid.utils.events INFO:  eta: 0:02:55  epoch/iter: 31/799  total_loss: 57.11  loss_cls_b1: 6.121  loss_cls_b2: 6.165  loss_cls_b21: 6.102  loss_cls_b22: 6.101  loss_cls_b3: 6.125  loss_cls_b31: 6.105  loss_cls_b32: 6.038  loss_cls_b33: 6.11  loss_triplet_b1: 1.518  loss_triplet_b2: 1.547  loss_triplet_b3: 1.52  loss_triplet_b22: 1.763  loss_triplet_b33: 1.936  time: 0.2513  data_time: 0.0012  lr: 1.60e-04  max_mem: 22745M
[05/30 17:20:41] fastreid.utils.events INFO:  eta: 0:02:49  epoch/iter: 32/824  total_loss: 57.12  loss_cls_b1: 6.121  loss_cls_b2: 6.156  loss_cls_b21: 6.1  loss_cls_b22: 6.086  loss_cls_b3: 6.122  loss_cls_b31: 6.107  loss_cls_b32: 6.049  loss_cls_b33: 6.113  loss_triplet_b1: 1.523  loss_triplet_b2: 1.553  loss_triplet_b3: 1.534  loss_triplet_b22: 1.76  loss_triplet_b33: 1.926  time: 0.2512  data_time: 0.0013  lr: 1.64e-04  max_mem: 22745M
[05/30 17:20:48] fastreid.utils.events INFO:  eta: 0:02:42  epoch/iter: 33/849  total_loss: 57.11  loss_cls_b1: 6.116  loss_cls_b2: 6.15  loss_cls_b21: 6.101  loss_cls_b22: 6.076  loss_cls_b3: 6.118  loss_cls_b31: 6.108  loss_cls_b32: 6.038  loss_cls_b33: 6.111  loss_triplet_b1: 1.529  loss_triplet_b2: 1.552  loss_triplet_b3: 1.533  loss_triplet_b22: 1.772  loss_triplet_b33: 1.926  time: 0.2513  data_time: 0.0008  lr: 1.68e-04  max_mem: 22745M
[05/30 17:20:54] fastreid.utils.events INFO:  eta: 0:02:36  epoch/iter: 34/874  total_loss: 57.16  loss_cls_b1: 6.12  loss_cls_b2: 6.139  loss_cls_b21: 6.097  loss_cls_b22: 6.07  loss_cls_b3: 6.118  loss_cls_b31: 6.113  loss_cls_b32: 6.038  loss_cls_b33: 6.103  loss_triplet_b1: 1.556  loss_triplet_b2: 1.561  loss_triplet_b3: 1.547  loss_triplet_b22: 1.802  loss_triplet_b33: 1.943  time: 0.2514  data_time: 0.0009  lr: 1.72e-04  max_mem: 22745M
[05/30 17:21:01] fastreid.utils.events INFO:  eta: 0:02:30  epoch/iter: 35/899  total_loss: 57  loss_cls_b1: 6.122  loss_cls_b2: 6.139  loss_cls_b21: 6.099  loss_cls_b22: 6.073  loss_cls_b3: 6.116  loss_cls_b31: 6.115  loss_cls_b32: 6.038  loss_cls_b33: 6.113  loss_triplet_b1: 1.518  loss_triplet_b2: 1.531  loss_triplet_b3: 1.49  loss_triplet_b22: 1.75  loss_triplet_b33: 1.891  time: 0.2515  data_time: 0.0009  lr: 1.76e-04  max_mem: 22745M
[05/30 17:21:07] fastreid.utils.events INFO:  eta: 0:02:24  epoch/iter: 36/924  total_loss: 56.93  loss_cls_b1: 6.116  loss_cls_b2: 6.137  loss_cls_b21: 6.092  loss_cls_b22: 6.072  loss_cls_b3: 6.109  loss_cls_b31: 6.114  loss_cls_b32: 6.034  loss_cls_b33: 6.094  loss_triplet_b1: 1.515  loss_triplet_b2: 1.504  loss_triplet_b3: 1.479  loss_triplet_b22: 1.729  loss_triplet_b33: 1.877  time: 0.2515  data_time: 0.0007  lr: 1.80e-04  max_mem: 22745M
[05/30 17:21:13] fastreid.utils.events INFO:  eta: 0:02:17  epoch/iter: 37/949  total_loss: 57.07  loss_cls_b1: 6.122  loss_cls_b2: 6.137  loss_cls_b21: 6.1  loss_cls_b22: 6.085  loss_cls_b3: 6.11  loss_cls_b31: 6.109  loss_cls_b32: 6.032  loss_cls_b33: 6.103  loss_triplet_b1: 1.517  loss_triplet_b2: 1.515  loss_triplet_b3: 1.49  loss_triplet_b22: 1.758  loss_triplet_b33: 1.895  time: 0.2515  data_time: 0.0007  lr: 1.84e-04  max_mem: 22745M
[05/30 17:21:20] fastreid.utils.events INFO:  eta: 0:02:11  epoch/iter: 38/974  total_loss: 57.1  loss_cls_b1: 6.123  loss_cls_b2: 6.121  loss_cls_b21: 6.09  loss_cls_b22: 6.077  loss_cls_b3: 6.109  loss_cls_b31: 6.097  loss_cls_b32: 6.034  loss_cls_b33: 6.075  loss_triplet_b1: 1.515  loss_triplet_b2: 1.505  loss_triplet_b3: 1.479  loss_triplet_b22: 1.73  loss_triplet_b33: 1.892  time: 0.2516  data_time: 0.0008  lr: 1.87e-04  max_mem: 22745M
[05/30 17:21:26] fastreid.utils.events INFO:  eta: 0:02:05  epoch/iter: 39/999  total_loss: 57.07  loss_cls_b1: 6.116  loss_cls_b2: 6.125  loss_cls_b21: 6.079  loss_cls_b22: 6.073  loss_cls_b3: 6.094  loss_cls_b31: 6.085  loss_cls_b32: 6.043  loss_cls_b33: 6.065  loss_triplet_b1: 1.504  loss_triplet_b2: 1.488  loss_triplet_b3: 1.476  loss_triplet_b22: 1.733  loss_triplet_b33: 1.895  time: 0.2516  data_time: 0.0007  lr: 1.91e-04  max_mem: 22745M
[05/30 17:21:26] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:21:26] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[05/30 17:21:26] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[05/30 17:21:30] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2138 s / batch. ETA=0:00:01
[05/30 17:21:31] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.253555 (0.204869 s / batch per device, on 1 devices)
[05/30 17:21:31] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.203768 s / batch per device, on 1 devices)
[05/30 17:21:31] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[05/30 17:21:31] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 78.63    | 88.32    | 90.03     | 51.44 | 9.37   | 65.04    |[0m
[05/30 17:21:31] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_0039.pth
[05/30 17:21:32] fastreid.utils.events INFO:  eta: 0:02:05  epoch/iter: 39/999  total_loss: 57.07  loss_cls_b1: 6.116  loss_cls_b2: 6.125  loss_cls_b21: 6.079  loss_cls_b22: 6.073  loss_cls_b3: 6.094  loss_cls_b31: 6.085  loss_cls_b32: 6.043  loss_cls_b33: 6.065  loss_triplet_b1: 1.504  loss_triplet_b2: 1.488  loss_triplet_b3: 1.476  loss_triplet_b22: 1.733  loss_triplet_b33: 1.895  time: 0.2516  data_time: 0.0007  lr: 1.91e-04  max_mem: 22745M
[05/30 17:21:32] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[05/30 17:21:38] fastreid.utils.events INFO:  eta: 0:01:59  epoch/iter: 40/1024  total_loss: 56.76  loss_cls_b1: 6.106  loss_cls_b2: 6.127  loss_cls_b21: 6.074  loss_cls_b22: 6.085  loss_cls_b3: 6.09  loss_cls_b31: 6.073  loss_cls_b32: 6.036  loss_cls_b33: 6.036  loss_triplet_b1: 1.463  loss_triplet_b2: 1.457  loss_triplet_b3: 1.423  loss_triplet_b22: 1.7  loss_triplet_b33: 1.868  time: 0.2518  data_time: 0.0009  lr: 1.95e-04  max_mem: 22745M
[05/30 17:21:45] fastreid.utils.events INFO:  eta: 0:01:53  epoch/iter: 41/1049  total_loss: 56.16  loss_cls_b1: 6.098  loss_cls_b2: 6.104  loss_cls_b21: 6.039  loss_cls_b22: 6.035  loss_cls_b3: 6.05  loss_cls_b31: 6.04  loss_cls_b32: 6.031  loss_cls_b33: 5.988  loss_triplet_b1: 1.369  loss_triplet_b2: 1.386  loss_triplet_b3: 1.363  loss_triplet_b22: 1.606  loss_triplet_b33: 1.755  time: 0.2519  data_time: 0.0006  lr: 1.99e-04  max_mem: 22745M
[05/30 17:21:51] fastreid.utils.events INFO:  eta: 0:01:46  epoch/iter: 42/1074  total_loss: 55.34  loss_cls_b1: 6.044  loss_cls_b2: 6.066  loss_cls_b21: 6.012  loss_cls_b22: 6.004  loss_cls_b3: 5.994  loss_cls_b31: 5.979  loss_cls_b32: 5.969  loss_cls_b33: 5.937  loss_triplet_b1: 1.26  loss_triplet_b2: 1.308  loss_triplet_b3: 1.279  loss_triplet_b22: 1.466  loss_triplet_b33: 1.596  time: 0.2520  data_time: 0.0007  lr: 2.03e-04  max_mem: 22745M
[05/30 17:21:58] fastreid.utils.events INFO:  eta: 0:01:40  epoch/iter: 43/1099  total_loss: 54.42  loss_cls_b1: 5.952  loss_cls_b2: 5.976  loss_cls_b21: 5.914  loss_cls_b22: 5.932  loss_cls_b3: 5.924  loss_cls_b31: 5.923  loss_cls_b32: 5.888  loss_cls_b33: 5.857  loss_triplet_b1: 1.162  loss_triplet_b2: 1.132  loss_triplet_b3: 1.127  loss_triplet_b22: 1.314  loss_triplet_b33: 1.433  time: 0.2521  data_time: 0.0006  lr: 2.07e-04  max_mem: 22745M
[05/30 17:22:05] fastreid.utils.events INFO:  eta: 0:01:34  epoch/iter: 44/1124  total_loss: 48.32  loss_cls_b1: 5.304  loss_cls_b2: 5.661  loss_cls_b21: 5.513  loss_cls_b22: 5.49  loss_cls_b3: 5.457  loss_cls_b31: 5.53  loss_cls_b32: 5.522  loss_cls_b33: 5.57  loss_triplet_b1: 0.8696  loss_triplet_b2: 0.7741  loss_triplet_b3: 0.8105  loss_triplet_b22: 0.8561  loss_triplet_b33: 0.896  time: 0.2522  data_time: 0.0006  lr: 2.11e-04  max_mem: 22745M
[05/30 17:22:11] fastreid.utils.events INFO:  eta: 0:01:28  epoch/iter: 45/1149  total_loss: 37.59  loss_cls_b1: 4.045  loss_cls_b2: 4.332  loss_cls_b21: 4.33  loss_cls_b22: 4.397  loss_cls_b3: 4.393  loss_cls_b31: 4.352  loss_cls_b32: 4.412  loss_cls_b33: 4.387  loss_triplet_b1: 0.6453  loss_triplet_b2: 0.6117  loss_triplet_b3: 0.5909  loss_triplet_b22: 0.6396  loss_triplet_b33: 0.6937  time: 0.2524  data_time: 0.0004  lr: 2.15e-04  max_mem: 22745M
[05/30 17:22:18] fastreid.utils.events INFO:  eta: 0:01:21  epoch/iter: 46/1174  total_loss: 30.86  loss_cls_b1: 3.224  loss_cls_b2: 3.561  loss_cls_b21: 3.527  loss_cls_b22: 3.714  loss_cls_b3: 3.73  loss_cls_b31: 3.661  loss_cls_b32: 3.755  loss_cls_b33: 3.746  loss_triplet_b1: 0.4457  loss_triplet_b2: 0.453  loss_triplet_b3: 0.441  loss_triplet_b22: 0.4715  loss_triplet_b33: 0.4986  time: 0.2525  data_time: 0.0009  lr: 2.19e-04  max_mem: 22745M
[05/30 17:22:25] fastreid.utils.events INFO:  eta: 0:01:15  epoch/iter: 47/1199  total_loss: 24.89  loss_cls_b1: 2.617  loss_cls_b2: 2.951  loss_cls_b21: 2.838  loss_cls_b22: 3.048  loss_cls_b3: 2.891  loss_cls_b31: 2.848  loss_cls_b32: 2.869  loss_cls_b33: 3.16  loss_triplet_b1: 0.3296  loss_triplet_b2: 0.3299  loss_triplet_b3: 0.3597  loss_triplet_b22: 0.3504  loss_triplet_b33: 0.3398  time: 0.2526  data_time: 0.0007  lr: 2.23e-04  max_mem: 22745M
[05/30 17:22:25] fastreid.utils.events INFO:  eta: 0:01:15  epoch/iter: 47/1199  total_loss: 24.89  loss_cls_b1: 2.617  loss_cls_b2: 2.951  loss_cls_b21: 2.838  loss_cls_b22: 3.048  loss_cls_b3: 2.891  loss_cls_b31: 2.848  loss_cls_b32: 2.869  loss_cls_b33: 3.16  loss_triplet_b1: 0.3296  loss_triplet_b2: 0.3299  loss_triplet_b3: 0.3597  loss_triplet_b22: 0.3504  loss_triplet_b33: 0.3398  time: 0.2526  data_time: 0.0007  lr: 2.23e-04  max_mem: 22745M
[05/30 17:22:31] fastreid.utils.events INFO:  eta: 0:01:09  epoch/iter: 48/1224  total_loss: 21.5  loss_cls_b1: 2.199  loss_cls_b2: 2.528  loss_cls_b21: 2.424  loss_cls_b22: 2.641  loss_cls_b3: 2.548  loss_cls_b31: 2.561  loss_cls_b32: 2.538  loss_cls_b33: 2.729  loss_triplet_b1: 0.2532  loss_triplet_b2: 0.2401  loss_triplet_b3: 0.2459  loss_triplet_b22: 0.2202  loss_triplet_b33: 0.2409  time: 0.2527  data_time: 0.0007  lr: 2.27e-04  max_mem: 22745M
[05/30 17:22:38] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:22:38] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[05/30 17:22:38] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[05/30 17:22:41] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2157 s / batch. ETA=0:00:01
[05/30 17:22:42] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.261559 (0.205596 s / batch per device, on 1 devices)
[05/30 17:22:42] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.204478 s / batch per device, on 1 devices)
[05/30 17:22:43] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[05/30 17:22:43] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 93.16    | 97.44    | 98.29     | 86.33 | 62.17  | 89.75    |[0m
[05/30 17:22:43] fastreid.utils.events INFO:  eta: 0:01:03  epoch/iter: 49/1249  total_loss: 19.26  loss_cls_b1: 1.962  loss_cls_b2: 2.119  loss_cls_b21: 2.244  loss_cls_b22: 2.313  loss_cls_b3: 2.178  loss_cls_b31: 2.275  loss_cls_b32: 2.301  loss_cls_b33: 2.527  loss_triplet_b1: 0.1982  loss_triplet_b2: 0.1913  loss_triplet_b3: 0.188  loss_triplet_b22: 0.1703  loss_triplet_b33: 0.1706  time: 0.2528  data_time: 0.0005  lr: 2.31e-04  max_mem: 22745M
[05/30 17:22:49] fastreid.utils.events INFO:  eta: 0:00:56  epoch/iter: 50/1274  total_loss: 16.16  loss_cls_b1: 1.611  loss_cls_b2: 1.781  loss_cls_b21: 1.831  loss_cls_b22: 1.978  loss_cls_b3: 1.824  loss_cls_b31: 1.949  loss_cls_b32: 2.027  loss_cls_b33: 2.212  loss_triplet_b1: 0.1526  loss_triplet_b2: 0.1637  loss_triplet_b3: 0.1553  loss_triplet_b22: 0.1369  loss_triplet_b33: 0.1376  time: 0.2529  data_time: 0.0007  lr: 2.35e-04  max_mem: 22745M
[05/30 17:22:56] fastreid.utils.events INFO:  eta: 0:00:50  epoch/iter: 51/1299  total_loss: 13.54  loss_cls_b1: 1.374  loss_cls_b2: 1.531  loss_cls_b21: 1.595  loss_cls_b22: 1.712  loss_cls_b3: 1.549  loss_cls_b31: 1.717  loss_cls_b32: 1.807  loss_cls_b33: 2.002  loss_triplet_b1: 0.1136  loss_triplet_b2: 0.1166  loss_triplet_b3: 0.1355  loss_triplet_b22: 0.1055  loss_triplet_b33: 0.1176  time: 0.2530  data_time: 0.0005  lr: 2.39e-04  max_mem: 22745M
[05/30 17:23:02] fastreid.utils.events INFO:  eta: 0:00:44  epoch/iter: 52/1324  total_loss: 12.78  loss_cls_b1: 1.284  loss_cls_b2: 1.418  loss_cls_b21: 1.495  loss_cls_b22: 1.651  loss_cls_b3: 1.458  loss_cls_b31: 1.578  loss_cls_b32: 1.676  loss_cls_b33: 1.891  loss_triplet_b1: 0.09786  loss_triplet_b2: 0.09628  loss_triplet_b3: 0.1092  loss_triplet_b22: 0.077  loss_triplet_b33: 0.08619  time: 0.2531  data_time: 0.0010  lr: 2.43e-04  max_mem: 22745M
[05/30 17:23:09] fastreid.utils.events INFO:  eta: 0:00:37  epoch/iter: 53/1349  total_loss: 12.02  loss_cls_b1: 1.14  loss_cls_b2: 1.273  loss_cls_b21: 1.365  loss_cls_b22: 1.495  loss_cls_b3: 1.332  loss_cls_b31: 1.462  loss_cls_b32: 1.512  loss_cls_b33: 1.72  loss_triplet_b1: 0.07149  loss_triplet_b2: 0.08001  loss_triplet_b3: 0.08441  loss_triplet_b22: 0.05862  loss_triplet_b33: 0.0595  time: 0.2531  data_time: 0.0010  lr: 2.47e-04  max_mem: 22745M
[05/30 17:23:15] fastreid.utils.events INFO:  eta: 0:00:31  epoch/iter: 54/1374  total_loss: 10.81  loss_cls_b1: 1.037  loss_cls_b2: 1.134  loss_cls_b21: 1.218  loss_cls_b22: 1.332  loss_cls_b3: 1.185  loss_cls_b31: 1.345  loss_cls_b32: 1.357  loss_cls_b33: 1.585  loss_triplet_b1: 0.05705  loss_triplet_b2: 0.05639  loss_triplet_b3: 0.06791  loss_triplet_b22: 0.04092  loss_triplet_b33: 0.04944  time: 0.2533  data_time: 0.0009  lr: 2.50e-04  max_mem: 22745M
[05/30 17:23:22] fastreid.utils.events INFO:  eta: 0:00:25  epoch/iter: 55/1399  total_loss: 10.39  loss_cls_b1: 0.9845  loss_cls_b2: 1.052  loss_cls_b21: 1.166  loss_cls_b22: 1.261  loss_cls_b3: 1.159  loss_cls_b31: 1.31  loss_cls_b32: 1.284  loss_cls_b33: 1.569  loss_triplet_b1: 0.05226  loss_triplet_b2: 0.04781  loss_triplet_b3: 0.06322  loss_triplet_b22: 0.03725  loss_triplet_b33: 0.04058  time: 0.2533  data_time: 0.0006  lr: 2.54e-04  max_mem: 22745M
[05/30 17:23:22] fastreid.utils.events INFO:  eta: 0:00:25  epoch/iter: 55/1399  total_loss: 10.39  loss_cls_b1: 0.9845  loss_cls_b2: 1.052  loss_cls_b21: 1.166  loss_cls_b22: 1.261  loss_cls_b3: 1.159  loss_cls_b31: 1.31  loss_cls_b32: 1.284  loss_cls_b33: 1.569  loss_triplet_b1: 0.05226  loss_triplet_b2: 0.04781  loss_triplet_b3: 0.06322  loss_triplet_b22: 0.03725  loss_triplet_b33: 0.04058  time: 0.2533  data_time: 0.0006  lr: 2.54e-04  max_mem: 22745M
[05/30 17:23:28] fastreid.utils.events INFO:  eta: 0:00:19  epoch/iter: 56/1424  total_loss: 9.629  loss_cls_b1: 0.8805  loss_cls_b2: 0.9607  loss_cls_b21: 1.083  loss_cls_b22: 1.173  loss_cls_b3: 1.062  loss_cls_b31: 1.2  loss_cls_b32: 1.216  loss_cls_b33: 1.459  loss_triplet_b1: 0.03904  loss_triplet_b2: 0.04001  loss_triplet_b3: 0.0528  loss_triplet_b22: 0.02994  loss_triplet_b33: 0.03364  time: 0.2533  data_time: 0.0008  lr: 2.58e-04  max_mem: 22745M
[05/30 17:23:35] fastreid.utils.events INFO:  eta: 0:00:12  epoch/iter: 57/1449  total_loss: 8.664  loss_cls_b1: 0.8084  loss_cls_b2: 0.8915  loss_cls_b21: 1.029  loss_cls_b22: 1.119  loss_cls_b3: 1.003  loss_cls_b31: 1.144  loss_cls_b32: 1.183  loss_cls_b33: 1.387  loss_triplet_b1: 0.033  loss_triplet_b2: 0.03339  loss_triplet_b3: 0.04491  loss_triplet_b22: 0.02339  loss_triplet_b33: 0.02799  time: 0.2535  data_time: 0.0016  lr: 2.62e-04  max_mem: 22745M
[05/30 17:23:42] fastreid.utils.events INFO:  eta: 0:00:06  epoch/iter: 58/1474  total_loss: 8.198  loss_cls_b1: 0.7728  loss_cls_b2: 0.8348  loss_cls_b21: 0.925  loss_cls_b22: 1.049  loss_cls_b3: 0.9056  loss_cls_b31: 1.038  loss_cls_b32: 1.081  loss_cls_b33: 1.319  loss_triplet_b1: 0.02863  loss_triplet_b2: 0.03242  loss_triplet_b3: 0.04194  loss_triplet_b22: 0.02118  loss_triplet_b33: 0.02337  time: 0.2535  data_time: 0.0008  lr: 2.66e-04  max_mem: 22745M
[05/30 17:23:48] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/1499  total_loss: 7.632  loss_cls_b1: 0.7331  loss_cls_b2: 0.8115  loss_cls_b21: 0.8971  loss_cls_b22: 1.016  loss_cls_b3: 0.8581  loss_cls_b31: 0.998  loss_cls_b32: 1.046  loss_cls_b33: 1.246  loss_triplet_b1: 0.02534  loss_triplet_b2: 0.02708  loss_triplet_b3: 0.03577  loss_triplet_b22: 0.01811  loss_triplet_b33: 0.02008  time: 0.2536  data_time: 0.0006  lr: 2.70e-04  max_mem: 22745M
[05/30 17:23:48] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:23:48] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[05/30 17:23:48] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[05/30 17:23:52] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2125 s / batch. ETA=0:00:01
[05/30 17:23:53] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.252327 (0.204757 s / batch per device, on 1 devices)
[05/30 17:23:53] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.203610 s / batch per device, on 1 devices)
[05/30 17:23:53] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[05/30 17:23:53] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 93.73    | 97.72    | 98.86     | 90.47 | 72.25  | 92.10    |[0m
[05/30 17:23:53] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_best.pth
[05/30 17:23:58] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_final.pth
[05/30 17:24:00] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/1499  total_loss: 7.632  loss_cls_b1: 0.7331  loss_cls_b2: 0.8115  loss_cls_b21: 0.8971  loss_cls_b22: 1.016  loss_cls_b3: 0.8581  loss_cls_b31: 0.998  loss_cls_b32: 1.046  loss_cls_b33: 1.246  loss_triplet_b1: 0.02534  loss_triplet_b2: 0.02708  loss_triplet_b3: 0.03577  loss_triplet_b22: 0.01811  loss_triplet_b33: 0.02008  time: 0.2536  data_time: 0.0006  lr: 2.70e-04  max_mem: 22745M
[05/30 17:24:00] fastreid.engine.hooks INFO: Overall training speed: 1498 iterations in 0:06:19 (0.2536 s / it)
[05/30 17:24:00] fastreid.engine.hooks INFO: Total training time: 0:07:09 (0:00:49 on hooks)
[06/12 15:24:10] fastreid INFO: Rank of current process: 0. World size: 1
[06/12 15:24:11] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/12 15:24:11] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', '/logs/wildsplit7/model_best.pth', 'MODEL.DEVICE', 'cuda:0'], resume=False)
[06/12 15:24:11] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[06/12 15:24:11] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:0
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: /logs/wildsplit7/model_best.pth
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/12 15:24:11] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit7/mgn_R50-ibn/config.yaml
[06/12 15:24:11] fastreid.utils.env INFO: Using a generated random seed 13603480
[06/12 15:24:21] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/12 15:24:21] fastreid.utils.checkpoint INFO: Loading checkpoint from /logs/wildsplit7/model_best.pth
[06/12 15:27:01] fastreid INFO: Rank of current process: 0. World size: 1
[06/12 15:27:01] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/12 15:27:01] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', '/logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', 'cuda:0'], resume=False)
[06/12 15:27:01] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[06/12 15:27:01] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:0
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: /logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/12 15:27:01] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit7/mgn_R50-ibn/config.yaml
[06/12 15:27:01] fastreid.utils.env INFO: Using a generated random seed 3535671
[06/12 15:27:12] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/12 15:27:12] fastreid.utils.checkpoint INFO: Loading checkpoint from /logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/12 15:29:16] fastreid INFO: Rank of current process: 0. World size: 1
[06/12 15:29:17] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/12 15:29:17] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', '.logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', 'cuda:1'], resume=False)
[06/12 15:29:17] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[06/12 15:29:17] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: .logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/12 15:29:17] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit7/mgn_R50-ibn/config.yaml
[06/12 15:29:17] fastreid.utils.env INFO: Using a generated random seed 18950896
[06/12 15:29:23] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/12 15:29:23] fastreid.utils.checkpoint INFO: Loading checkpoint from .logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/12 15:30:29] fastreid INFO: Rank of current process: 0. World size: 1
[06/12 15:30:30] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/12 15:30:30] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', 'cuda:1'], resume=False)
[06/12 15:30:30] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[06/12 15:30:30] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/12 15:30:30] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit7/mgn_R50-ibn/config.yaml
[06/12 15:30:30] fastreid.utils.env INFO: Using a generated random seed 31975419
[06/12 15:30:36] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/12 15:30:36] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:30:39] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb32_head.weight[0m
  [34mb2_head.weight[0m
  [34mb22_head.weight[0m
  [34mb3_head.weight[0m
  [34mb33_head.weight[0m
  [34mb21_head.weight[0m
  [34mb1_head.weight[0m
  [34mb31_head.weight[0m
[06/12 15:30:39] fastreid.engine.defaults INFO: Prepare testing set
[06/12 15:30:39] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 67      | 353        | 1           |
| gallery  | 98      | 1641       | 1           |[0m
[06/12 15:30:40] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[06/12 15:30:50] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.0246 s / batch. ETA=0:00:00
[06/12 15:30:51] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:01.426541 (0.129686 s / batch per device, on 1 devices)
[06/12 15:30:51] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:00 (0.025786 s / batch per device, on 1 devices)
[06/12 15:30:51] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[06/12 15:30:51] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 93.73    | 97.72    | 98.86     | 90.47 | 72.25  | 92.10    |[0m
[12/27 00:33:36] fastreid INFO: Rank of current process: 0. World size: 1
[12/27 00:33:37] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/27 00:33:37] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', 'cuda:3'], resume=False)
[12/27 00:33:37] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[12/27 00:33:37] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/27 00:33:37] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit7/mgn_R50-ibn/config.yaml
[12/27 00:33:37] fastreid.utils.env INFO: Using a generated random seed 37551732
[12/27 00:33:37] fastreid.engine.defaults INFO: Prepare training set
[12/27 00:33:37] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 1631       | 1           |[0m
[12/27 00:33:37] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/27 00:33:37] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[12/27 00:33:38] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[12/27 00:33:40] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[12/27 00:33:53] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[12/27 00:34:05] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[12/27 00:34:05] fastreid.engine.train_loop INFO: Starting training from epoch 0
[12/27 00:34:06] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[12/27 00:34:23] fastreid.utils.events INFO:  eta: 0:12:28  epoch/iter: 0/24  total_loss: 56.73  loss_cls_b1: 6.178  loss_cls_b2: 6.24  loss_cls_b21: 6.199  loss_cls_b22: 6.171  loss_cls_b3: 6.194  loss_cls_b31: 6.252  loss_cls_b32: 6.263  loss_cls_b33: 6.215  loss_triplet_b1: 1.257  loss_triplet_b2: 1.366  loss_triplet_b3: 1.317  loss_triplet_b22: 1.518  loss_triplet_b33: 1.7  time: 0.5008  data_time: 0.0020  lr: 3.81e-05  max_mem: 72M
[12/27 00:34:36] fastreid.utils.events INFO:  eta: 0:12:28  epoch/iter: 1/49  total_loss: 57.34  loss_cls_b1: 6.179  loss_cls_b2: 6.191  loss_cls_b21: 6.211  loss_cls_b22: 6.2  loss_cls_b3: 6.168  loss_cls_b31: 6.205  loss_cls_b32: 6.287  loss_cls_b33: 6.226  loss_triplet_b1: 1.443  loss_triplet_b2: 1.412  loss_triplet_b3: 1.394  loss_triplet_b22: 1.655  loss_triplet_b33: 1.836  time: 0.5175  data_time: 0.0019  lr: 4.19e-05  max_mem: 72M
[12/27 00:34:49] fastreid.utils.events INFO:  eta: 0:12:07  epoch/iter: 2/74  total_loss: 57.48  loss_cls_b1: 6.187  loss_cls_b2: 6.238  loss_cls_b21: 6.199  loss_cls_b22: 6.206  loss_cls_b3: 6.17  loss_cls_b31: 6.186  loss_cls_b32: 6.291  loss_cls_b33: 6.232  loss_triplet_b1: 1.468  loss_triplet_b2: 1.421  loss_triplet_b3: 1.426  loss_triplet_b22: 1.702  loss_triplet_b33: 1.875  time: 0.5137  data_time: 0.0010  lr: 4.59e-05  max_mem: 72M
[12/27 00:35:01] fastreid.utils.events INFO:  eta: 0:11:45  epoch/iter: 3/99  total_loss: 57.44  loss_cls_b1: 6.189  loss_cls_b2: 6.233  loss_cls_b21: 6.189  loss_cls_b22: 6.194  loss_cls_b3: 6.17  loss_cls_b31: 6.217  loss_cls_b32: 6.273  loss_cls_b33: 6.253  loss_triplet_b1: 1.421  loss_triplet_b2: 1.391  loss_triplet_b3: 1.404  loss_triplet_b22: 1.627  loss_triplet_b33: 1.835  time: 0.5090  data_time: 0.0016  lr: 4.98e-05  max_mem: 72M
[12/27 00:35:15] fastreid.utils.events INFO:  eta: 0:11:39  epoch/iter: 4/124  total_loss: 57.42  loss_cls_b1: 6.185  loss_cls_b2: 6.24  loss_cls_b21: 6.174  loss_cls_b22: 6.206  loss_cls_b3: 6.17  loss_cls_b31: 6.188  loss_cls_b32: 6.271  loss_cls_b33: 6.249  loss_triplet_b1: 1.421  loss_triplet_b2: 1.393  loss_triplet_b3: 1.398  loss_triplet_b22: 1.639  loss_triplet_b33: 1.851  time: 0.5159  data_time: 0.0007  lr: 5.37e-05  max_mem: 72M
[12/27 00:35:27] fastreid.utils.events INFO:  eta: 0:11:18  epoch/iter: 5/149  total_loss: 57.2  loss_cls_b1: 6.197  loss_cls_b2: 6.225  loss_cls_b21: 6.165  loss_cls_b22: 6.207  loss_cls_b3: 6.163  loss_cls_b31: 6.149  loss_cls_b32: 6.263  loss_cls_b33: 6.243  loss_triplet_b1: 1.413  loss_triplet_b2: 1.387  loss_triplet_b3: 1.39  loss_triplet_b22: 1.609  loss_triplet_b33: 1.813  time: 0.5125  data_time: 0.0013  lr: 5.77e-05  max_mem: 72M
[12/27 00:35:40] fastreid.utils.events INFO:  eta: 0:11:05  epoch/iter: 6/174  total_loss: 57.16  loss_cls_b1: 6.187  loss_cls_b2: 6.221  loss_cls_b21: 6.163  loss_cls_b22: 6.194  loss_cls_b3: 6.158  loss_cls_b31: 6.153  loss_cls_b32: 6.263  loss_cls_b33: 6.249  loss_triplet_b1: 1.392  loss_triplet_b2: 1.384  loss_triplet_b3: 1.385  loss_triplet_b22: 1.612  loss_triplet_b33: 1.806  time: 0.5113  data_time: 0.0009  lr: 6.16e-05  max_mem: 72M
[12/27 00:35:53] fastreid.utils.events INFO:  eta: 0:10:52  epoch/iter: 7/199  total_loss: 57.15  loss_cls_b1: 6.196  loss_cls_b2: 6.229  loss_cls_b21: 6.162  loss_cls_b22: 6.194  loss_cls_b3: 6.158  loss_cls_b31: 6.146  loss_cls_b32: 6.258  loss_cls_b33: 6.24  loss_triplet_b1: 1.388  loss_triplet_b2: 1.369  loss_triplet_b3: 1.387  loss_triplet_b22: 1.614  loss_triplet_b33: 1.804  time: 0.5107  data_time: 0.0009  lr: 6.56e-05  max_mem: 72M
[12/27 00:35:53] fastreid.utils.events INFO:  eta: 0:10:52  epoch/iter: 7/199  total_loss: 57.15  loss_cls_b1: 6.196  loss_cls_b2: 6.229  loss_cls_b21: 6.162  loss_cls_b22: 6.194  loss_cls_b3: 6.158  loss_cls_b31: 6.146  loss_cls_b32: 6.258  loss_cls_b33: 6.24  loss_triplet_b1: 1.388  loss_triplet_b2: 1.369  loss_triplet_b3: 1.387  loss_triplet_b22: 1.614  loss_triplet_b33: 1.804  time: 0.5107  data_time: 0.0009  lr: 6.56e-05  max_mem: 72M
[12/27 00:36:06] fastreid.utils.events INFO:  eta: 0:10:39  epoch/iter: 8/224  total_loss: 57.16  loss_cls_b1: 6.203  loss_cls_b2: 6.22  loss_cls_b21: 6.152  loss_cls_b22: 6.194  loss_cls_b3: 6.156  loss_cls_b31: 6.141  loss_cls_b32: 6.255  loss_cls_b33: 6.259  loss_triplet_b1: 1.391  loss_triplet_b2: 1.369  loss_triplet_b3: 1.385  loss_triplet_b22: 1.614  loss_triplet_b33: 1.804  time: 0.5121  data_time: 0.0015  lr: 6.95e-05  max_mem: 72M
[12/27 00:36:19] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:36:19] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 353        | 1           |
| gallery  | 297     | 1641       | 1           |[0m
[12/27 00:36:19] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[12/27 00:36:27] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2886 s / batch. ETA=0:00:01
[12/27 00:36:30] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:04.961130 (0.451012 s / batch per device, on 1 devices)
[12/27 00:36:30] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:04 (0.449286 s / batch per device, on 1 devices)
[12/27 00:36:30] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[12/27 00:36:30] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 79.20    | 89.17    | 93.16     | 54.48 | 9.97   | 66.84    |[0m
[12/27 00:36:31] fastreid.utils.events INFO:  eta: 0:10:25  epoch/iter: 9/249  total_loss: 57.15  loss_cls_b1: 6.208  loss_cls_b2: 6.218  loss_cls_b21: 6.15  loss_cls_b22: 6.193  loss_cls_b3: 6.16  loss_cls_b31: 6.146  loss_cls_b32: 6.249  loss_cls_b33: 6.258  loss_triplet_b1: 1.371  loss_triplet_b2: 1.36  loss_triplet_b3: 1.385  loss_triplet_b22: 1.609  loss_triplet_b33: 1.795  time: 0.5106  data_time: 0.0013  lr: 7.34e-05  max_mem: 252M
[12/27 00:36:44] fastreid.utils.events INFO:  eta: 0:10:15  epoch/iter: 10/274  total_loss: 57.15  loss_cls_b1: 6.208  loss_cls_b2: 6.218  loss_cls_b21: 6.152  loss_cls_b22: 6.198  loss_cls_b3: 6.16  loss_cls_b31: 6.156  loss_cls_b32: 6.246  loss_cls_b33: 6.258  loss_triplet_b1: 1.362  loss_triplet_b2: 1.364  loss_triplet_b3: 1.386  loss_triplet_b22: 1.597  loss_triplet_b33: 1.788  time: 0.5125  data_time: 0.0009  lr: 7.74e-05  max_mem: 252M
[12/27 00:36:57] fastreid.utils.events INFO:  eta: 0:10:05  epoch/iter: 11/299  total_loss: 57.35  loss_cls_b1: 6.215  loss_cls_b2: 6.21  loss_cls_b21: 6.16  loss_cls_b22: 6.204  loss_cls_b3: 6.15  loss_cls_b31: 6.154  loss_cls_b32: 6.247  loss_cls_b33: 6.264  loss_triplet_b1: 1.406  loss_triplet_b2: 1.398  loss_triplet_b3: 1.412  loss_triplet_b22: 1.682  loss_triplet_b33: 1.838  time: 0.5132  data_time: 0.0009  lr: 8.13e-05  max_mem: 252M
[12/27 00:37:10] fastreid.utils.events INFO:  eta: 0:09:56  epoch/iter: 12/324  total_loss: 57.61  loss_cls_b1: 6.22  loss_cls_b2: 6.185  loss_cls_b21: 6.16  loss_cls_b22: 6.204  loss_cls_b3: 6.153  loss_cls_b31: 6.163  loss_cls_b32: 6.24  loss_cls_b33: 6.275  loss_triplet_b1: 1.44  loss_triplet_b2: 1.44  loss_triplet_b3: 1.443  loss_triplet_b22: 1.713  loss_triplet_b33: 1.858  time: 0.5138  data_time: 0.0008  lr: 8.52e-05  max_mem: 252M
[12/27 00:37:23] fastreid.utils.events INFO:  eta: 0:09:43  epoch/iter: 13/349  total_loss: 57.78  loss_cls_b1: 6.212  loss_cls_b2: 6.185  loss_cls_b21: 6.16  loss_cls_b22: 6.207  loss_cls_b3: 6.163  loss_cls_b31: 6.182  loss_cls_b32: 6.234  loss_cls_b33: 6.279  loss_triplet_b1: 1.482  loss_triplet_b2: 1.472  loss_triplet_b3: 1.502  loss_triplet_b22: 1.727  loss_triplet_b33: 1.895  time: 0.5132  data_time: 0.0009  lr: 8.92e-05  max_mem: 252M
[12/27 00:37:35] fastreid.utils.events INFO:  eta: 0:09:27  epoch/iter: 14/374  total_loss: 57.8  loss_cls_b1: 6.229  loss_cls_b2: 6.182  loss_cls_b21: 6.161  loss_cls_b22: 6.21  loss_cls_b3: 6.163  loss_cls_b31: 6.19  loss_cls_b32: 6.235  loss_cls_b33: 6.267  loss_triplet_b1: 1.516  loss_triplet_b2: 1.494  loss_triplet_b3: 1.523  loss_triplet_b22: 1.741  loss_triplet_b33: 1.91  time: 0.5102  data_time: 0.0020  lr: 9.31e-05  max_mem: 252M
[12/27 00:37:46] fastreid.utils.events INFO:  eta: 0:09:12  epoch/iter: 15/399  total_loss: 58.01  loss_cls_b1: 6.234  loss_cls_b2: 6.162  loss_cls_b21: 6.168  loss_cls_b22: 6.208  loss_cls_b3: 6.17  loss_cls_b31: 6.198  loss_cls_b32: 6.235  loss_cls_b33: 6.272  loss_triplet_b1: 1.536  loss_triplet_b2: 1.527  loss_triplet_b3: 1.544  loss_triplet_b22: 1.776  loss_triplet_b33: 1.966  time: 0.5047  data_time: 0.0006  lr: 9.71e-05  max_mem: 252M
[12/27 00:37:46] fastreid.utils.events INFO:  eta: 0:09:12  epoch/iter: 15/399  total_loss: 58.01  loss_cls_b1: 6.234  loss_cls_b2: 6.162  loss_cls_b21: 6.168  loss_cls_b22: 6.208  loss_cls_b3: 6.17  loss_cls_b31: 6.198  loss_cls_b32: 6.235  loss_cls_b33: 6.272  loss_triplet_b1: 1.536  loss_triplet_b2: 1.527  loss_triplet_b3: 1.544  loss_triplet_b22: 1.776  loss_triplet_b33: 1.966  time: 0.5047  data_time: 0.0006  lr: 9.71e-05  max_mem: 252M
[12/27 00:37:57] fastreid.utils.events INFO:  eta: 0:08:57  epoch/iter: 16/424  total_loss: 58.04  loss_cls_b1: 6.223  loss_cls_b2: 6.155  loss_cls_b21: 6.18  loss_cls_b22: 6.211  loss_cls_b3: 6.168  loss_cls_b31: 6.209  loss_cls_b32: 6.231  loss_cls_b33: 6.265  loss_triplet_b1: 1.541  loss_triplet_b2: 1.553  loss_triplet_b3: 1.579  loss_triplet_b22: 1.797  loss_triplet_b33: 1.972  time: 0.5007  data_time: 0.0016  lr: 1.01e-04  max_mem: 252M
[12/27 00:38:08] fastreid.utils.events INFO:  eta: 0:08:40  epoch/iter: 17/449  total_loss: 58.05  loss_cls_b1: 6.229  loss_cls_b2: 6.157  loss_cls_b21: 6.177  loss_cls_b22: 6.197  loss_cls_b3: 6.159  loss_cls_b31: 6.19  loss_cls_b32: 6.227  loss_cls_b33: 6.25  loss_triplet_b1: 1.579  loss_triplet_b2: 1.565  loss_triplet_b3: 1.6  loss_triplet_b22: 1.814  loss_triplet_b33: 1.998  time: 0.4969  data_time: 0.0010  lr: 1.05e-04  max_mem: 252M
[12/27 00:38:19] fastreid.utils.events INFO:  eta: 0:08:27  epoch/iter: 18/474  total_loss: 58.1  loss_cls_b1: 6.233  loss_cls_b2: 6.15  loss_cls_b21: 6.175  loss_cls_b22: 6.196  loss_cls_b3: 6.156  loss_cls_b31: 6.177  loss_cls_b32: 6.235  loss_cls_b33: 6.25  loss_triplet_b1: 1.584  loss_triplet_b2: 1.58  loss_triplet_b3: 1.622  loss_triplet_b22: 1.837  loss_triplet_b33: 2.008  time: 0.4946  data_time: 0.0014  lr: 1.09e-04  max_mem: 252M
[12/27 00:38:30] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:38:30] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 353        | 1           |
| gallery  | 297     | 1641       | 1           |[0m
[12/27 00:38:30] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[12/27 00:38:36] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.3026 s / batch. ETA=0:00:01
[12/27 00:38:37] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:03.099020 (0.281729 s / batch per device, on 1 devices)
[12/27 00:38:37] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.279337 s / batch per device, on 1 devices)
[12/27 00:38:38] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[12/27 00:38:38] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 79.20    | 89.74    | 91.45     | 51.36 | 9.53   | 65.28    |[0m
[12/27 00:38:38] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_best.pth
[12/27 00:38:41] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_0019.pth
[12/27 00:38:44] fastreid.utils.events INFO:  eta: 0:08:11  epoch/iter: 19/499  total_loss: 58.01  loss_cls_b1: 6.215  loss_cls_b2: 6.151  loss_cls_b21: 6.164  loss_cls_b22: 6.192  loss_cls_b3: 6.169  loss_cls_b31: 6.186  loss_cls_b32: 6.223  loss_cls_b33: 6.25  loss_triplet_b1: 1.544  loss_triplet_b2: 1.56  loss_triplet_b3: 1.583  loss_triplet_b22: 1.811  loss_triplet_b33: 2.001  time: 0.4917  data_time: 0.0017  lr: 1.13e-04  max_mem: 252M
[12/27 00:38:55] fastreid.utils.events INFO:  eta: 0:07:56  epoch/iter: 20/524  total_loss: 57.9  loss_cls_b1: 6.233  loss_cls_b2: 6.154  loss_cls_b21: 6.17  loss_cls_b22: 6.2  loss_cls_b3: 6.157  loss_cls_b31: 6.186  loss_cls_b32: 6.227  loss_cls_b33: 6.231  loss_triplet_b1: 1.52  loss_triplet_b2: 1.519  loss_triplet_b3: 1.544  loss_triplet_b22: 1.76  loss_triplet_b33: 1.966  time: 0.4894  data_time: 0.0007  lr: 1.17e-04  max_mem: 252M
[12/27 00:39:06] fastreid.utils.events INFO:  eta: 0:07:39  epoch/iter: 21/549  total_loss: 57.94  loss_cls_b1: 6.228  loss_cls_b2: 6.147  loss_cls_b21: 6.181  loss_cls_b22: 6.19  loss_cls_b3: 6.146  loss_cls_b31: 6.185  loss_cls_b32: 6.239  loss_cls_b33: 6.231  loss_triplet_b1: 1.536  loss_triplet_b2: 1.538  loss_triplet_b3: 1.578  loss_triplet_b22: 1.801  loss_triplet_b33: 1.992  time: 0.4867  data_time: 0.0008  lr: 1.21e-04  max_mem: 252M
[12/27 00:39:17] fastreid.utils.events INFO:  eta: 0:07:26  epoch/iter: 22/574  total_loss: 57.93  loss_cls_b1: 6.215  loss_cls_b2: 6.145  loss_cls_b21: 6.184  loss_cls_b22: 6.193  loss_cls_b3: 6.157  loss_cls_b31: 6.185  loss_cls_b32: 6.238  loss_cls_b33: 6.244  loss_triplet_b1: 1.52  loss_triplet_b2: 1.52  loss_triplet_b3: 1.56  loss_triplet_b22: 1.81  loss_triplet_b33: 1.974  time: 0.4849  data_time: 0.0010  lr: 1.25e-04  max_mem: 252M
[12/27 00:39:28] fastreid.utils.events INFO:  eta: 0:07:11  epoch/iter: 23/599  total_loss: 57.85  loss_cls_b1: 6.205  loss_cls_b2: 6.156  loss_cls_b21: 6.164  loss_cls_b22: 6.204  loss_cls_b3: 6.137  loss_cls_b31: 6.185  loss_cls_b32: 6.235  loss_cls_b33: 6.244  loss_triplet_b1: 1.512  loss_triplet_b2: 1.507  loss_triplet_b3: 1.552  loss_triplet_b22: 1.787  loss_triplet_b33: 1.933  time: 0.4827  data_time: 0.0008  lr: 1.29e-04  max_mem: 252M
[12/27 00:39:28] fastreid.utils.events INFO:  eta: 0:07:11  epoch/iter: 23/599  total_loss: 57.85  loss_cls_b1: 6.205  loss_cls_b2: 6.156  loss_cls_b21: 6.164  loss_cls_b22: 6.204  loss_cls_b3: 6.137  loss_cls_b31: 6.185  loss_cls_b32: 6.235  loss_cls_b33: 6.244  loss_triplet_b1: 1.512  loss_triplet_b2: 1.507  loss_triplet_b3: 1.552  loss_triplet_b22: 1.787  loss_triplet_b33: 1.933  time: 0.4827  data_time: 0.0008  lr: 1.29e-04  max_mem: 252M
[12/27 00:39:39] fastreid.utils.events INFO:  eta: 0:06:57  epoch/iter: 24/624  total_loss: 58.06  loss_cls_b1: 6.205  loss_cls_b2: 6.155  loss_cls_b21: 6.164  loss_cls_b22: 6.185  loss_cls_b3: 6.138  loss_cls_b31: 6.179  loss_cls_b32: 6.244  loss_cls_b33: 6.245  loss_triplet_b1: 1.543  loss_triplet_b2: 1.565  loss_triplet_b3: 1.586  loss_triplet_b22: 1.823  loss_triplet_b33: 2.023  time: 0.4811  data_time: 0.0014  lr: 1.32e-04  max_mem: 252M
[12/27 00:39:50] fastreid.utils.events INFO:  eta: 0:06:42  epoch/iter: 25/649  total_loss: 58.03  loss_cls_b1: 6.194  loss_cls_b2: 6.152  loss_cls_b21: 6.172  loss_cls_b22: 6.207  loss_cls_b3: 6.136  loss_cls_b31: 6.195  loss_cls_b32: 6.244  loss_cls_b33: 6.245  loss_triplet_b1: 1.543  loss_triplet_b2: 1.54  loss_triplet_b3: 1.581  loss_triplet_b22: 1.812  loss_triplet_b33: 1.987  time: 0.4799  data_time: 0.0015  lr: 1.36e-04  max_mem: 252M
[12/27 00:40:02] fastreid.utils.events INFO:  eta: 0:06:29  epoch/iter: 26/674  total_loss: 58.03  loss_cls_b1: 6.18  loss_cls_b2: 6.148  loss_cls_b21: 6.174  loss_cls_b22: 6.194  loss_cls_b3: 6.144  loss_cls_b31: 6.195  loss_cls_b32: 6.231  loss_cls_b33: 6.242  loss_triplet_b1: 1.547  loss_triplet_b2: 1.553  loss_triplet_b3: 1.596  loss_triplet_b22: 1.812  loss_triplet_b33: 1.976  time: 0.4785  data_time: 0.0009  lr: 1.40e-04  max_mem: 252M
[12/27 00:40:13] fastreid.utils.events INFO:  eta: 0:06:16  epoch/iter: 27/699  total_loss: 58.13  loss_cls_b1: 6.197  loss_cls_b2: 6.137  loss_cls_b21: 6.19  loss_cls_b22: 6.207  loss_cls_b3: 6.139  loss_cls_b31: 6.19  loss_cls_b32: 6.25  loss_cls_b33: 6.229  loss_triplet_b1: 1.557  loss_triplet_b2: 1.561  loss_triplet_b3: 1.601  loss_triplet_b22: 1.809  loss_triplet_b33: 1.983  time: 0.4772  data_time: 0.0016  lr: 1.44e-04  max_mem: 252M
[12/27 00:40:24] fastreid.utils.events INFO:  eta: 0:06:01  epoch/iter: 28/724  total_loss: 58.13  loss_cls_b1: 6.197  loss_cls_b2: 6.139  loss_cls_b21: 6.183  loss_cls_b22: 6.194  loss_cls_b3: 6.147  loss_cls_b31: 6.195  loss_cls_b32: 6.254  loss_cls_b33: 6.24  loss_triplet_b1: 1.564  loss_triplet_b2: 1.572  loss_triplet_b3: 1.601  loss_triplet_b22: 1.809  loss_triplet_b33: 1.992  time: 0.4756  data_time: 0.0019  lr: 1.48e-04  max_mem: 252M
[12/27 00:40:35] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:40:35] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 353        | 1           |
| gallery  | 297     | 1641       | 1           |[0m
[12/27 00:40:35] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[12/27 00:40:40] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.3021 s / batch. ETA=0:00:01
[12/27 00:40:41] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:03.089406 (0.280855 s / batch per device, on 1 devices)
[12/27 00:40:41] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.277385 s / batch per device, on 1 devices)
[12/27 00:40:42] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[12/27 00:40:42] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 76.92    | 88.03    | 90.31     | 50.37 | 9.30   | 63.65    |[0m
[12/27 00:40:42] fastreid.utils.events INFO:  eta: 0:05:47  epoch/iter: 29/749  total_loss: 57.93  loss_cls_b1: 6.198  loss_cls_b2: 6.137  loss_cls_b21: 6.185  loss_cls_b22: 6.196  loss_cls_b3: 6.156  loss_cls_b31: 6.194  loss_cls_b32: 6.225  loss_cls_b33: 6.232  loss_triplet_b1: 1.54  loss_triplet_b2: 1.539  loss_triplet_b3: 1.576  loss_triplet_b22: 1.779  loss_triplet_b33: 1.963  time: 0.4744  data_time: 0.0012  lr: 1.52e-04  max_mem: 252M
[12/27 00:40:53] fastreid.utils.events INFO:  eta: 0:05:34  epoch/iter: 30/774  total_loss: 58.06  loss_cls_b1: 6.206  loss_cls_b2: 6.136  loss_cls_b21: 6.185  loss_cls_b22: 6.19  loss_cls_b3: 6.144  loss_cls_b31: 6.183  loss_cls_b32: 6.236  loss_cls_b33: 6.228  loss_triplet_b1: 1.556  loss_triplet_b2: 1.566  loss_triplet_b3: 1.593  loss_triplet_b22: 1.802  loss_triplet_b33: 1.99  time: 0.4733  data_time: 0.0015  lr: 1.56e-04  max_mem: 252M
[12/27 00:41:05] fastreid.utils.events INFO:  eta: 0:05:22  epoch/iter: 31/799  total_loss: 58.26  loss_cls_b1: 6.207  loss_cls_b2: 6.136  loss_cls_b21: 6.202  loss_cls_b22: 6.191  loss_cls_b3: 6.152  loss_cls_b31: 6.178  loss_cls_b32: 6.26  loss_cls_b33: 6.228  loss_triplet_b1: 1.577  loss_triplet_b2: 1.572  loss_triplet_b3: 1.608  loss_triplet_b22: 1.807  loss_triplet_b33: 2.022  time: 0.4724  data_time: 0.0011  lr: 1.60e-04  max_mem: 252M
[12/27 00:41:05] fastreid.utils.events INFO:  eta: 0:05:22  epoch/iter: 31/799  total_loss: 58.26  loss_cls_b1: 6.207  loss_cls_b2: 6.136  loss_cls_b21: 6.202  loss_cls_b22: 6.191  loss_cls_b3: 6.152  loss_cls_b31: 6.178  loss_cls_b32: 6.26  loss_cls_b33: 6.228  loss_triplet_b1: 1.577  loss_triplet_b2: 1.572  loss_triplet_b3: 1.608  loss_triplet_b22: 1.807  loss_triplet_b33: 2.022  time: 0.4724  data_time: 0.0011  lr: 1.60e-04  max_mem: 252M
[12/27 00:41:16] fastreid.utils.events INFO:  eta: 0:05:08  epoch/iter: 32/824  total_loss: 58.14  loss_cls_b1: 6.207  loss_cls_b2: 6.137  loss_cls_b21: 6.196  loss_cls_b22: 6.199  loss_cls_b3: 6.154  loss_cls_b31: 6.175  loss_cls_b32: 6.249  loss_cls_b33: 6.228  loss_triplet_b1: 1.568  loss_triplet_b2: 1.575  loss_triplet_b3: 1.609  loss_triplet_b22: 1.806  loss_triplet_b33: 1.99  time: 0.4713  data_time: 0.0010  lr: 1.64e-04  max_mem: 252M
[12/27 00:41:27] fastreid.utils.events INFO:  eta: 0:04:56  epoch/iter: 33/849  total_loss: 58.18  loss_cls_b1: 6.221  loss_cls_b2: 6.138  loss_cls_b21: 6.188  loss_cls_b22: 6.198  loss_cls_b3: 6.151  loss_cls_b31: 6.169  loss_cls_b32: 6.26  loss_cls_b33: 6.235  loss_triplet_b1: 1.556  loss_triplet_b2: 1.579  loss_triplet_b3: 1.599  loss_triplet_b22: 1.807  loss_triplet_b33: 1.995  time: 0.4704  data_time: 0.0010  lr: 1.68e-04  max_mem: 252M
[12/27 00:41:38] fastreid.utils.events INFO:  eta: 0:04:44  epoch/iter: 34/874  total_loss: 58.2  loss_cls_b1: 6.231  loss_cls_b2: 6.144  loss_cls_b21: 6.189  loss_cls_b22: 6.2  loss_cls_b3: 6.146  loss_cls_b31: 6.186  loss_cls_b32: 6.258  loss_cls_b33: 6.243  loss_triplet_b1: 1.579  loss_triplet_b2: 1.579  loss_triplet_b3: 1.593  loss_triplet_b22: 1.808  loss_triplet_b33: 2.001  time: 0.4697  data_time: 0.0005  lr: 1.72e-04  max_mem: 252M
[12/27 00:41:49] fastreid.utils.events INFO:  eta: 0:04:32  epoch/iter: 35/899  total_loss: 58  loss_cls_b1: 6.228  loss_cls_b2: 6.166  loss_cls_b21: 6.182  loss_cls_b22: 6.198  loss_cls_b3: 6.147  loss_cls_b31: 6.195  loss_cls_b32: 6.253  loss_cls_b33: 6.246  loss_triplet_b1: 1.547  loss_triplet_b2: 1.547  loss_triplet_b3: 1.579  loss_triplet_b22: 1.786  loss_triplet_b33: 1.952  time: 0.4686  data_time: 0.0014  lr: 1.76e-04  max_mem: 252M
[12/27 00:41:59] fastreid.utils.events INFO:  eta: 0:04:20  epoch/iter: 36/924  total_loss: 58.03  loss_cls_b1: 6.228  loss_cls_b2: 6.156  loss_cls_b21: 6.171  loss_cls_b22: 6.202  loss_cls_b3: 6.147  loss_cls_b31: 6.184  loss_cls_b32: 6.255  loss_cls_b33: 6.245  loss_triplet_b1: 1.547  loss_triplet_b2: 1.544  loss_triplet_b3: 1.579  loss_triplet_b22: 1.797  loss_triplet_b33: 1.96  time: 0.4667  data_time: 0.0008  lr: 1.80e-04  max_mem: 252M
[12/27 00:42:10] fastreid.utils.events INFO:  eta: 0:04:08  epoch/iter: 37/949  total_loss: 58.16  loss_cls_b1: 6.232  loss_cls_b2: 6.151  loss_cls_b21: 6.157  loss_cls_b22: 6.205  loss_cls_b3: 6.145  loss_cls_b31: 6.191  loss_cls_b32: 6.262  loss_cls_b33: 6.244  loss_triplet_b1: 1.566  loss_triplet_b2: 1.565  loss_triplet_b3: 1.609  loss_triplet_b22: 1.821  loss_triplet_b33: 1.969  time: 0.4659  data_time: 0.0014  lr: 1.84e-04  max_mem: 252M
[12/27 00:42:22] fastreid.utils.events INFO:  eta: 0:03:57  epoch/iter: 38/974  total_loss: 58.04  loss_cls_b1: 6.22  loss_cls_b2: 6.153  loss_cls_b21: 6.163  loss_cls_b22: 6.212  loss_cls_b3: 6.172  loss_cls_b31: 6.19  loss_cls_b32: 6.26  loss_cls_b33: 6.259  loss_triplet_b1: 1.554  loss_triplet_b2: 1.547  loss_triplet_b3: 1.59  loss_triplet_b22: 1.798  loss_triplet_b33: 1.943  time: 0.4657  data_time: 0.0009  lr: 1.88e-04  max_mem: 252M
[12/27 00:42:33] fastreid.utils.events INFO:  eta: 0:03:45  epoch/iter: 39/999  total_loss: 57.98  loss_cls_b1: 6.22  loss_cls_b2: 6.157  loss_cls_b21: 6.152  loss_cls_b22: 6.205  loss_cls_b3: 6.149  loss_cls_b31: 6.19  loss_cls_b32: 6.255  loss_cls_b33: 6.248  loss_triplet_b1: 1.524  loss_triplet_b2: 1.534  loss_triplet_b3: 1.575  loss_triplet_b22: 1.777  loss_triplet_b33: 1.92  time: 0.4650  data_time: 0.0006  lr: 1.92e-04  max_mem: 252M
[12/27 00:42:33] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:42:33] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 353        | 1           |
| gallery  | 297     | 1641       | 1           |[0m
[12/27 00:42:33] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[12/27 00:42:38] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2867 s / batch. ETA=0:00:01
[12/27 00:42:39] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.976636 (0.270603 s / batch per device, on 1 devices)
[12/27 00:42:39] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.268964 s / batch per device, on 1 devices)
[12/27 00:42:40] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[12/27 00:42:40] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 78.92    | 89.74    | 91.17     | 51.07 | 9.51   | 65.00    |[0m
[12/27 00:42:40] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_0039.pth
[12/27 00:42:43] fastreid.utils.events INFO:  eta: 0:03:45  epoch/iter: 39/999  total_loss: 57.98  loss_cls_b1: 6.22  loss_cls_b2: 6.157  loss_cls_b21: 6.152  loss_cls_b22: 6.205  loss_cls_b3: 6.149  loss_cls_b31: 6.19  loss_cls_b32: 6.255  loss_cls_b33: 6.248  loss_triplet_b1: 1.524  loss_triplet_b2: 1.534  loss_triplet_b3: 1.575  loss_triplet_b22: 1.777  loss_triplet_b33: 1.92  time: 0.4650  data_time: 0.0006  lr: 1.92e-04  max_mem: 252M
[12/27 00:42:43] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[12/27 00:42:55] fastreid.utils.events INFO:  eta: 0:03:33  epoch/iter: 40/1024  total_loss: 57.79  loss_cls_b1: 6.206  loss_cls_b2: 6.142  loss_cls_b21: 6.143  loss_cls_b22: 6.18  loss_cls_b3: 6.133  loss_cls_b31: 6.173  loss_cls_b32: 6.237  loss_cls_b33: 6.232  loss_triplet_b1: 1.479  loss_triplet_b2: 1.5  loss_triplet_b3: 1.539  loss_triplet_b22: 1.728  loss_triplet_b33: 1.863  time: 0.4654  data_time: 0.0012  lr: 1.95e-04  max_mem: 252M
[12/27 00:43:07] fastreid.utils.events INFO:  eta: 0:03:21  epoch/iter: 41/1049  total_loss: 57.42  loss_cls_b1: 6.168  loss_cls_b2: 6.115  loss_cls_b21: 6.114  loss_cls_b22: 6.151  loss_cls_b3: 6.119  loss_cls_b31: 6.144  loss_cls_b32: 6.213  loss_cls_b33: 6.191  loss_triplet_b1: 1.433  loss_triplet_b2: 1.454  loss_triplet_b3: 1.483  loss_triplet_b22: 1.653  loss_triplet_b33: 1.819  time: 0.4652  data_time: 0.0022  lr: 1.99e-04  max_mem: 252M
[12/27 00:43:17] fastreid.utils.events INFO:  eta: 0:03:08  epoch/iter: 42/1074  total_loss: 56.66  loss_cls_b1: 6.131  loss_cls_b2: 6.062  loss_cls_b21: 6.042  loss_cls_b22: 6.093  loss_cls_b3: 6.072  loss_cls_b31: 6.084  loss_cls_b32: 6.159  loss_cls_b33: 6.14  loss_triplet_b1: 1.322  loss_triplet_b2: 1.335  loss_triplet_b3: 1.345  loss_triplet_b22: 1.563  loss_triplet_b33: 1.646  time: 0.4638  data_time: 0.0020  lr: 2.03e-04  max_mem: 252M
[12/27 00:43:28] fastreid.utils.events INFO:  eta: 0:02:57  epoch/iter: 43/1099  total_loss: 55.8  loss_cls_b1: 6.026  loss_cls_b2: 5.996  loss_cls_b21: 5.961  loss_cls_b22: 5.984  loss_cls_b3: 5.973  loss_cls_b31: 5.971  loss_cls_b32: 6.036  loss_cls_b33: 6.056  loss_triplet_b1: 1.173  loss_triplet_b2: 1.221  loss_triplet_b3: 1.209  loss_triplet_b22: 1.313  loss_triplet_b33: 1.427  time: 0.4628  data_time: 0.0016  lr: 2.07e-04  max_mem: 252M
[12/27 00:43:39] fastreid.utils.events INFO:  eta: 0:02:45  epoch/iter: 44/1124  total_loss: 48.1  loss_cls_b1: 5.345  loss_cls_b2: 5.429  loss_cls_b21: 5.387  loss_cls_b22: 5.546  loss_cls_b3: 5.531  loss_cls_b31: 5.498  loss_cls_b32: 5.637  loss_cls_b33: 5.512  loss_triplet_b1: 0.9142  loss_triplet_b2: 0.8233  loss_triplet_b3: 0.8476  loss_triplet_b22: 0.9236  loss_triplet_b33: 0.9757  time: 0.4626  data_time: 0.0006  lr: 2.11e-04  max_mem: 252M
[12/27 00:43:50] fastreid.utils.events INFO:  eta: 0:02:34  epoch/iter: 45/1149  total_loss: 39.75  loss_cls_b1: 4.243  loss_cls_b2: 4.548  loss_cls_b21: 4.453  loss_cls_b22: 4.51  loss_cls_b3: 4.623  loss_cls_b31: 4.644  loss_cls_b32: 4.553  loss_cls_b33: 4.75  loss_triplet_b1: 0.6274  loss_triplet_b2: 0.5949  loss_triplet_b3: 0.6105  loss_triplet_b22: 0.672  loss_triplet_b33: 0.6768  time: 0.4619  data_time: 0.0023  lr: 2.15e-04  max_mem: 252M
[12/27 00:44:02] fastreid.utils.events INFO:  eta: 0:02:22  epoch/iter: 46/1174  total_loss: 31.72  loss_cls_b1: 3.436  loss_cls_b2: 3.725  loss_cls_b21: 3.602  loss_cls_b22: 3.715  loss_cls_b3: 3.698  loss_cls_b31: 3.704  loss_cls_b32: 3.809  loss_cls_b33: 4.007  loss_triplet_b1: 0.4574  loss_triplet_b2: 0.4571  loss_triplet_b3: 0.4304  loss_triplet_b22: 0.4658  loss_triplet_b33: 0.5012  time: 0.4617  data_time: 0.0007  lr: 2.19e-04  max_mem: 252M
[12/27 00:44:13] fastreid.utils.events INFO:  eta: 0:02:11  epoch/iter: 47/1199  total_loss: 26.18  loss_cls_b1: 2.761  loss_cls_b2: 3.039  loss_cls_b21: 3.044  loss_cls_b22: 3.143  loss_cls_b3: 3.102  loss_cls_b31: 3.115  loss_cls_b32: 3.062  loss_cls_b33: 3.344  loss_triplet_b1: 0.3244  loss_triplet_b2: 0.3289  loss_triplet_b3: 0.3301  loss_triplet_b22: 0.3215  loss_triplet_b33: 0.3585  time: 0.4613  data_time: 0.0010  lr: 2.23e-04  max_mem: 252M
[12/27 00:44:13] fastreid.utils.events INFO:  eta: 0:02:11  epoch/iter: 47/1199  total_loss: 26.18  loss_cls_b1: 2.761  loss_cls_b2: 3.039  loss_cls_b21: 3.044  loss_cls_b22: 3.143  loss_cls_b3: 3.102  loss_cls_b31: 3.115  loss_cls_b32: 3.062  loss_cls_b33: 3.344  loss_triplet_b1: 0.3244  loss_triplet_b2: 0.3289  loss_triplet_b3: 0.3301  loss_triplet_b22: 0.3215  loss_triplet_b33: 0.3585  time: 0.4613  data_time: 0.0010  lr: 2.23e-04  max_mem: 252M
[12/27 00:44:24] fastreid.utils.events INFO:  eta: 0:02:00  epoch/iter: 48/1224  total_loss: 22.31  loss_cls_b1: 2.251  loss_cls_b2: 2.57  loss_cls_b21: 2.501  loss_cls_b22: 2.685  loss_cls_b3: 2.68  loss_cls_b31: 2.695  loss_cls_b32: 2.683  loss_cls_b33: 2.948  loss_triplet_b1: 0.2485  loss_triplet_b2: 0.2491  loss_triplet_b3: 0.2629  loss_triplet_b22: 0.2679  loss_triplet_b33: 0.2562  time: 0.4610  data_time: 0.0012  lr: 2.27e-04  max_mem: 252M
[12/27 00:44:35] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:44:35] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 353        | 1           |
| gallery  | 297     | 1641       | 1           |[0m
[12/27 00:44:35] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[12/27 00:44:40] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2951 s / batch. ETA=0:00:01
[12/27 00:44:42] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:03.065136 (0.278649 s / batch per device, on 1 devices)
[12/27 00:44:42] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.276933 s / batch per device, on 1 devices)
[12/27 00:44:42] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[12/27 00:44:42] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 93.16    | 96.87    | 98.86     | 85.30 | 63.25  | 89.23    |[0m
[12/27 00:44:42] fastreid.utils.events INFO:  eta: 0:01:49  epoch/iter: 49/1249  total_loss: 19.08  loss_cls_b1: 1.923  loss_cls_b2: 2.111  loss_cls_b21: 2.117  loss_cls_b22: 2.292  loss_cls_b3: 2.227  loss_cls_b31: 2.213  loss_cls_b32: 2.213  loss_cls_b33: 2.574  loss_triplet_b1: 0.2029  loss_triplet_b2: 0.1941  loss_triplet_b3: 0.221  loss_triplet_b22: 0.2011  loss_triplet_b33: 0.2078  time: 0.4605  data_time: 0.0021  lr: 2.31e-04  max_mem: 252M
[12/27 00:44:53] fastreid.utils.events INFO:  eta: 0:01:37  epoch/iter: 50/1274  total_loss: 16.4  loss_cls_b1: 1.752  loss_cls_b2: 1.888  loss_cls_b21: 1.848  loss_cls_b22: 2.062  loss_cls_b3: 1.899  loss_cls_b31: 1.945  loss_cls_b32: 2.048  loss_cls_b33: 2.27  loss_triplet_b1: 0.1658  loss_triplet_b2: 0.1653  loss_triplet_b3: 0.1834  loss_triplet_b22: 0.1678  loss_triplet_b33: 0.171  time: 0.4598  data_time: 0.0008  lr: 2.35e-04  max_mem: 252M
[12/27 00:45:04] fastreid.utils.events INFO:  eta: 0:01:26  epoch/iter: 51/1299  total_loss: 15.42  loss_cls_b1: 1.563  loss_cls_b2: 1.779  loss_cls_b21: 1.737  loss_cls_b22: 1.943  loss_cls_b3: 1.752  loss_cls_b31: 1.835  loss_cls_b32: 1.946  loss_cls_b33: 2.162  loss_triplet_b1: 0.1391  loss_triplet_b2: 0.1398  loss_triplet_b3: 0.1531  loss_triplet_b22: 0.1262  loss_triplet_b33: 0.1426  time: 0.4595  data_time: 0.0016  lr: 2.39e-04  max_mem: 252M
[12/27 00:45:15] fastreid.utils.events INFO:  eta: 0:01:15  epoch/iter: 52/1324  total_loss: 13.7  loss_cls_b1: 1.374  loss_cls_b2: 1.48  loss_cls_b21: 1.567  loss_cls_b22: 1.715  loss_cls_b3: 1.553  loss_cls_b31: 1.683  loss_cls_b32: 1.726  loss_cls_b33: 1.945  loss_triplet_b1: 0.09992  loss_triplet_b2: 0.1128  loss_triplet_b3: 0.1186  loss_triplet_b22: 0.1027  loss_triplet_b33: 0.09208  time: 0.4591  data_time: 0.0017  lr: 2.43e-04  max_mem: 252M
[12/27 00:45:27] fastreid.utils.events INFO:  eta: 0:01:04  epoch/iter: 53/1349  total_loss: 12.52  loss_cls_b1: 1.222  loss_cls_b2: 1.351  loss_cls_b21: 1.44  loss_cls_b22: 1.513  loss_cls_b3: 1.41  loss_cls_b31: 1.532  loss_cls_b32: 1.598  loss_cls_b33: 1.788  loss_triplet_b1: 0.07323  loss_triplet_b2: 0.07954  loss_triplet_b3: 0.08285  loss_triplet_b22: 0.06844  loss_triplet_b33: 0.06261  time: 0.4592  data_time: 0.0008  lr: 2.47e-04  max_mem: 252M
[12/27 00:45:39] fastreid.utils.events INFO:  eta: 0:00:54  epoch/iter: 54/1374  total_loss: 11.95  loss_cls_b1: 1.183  loss_cls_b2: 1.282  loss_cls_b21: 1.355  loss_cls_b22: 1.46  loss_cls_b3: 1.316  loss_cls_b31: 1.492  loss_cls_b32: 1.535  loss_cls_b33: 1.754  loss_triplet_b1: 0.06524  loss_triplet_b2: 0.07011  loss_triplet_b3: 0.0734  loss_triplet_b22: 0.05997  loss_triplet_b33: 0.06048  time: 0.4593  data_time: 0.0010  lr: 2.51e-04  max_mem: 252M
[12/27 00:45:50] fastreid.utils.events INFO:  eta: 0:00:43  epoch/iter: 55/1399  total_loss: 10.82  loss_cls_b1: 1.063  loss_cls_b2: 1.17  loss_cls_b21: 1.249  loss_cls_b22: 1.395  loss_cls_b3: 1.213  loss_cls_b31: 1.36  loss_cls_b32: 1.366  loss_cls_b33: 1.605  loss_triplet_b1: 0.05767  loss_triplet_b2: 0.05908  loss_triplet_b3: 0.06636  loss_triplet_b22: 0.04559  loss_triplet_b33: 0.04673  time: 0.4593  data_time: 0.0007  lr: 2.55e-04  max_mem: 252M
[12/27 00:45:50] fastreid.utils.events INFO:  eta: 0:00:43  epoch/iter: 55/1399  total_loss: 10.82  loss_cls_b1: 1.063  loss_cls_b2: 1.17  loss_cls_b21: 1.249  loss_cls_b22: 1.395  loss_cls_b3: 1.213  loss_cls_b31: 1.36  loss_cls_b32: 1.366  loss_cls_b33: 1.605  loss_triplet_b1: 0.05767  loss_triplet_b2: 0.05908  loss_triplet_b3: 0.06636  loss_triplet_b22: 0.04559  loss_triplet_b33: 0.04673  time: 0.4593  data_time: 0.0007  lr: 2.55e-04  max_mem: 252M
[12/27 00:46:02] fastreid.utils.events INFO:  eta: 0:00:32  epoch/iter: 56/1424  total_loss: 10.04  loss_cls_b1: 0.9348  loss_cls_b2: 1.105  loss_cls_b21: 1.112  loss_cls_b22: 1.244  loss_cls_b3: 1.099  loss_cls_b31: 1.225  loss_cls_b32: 1.282  loss_cls_b33: 1.494  loss_triplet_b1: 0.04903  loss_triplet_b2: 0.05092  loss_triplet_b3: 0.05598  loss_triplet_b22: 0.04131  loss_triplet_b33: 0.03787  time: 0.4595  data_time: 0.0014  lr: 2.58e-04  max_mem: 252M
[12/27 00:46:12] fastreid.utils.events INFO:  eta: 0:00:21  epoch/iter: 57/1449  total_loss: 9.214  loss_cls_b1: 0.8787  loss_cls_b2: 0.9965  loss_cls_b21: 1.051  loss_cls_b22: 1.179  loss_cls_b3: 1.03  loss_cls_b31: 1.159  loss_cls_b32: 1.206  loss_cls_b33: 1.437  loss_triplet_b1: 0.04411  loss_triplet_b2: 0.04793  loss_triplet_b3: 0.05138  loss_triplet_b22: 0.03721  loss_triplet_b33: 0.03423  time: 0.4585  data_time: 0.0017  lr: 2.62e-04  max_mem: 252M
[12/27 00:46:23] fastreid.utils.events INFO:  eta: 0:00:10  epoch/iter: 58/1474  total_loss: 8.546  loss_cls_b1: 0.7821  loss_cls_b2: 0.8972  loss_cls_b21: 0.9375  loss_cls_b22: 1.103  loss_cls_b3: 0.9362  loss_cls_b31: 1.068  loss_cls_b32: 1.125  loss_cls_b33: 1.329  loss_triplet_b1: 0.03258  loss_triplet_b2: 0.03713  loss_triplet_b3: 0.03878  loss_triplet_b22: 0.02689  loss_triplet_b33: 0.02456  time: 0.4576  data_time: 0.0005  lr: 2.66e-04  max_mem: 252M
[12/27 00:46:33] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/1499  total_loss: 7.846  loss_cls_b1: 0.7067  loss_cls_b2: 0.8199  loss_cls_b21: 0.8748  loss_cls_b22: 1.007  loss_cls_b3: 0.8375  loss_cls_b31: 0.993  loss_cls_b32: 1.017  loss_cls_b33: 1.193  loss_triplet_b1: 0.02722  loss_triplet_b2: 0.03119  loss_triplet_b3: 0.02932  loss_triplet_b22: 0.02321  loss_triplet_b33: 0.01647  time: 0.4566  data_time: 0.0018  lr: 2.70e-04  max_mem: 252M
[12/27 00:46:33] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:46:33] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 353        | 1           |
| gallery  | 297     | 1641       | 1           |[0m
[12/27 00:46:33] fastreid.evaluation.evaluator INFO: Start inference on 1994 images
[12/27 00:46:38] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.2721 s / batch. ETA=0:00:01
[12/27 00:46:39] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:02.816664 (0.256060 s / batch per device, on 1 devices)
[12/27 00:46:39] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:02 (0.254103 s / batch per device, on 1 devices)
[12/27 00:46:40] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[12/27 00:46:40] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 94.87    | 98.01    | 98.58     | 90.15 | 71.45  | 92.51    |[0m
[12/27 00:46:40] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_best.pth
[12/27 00:46:48] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_final.pth
[12/27 00:46:56] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/1499  total_loss: 7.846  loss_cls_b1: 0.7067  loss_cls_b2: 0.8199  loss_cls_b21: 0.8748  loss_cls_b22: 1.007  loss_cls_b3: 0.8375  loss_cls_b31: 0.993  loss_cls_b32: 1.017  loss_cls_b33: 1.193  loss_triplet_b1: 0.02722  loss_triplet_b2: 0.03119  loss_triplet_b3: 0.02932  loss_triplet_b22: 0.02321  loss_triplet_b33: 0.01647  time: 0.4566  data_time: 0.0018  lr: 2.70e-04  max_mem: 252M
[12/27 00:46:56] fastreid.engine.hooks INFO: Overall training speed: 1498 iterations in 0:11:24 (0.4567 s / it)
[12/27 00:46:56] fastreid.engine.hooks INFO: Total training time: 0:12:44 (0:01:20 on hooks)
[07/09 11:27:11] fastreid INFO: Rank of current process: 0. World size: 1
[07/09 11:27:11] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                   1.24.3
fastreid                1.3 @/home/zhourui/hyf_lpl_multicamera/codes/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA GeForce GTX 1080 Ti
CUDA_HOME               :/usr/local/cuda-10.2
Pillow                  10.3.0
torchvision             0.12.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision
torchvision arch flags  /opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
----------------------  ----------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/09 11:27:11] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50154', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/09 11:27:11] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[07/09 11:27:11] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/09 11:27:11] fastreid INFO: Full config saved to /home/zhourui/hyf_lpl_multicamera/codes/logs/wildsplit7/mgn_R50-ibn/config.yaml
[07/09 11:27:11] fastreid.utils.env INFO: Using a generated random seed 13918349
[07/09 11:27:11] fastreid.engine.defaults INFO: Prepare training set
[07/09 11:27:11] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 350     | 1633       | 1           |[0m
[07/09 11:27:11] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[07/09 11:27:14] fastreid.engine.defaults INFO: Auto-scaling the num_classes=350
[07/09 11:27:14] fastreid.modeling.backbones.resnet INFO: Pretrain model don't exist, downloading from https://github.com/XingangPan/IBN-Net/releases/download/v1.0/resnet50_ibn_a-d9d0bb7b.pth
[07/09 11:29:59] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /home/zhourui/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[07/09 11:29:59] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[07/09 11:30:01] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=350, scale=64, margin=0.35)
  )
)
[07/09 11:30:06] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[07/09 11:30:06] fastreid.engine.train_loop INFO: Starting training from epoch 0
[07/09 11:30:06] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[07/09 11:30:33] fastreid.utils.events INFO:  eta: 0:22:02  epoch/iter: 0/24  total_loss: 56.58  loss_cls_b1: 6.163  loss_cls_b2: 6.091  loss_cls_b21: 6.238  loss_cls_b22: 6.167  loss_cls_b3: 6.255  loss_cls_b31: 6.23  loss_cls_b32: 6.256  loss_cls_b33: 6.145  loss_triplet_b1: 1.34  loss_triplet_b2: 1.3  loss_triplet_b3: 1.317  loss_triplet_b22: 1.55  loss_triplet_b33: 1.709  time: 0.9210  data_time: 0.0010  lr: 3.81e-05  max_mem: 72M
[07/09 11:30:55] fastreid.utils.events INFO:  eta: 0:21:41  epoch/iter: 1/49  total_loss: 57.02  loss_cls_b1: 6.163  loss_cls_b2: 6.166  loss_cls_b21: 6.276  loss_cls_b22: 6.246  loss_cls_b3: 6.213  loss_cls_b31: 6.257  loss_cls_b32: 6.255  loss_cls_b33: 6.155  loss_triplet_b1: 1.411  loss_triplet_b2: 1.373  loss_triplet_b3: 1.365  loss_triplet_b22: 1.588  loss_triplet_b33: 1.797  time: 0.9097  data_time: 0.0009  lr: 4.19e-05  max_mem: 72M
[07/09 11:31:18] fastreid.utils.events INFO:  eta: 0:21:21  epoch/iter: 2/74  total_loss: 56.96  loss_cls_b1: 6.204  loss_cls_b2: 6.132  loss_cls_b21: 6.257  loss_cls_b22: 6.263  loss_cls_b3: 6.213  loss_cls_b31: 6.23  loss_cls_b32: 6.294  loss_cls_b33: 6.162  loss_triplet_b1: 1.413  loss_triplet_b2: 1.359  loss_triplet_b3: 1.376  loss_triplet_b22: 1.602  loss_triplet_b33: 1.798  time: 0.9077  data_time: 0.0012  lr: 4.59e-05  max_mem: 72M
[07/09 11:31:22] fastreid.engine.hooks INFO: Overall training speed: 77 iterations in 0:01:10 (0.9097 s / it)
[07/09 11:31:22] fastreid.engine.hooks INFO: Total training time: 0:01:10 (0:00:00 on hooks)
[07/09 11:33:09] fastreid INFO: Rank of current process: 0. World size: 1
[07/09 11:33:09] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                   1.24.3
fastreid                1.3 @/home/zhourui/hyf_lpl_multicamera/codes/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA GeForce GTX 1080 Ti
CUDA_HOME               :/usr/local/cuda-10.2
Pillow                  10.3.0
torchvision             0.12.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision
torchvision arch flags  /opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
----------------------  ----------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/09 11:33:09] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50154', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/09 11:33:09] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[07/09 11:33:09] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/09 11:33:09] fastreid INFO: Full config saved to /home/zhourui/hyf_lpl_multicamera/codes/logs/wildsplit7/mgn_R50-ibn/config.yaml
[07/09 11:33:09] fastreid.utils.env INFO: Using a generated random seed 11604818
[07/09 11:33:09] fastreid.engine.defaults INFO: Prepare training set
[07/09 11:33:09] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 1633       | 1           |[0m
[07/09 11:33:09] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[07/09 11:33:11] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[07/09 11:33:12] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /home/zhourui/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[07/09 11:33:12] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[07/09 11:33:14] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[07/09 11:33:20] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[07/09 11:33:20] fastreid.engine.train_loop INFO: Starting training from epoch 0
[07/09 11:33:20] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[07/09 11:33:47] fastreid.utils.events INFO:  eta: 0:22:03  epoch/iter: 0/24  total_loss: 57.26  loss_cls_b1: 6.181  loss_cls_b2: 6.237  loss_cls_b21: 6.261  loss_cls_b22: 6.192  loss_cls_b3: 6.197  loss_cls_b31: 6.286  loss_cls_b32: 6.411  loss_cls_b33: 6.141  loss_triplet_b1: 1.26  loss_triplet_b2: 1.357  loss_triplet_b3: 1.345  loss_triplet_b22: 1.577  loss_triplet_b33: 1.732  time: 0.9349  data_time: 0.0009  lr: 3.81e-05  max_mem: 72M
[07/09 11:34:09] fastreid.utils.events INFO:  eta: 0:21:42  epoch/iter: 1/49  total_loss: 57.37  loss_cls_b1: 6.233  loss_cls_b2: 6.252  loss_cls_b21: 6.17  loss_cls_b22: 6.19  loss_cls_b3: 6.184  loss_cls_b31: 6.244  loss_cls_b32: 6.412  loss_cls_b33: 6.147  loss_triplet_b1: 1.338  loss_triplet_b2: 1.388  loss_triplet_b3: 1.4  loss_triplet_b22: 1.639  loss_triplet_b33: 1.76  time: 0.9161  data_time: 0.0007  lr: 4.21e-05  max_mem: 72M
[07/09 11:34:32] fastreid.utils.events INFO:  eta: 0:21:25  epoch/iter: 2/74  total_loss: 57.48  loss_cls_b1: 6.231  loss_cls_b2: 6.236  loss_cls_b21: 6.176  loss_cls_b22: 6.19  loss_cls_b3: 6.178  loss_cls_b31: 6.239  loss_cls_b32: 6.393  loss_cls_b33: 6.162  loss_triplet_b1: 1.38  loss_triplet_b2: 1.395  loss_triplet_b3: 1.419  loss_triplet_b22: 1.673  loss_triplet_b33: 1.813  time: 0.9134  data_time: 0.0008  lr: 4.59e-05  max_mem: 72M
[07/09 11:34:55] fastreid.utils.events INFO:  eta: 0:21:06  epoch/iter: 3/99  total_loss: 57.42  loss_cls_b1: 6.232  loss_cls_b2: 6.237  loss_cls_b21: 6.182  loss_cls_b22: 6.22  loss_cls_b3: 6.191  loss_cls_b31: 6.237  loss_cls_b32: 6.373  loss_cls_b33: 6.138  loss_triplet_b1: 1.377  loss_triplet_b2: 1.393  loss_triplet_b3: 1.416  loss_triplet_b22: 1.664  loss_triplet_b33: 1.821  time: 0.9134  data_time: 0.0005  lr: 4.98e-05  max_mem: 72M
[07/09 11:35:18] fastreid.utils.events INFO:  eta: 0:20:46  epoch/iter: 4/124  total_loss: 57.38  loss_cls_b1: 6.233  loss_cls_b2: 6.235  loss_cls_b21: 6.175  loss_cls_b22: 6.221  loss_cls_b3: 6.192  loss_cls_b31: 6.233  loss_cls_b32: 6.363  loss_cls_b33: 6.134  loss_triplet_b1: 1.38  loss_triplet_b2: 1.392  loss_triplet_b3: 1.415  loss_triplet_b22: 1.673  loss_triplet_b33: 1.813  time: 0.9160  data_time: 0.0007  lr: 5.37e-05  max_mem: 72M
[07/09 11:35:41] fastreid.utils.events INFO:  eta: 0:20:28  epoch/iter: 5/149  total_loss: 57.38  loss_cls_b1: 6.232  loss_cls_b2: 6.234  loss_cls_b21: 6.175  loss_cls_b22: 6.219  loss_cls_b3: 6.183  loss_cls_b31: 6.212  loss_cls_b32: 6.373  loss_cls_b33: 6.154  loss_triplet_b1: 1.383  loss_triplet_b2: 1.395  loss_triplet_b3: 1.416  loss_triplet_b22: 1.666  loss_triplet_b33: 1.824  time: 0.9183  data_time: 0.0008  lr: 5.77e-05  max_mem: 72M
[07/09 11:36:05] fastreid.utils.events INFO:  eta: 0:20:07  epoch/iter: 6/174  total_loss: 57.38  loss_cls_b1: 6.233  loss_cls_b2: 6.228  loss_cls_b21: 6.163  loss_cls_b22: 6.22  loss_cls_b3: 6.186  loss_cls_b31: 6.209  loss_cls_b32: 6.368  loss_cls_b33: 6.152  loss_triplet_b1: 1.374  loss_triplet_b2: 1.381  loss_triplet_b3: 1.407  loss_triplet_b22: 1.649  loss_triplet_b33: 1.785  time: 0.9200  data_time: 0.0006  lr: 6.16e-05  max_mem: 72M
[07/09 11:36:28] fastreid.utils.events INFO:  eta: 0:19:47  epoch/iter: 7/199  total_loss: 57.38  loss_cls_b1: 6.232  loss_cls_b2: 6.234  loss_cls_b21: 6.146  loss_cls_b22: 6.215  loss_cls_b3: 6.185  loss_cls_b31: 6.212  loss_cls_b32: 6.364  loss_cls_b33: 6.159  loss_triplet_b1: 1.374  loss_triplet_b2: 1.393  loss_triplet_b3: 1.41  loss_triplet_b22: 1.657  loss_triplet_b33: 1.789  time: 0.9209  data_time: 0.0006  lr: 6.56e-05  max_mem: 72M
[07/09 11:36:28] fastreid.utils.events INFO:  eta: 0:19:47  epoch/iter: 7/199  total_loss: 57.38  loss_cls_b1: 6.232  loss_cls_b2: 6.234  loss_cls_b21: 6.146  loss_cls_b22: 6.215  loss_cls_b3: 6.185  loss_cls_b31: 6.212  loss_cls_b32: 6.364  loss_cls_b33: 6.159  loss_triplet_b1: 1.374  loss_triplet_b2: 1.393  loss_triplet_b3: 1.41  loss_triplet_b22: 1.657  loss_triplet_b33: 1.789  time: 0.9209  data_time: 0.0006  lr: 6.56e-05  max_mem: 72M
[07/09 11:36:51] fastreid.utils.events INFO:  eta: 0:19:27  epoch/iter: 8/224  total_loss: 57.5  loss_cls_b1: 6.238  loss_cls_b2: 6.223  loss_cls_b21: 6.121  loss_cls_b22: 6.219  loss_cls_b3: 6.187  loss_cls_b31: 6.209  loss_cls_b32: 6.352  loss_cls_b33: 6.187  loss_triplet_b1: 1.429  loss_triplet_b2: 1.414  loss_triplet_b3: 1.438  loss_triplet_b22: 1.698  loss_triplet_b33: 1.849  time: 0.9218  data_time: 0.0008  lr: 6.95e-05  max_mem: 72M
[07/09 11:37:14] fastreid.engine.defaults INFO: Prepare testing set
[07/09 11:37:14] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 11:37:14] fastreid.evaluation.reid_evaluation INFO: > compiling reid evaluation cython tool
[07/09 11:37:14] fastreid.engine.hooks INFO: Overall training speed: 248 iterations in 0:03:48 (0.9231 s / it)
[07/09 11:37:14] fastreid.engine.hooks INFO: Total training time: 0:03:49 (0:00:00 on hooks)
[07/09 11:42:59] fastreid INFO: Rank of current process: 0. World size: 1
[07/09 11:42:59] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                   1.24.3
fastreid                1.3 @/home/zhourui/hyf_lpl_multicamera/codes/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA GeForce GTX 1080 Ti
CUDA_HOME               :/usr/local/cuda-10.2
Pillow                  10.3.0
torchvision             0.12.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision
torchvision arch flags  /opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
----------------------  ----------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/09 11:42:59] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit7/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50154', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/09 11:42:59] fastreid INFO: Contents of args.config_file=./configs/WildSplit7/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit7",)
  TESTS: ("WildSplit7",)

OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn

[07/09 11:42:59] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit7',)
  TESTS: ('WildSplit7',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit7/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/09 11:42:59] fastreid INFO: Full config saved to /home/zhourui/hyf_lpl_multicamera/codes/logs/wildsplit7/mgn_R50-ibn/config.yaml
[07/09 11:42:59] fastreid.utils.env INFO: Using a generated random seed 61579465
[07/09 11:42:59] fastreid.engine.defaults INFO: Prepare training set
[07/09 11:42:59] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 1633       | 1           |[0m
[07/09 11:42:59] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[07/09 11:43:01] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[07/09 11:43:02] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /home/zhourui/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[07/09 11:43:02] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[07/09 11:43:04] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[07/09 11:43:08] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[07/09 11:43:08] fastreid.engine.train_loop INFO: Starting training from epoch 0
[07/09 11:43:08] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[07/09 11:43:35] fastreid.utils.events INFO:  eta: 0:22:00  epoch/iter: 0/24  total_loss: 57.81  loss_cls_b1: 6.25  loss_cls_b2: 6.175  loss_cls_b21: 6.227  loss_cls_b22: 6.232  loss_cls_b3: 6.161  loss_cls_b31: 6.308  loss_cls_b32: 6.086  loss_cls_b33: 6.205  loss_triplet_b1: 1.396  loss_triplet_b2: 1.382  loss_triplet_b3: 1.4  loss_triplet_b22: 1.765  loss_triplet_b33: 1.842  time: 0.8981  data_time: 0.0009  lr: 3.81e-05  max_mem: 72M
[07/09 11:43:57] fastreid.utils.events INFO:  eta: 0:21:43  epoch/iter: 1/49  total_loss: 57.87  loss_cls_b1: 6.258  loss_cls_b2: 6.268  loss_cls_b21: 6.202  loss_cls_b22: 6.241  loss_cls_b3: 6.224  loss_cls_b31: 6.307  loss_cls_b32: 6.158  loss_cls_b33: 6.237  loss_triplet_b1: 1.382  loss_triplet_b2: 1.382  loss_triplet_b3: 1.397  loss_triplet_b22: 1.634  loss_triplet_b33: 1.808  time: 0.8987  data_time: 0.0008  lr: 4.21e-05  max_mem: 72M
[07/09 11:44:20] fastreid.utils.events INFO:  eta: 0:21:22  epoch/iter: 2/74  total_loss: 58  loss_cls_b1: 6.25  loss_cls_b2: 6.282  loss_cls_b21: 6.238  loss_cls_b22: 6.252  loss_cls_b3: 6.245  loss_cls_b31: 6.306  loss_cls_b32: 6.146  loss_cls_b33: 6.211  loss_triplet_b1: 1.413  loss_triplet_b2: 1.407  loss_triplet_b3: 1.414  loss_triplet_b22: 1.756  loss_triplet_b33: 1.875  time: 0.8992  data_time: 0.0006  lr: 4.60e-05  max_mem: 72M
[07/09 11:44:42] fastreid.utils.events INFO:  eta: 0:21:02  epoch/iter: 3/99  total_loss: 57.83  loss_cls_b1: 6.253  loss_cls_b2: 6.285  loss_cls_b21: 6.242  loss_cls_b22: 6.242  loss_cls_b3: 6.248  loss_cls_b31: 6.307  loss_cls_b32: 6.147  loss_cls_b33: 6.234  loss_triplet_b1: 1.402  loss_triplet_b2: 1.389  loss_triplet_b3: 1.389  loss_triplet_b22: 1.681  loss_triplet_b33: 1.808  time: 0.9009  data_time: 0.0007  lr: 5.00e-05  max_mem: 72M
[07/09 11:45:06] fastreid.utils.events INFO:  eta: 0:20:42  epoch/iter: 4/124  total_loss: 57.87  loss_cls_b1: 6.256  loss_cls_b2: 6.282  loss_cls_b21: 6.239  loss_cls_b22: 6.236  loss_cls_b3: 6.248  loss_cls_b31: 6.308  loss_cls_b32: 6.137  loss_cls_b33: 6.234  loss_triplet_b1: 1.406  loss_triplet_b2: 1.407  loss_triplet_b3: 1.402  loss_triplet_b22: 1.696  loss_triplet_b33: 1.842  time: 0.9064  data_time: 0.0006  lr: 5.39e-05  max_mem: 72M
[07/09 11:45:29] fastreid.utils.events INFO:  eta: 0:20:21  epoch/iter: 5/149  total_loss: 57.95  loss_cls_b1: 6.247  loss_cls_b2: 6.29  loss_cls_b21: 6.239  loss_cls_b22: 6.234  loss_cls_b3: 6.248  loss_cls_b31: 6.305  loss_cls_b32: 6.146  loss_cls_b33: 6.213  loss_triplet_b1: 1.415  loss_triplet_b2: 1.436  loss_triplet_b3: 1.424  loss_triplet_b22: 1.759  loss_triplet_b33: 1.882  time: 0.9090  data_time: 0.0007  lr: 5.78e-05  max_mem: 72M
[07/09 11:45:52] fastreid.utils.events INFO:  eta: 0:20:00  epoch/iter: 6/174  total_loss: 57.93  loss_cls_b1: 6.259  loss_cls_b2: 6.281  loss_cls_b21: 6.239  loss_cls_b22: 6.234  loss_cls_b3: 6.246  loss_cls_b31: 6.304  loss_cls_b32: 6.149  loss_cls_b33: 6.215  loss_triplet_b1: 1.418  loss_triplet_b2: 1.434  loss_triplet_b3: 1.434  loss_triplet_b22: 1.756  loss_triplet_b33: 1.901  time: 0.9125  data_time: 0.0007  lr: 6.16e-05  max_mem: 72M
[07/09 11:46:15] fastreid.utils.events INFO:  eta: 0:19:40  epoch/iter: 7/199  total_loss: 57.83  loss_cls_b1: 6.27  loss_cls_b2: 6.282  loss_cls_b21: 6.256  loss_cls_b22: 6.232  loss_cls_b3: 6.245  loss_cls_b31: 6.302  loss_cls_b32: 6.146  loss_cls_b33: 6.213  loss_triplet_b1: 1.415  loss_triplet_b2: 1.42  loss_triplet_b3: 1.424  loss_triplet_b22: 1.748  loss_triplet_b33: 1.877  time: 0.9138  data_time: 0.0005  lr: 6.56e-05  max_mem: 72M
[07/09 11:46:15] fastreid.utils.events INFO:  eta: 0:19:40  epoch/iter: 7/199  total_loss: 57.83  loss_cls_b1: 6.27  loss_cls_b2: 6.282  loss_cls_b21: 6.256  loss_cls_b22: 6.232  loss_cls_b3: 6.245  loss_cls_b31: 6.302  loss_cls_b32: 6.146  loss_cls_b33: 6.213  loss_triplet_b1: 1.415  loss_triplet_b2: 1.42  loss_triplet_b3: 1.424  loss_triplet_b22: 1.748  loss_triplet_b33: 1.877  time: 0.9138  data_time: 0.0005  lr: 6.56e-05  max_mem: 72M
[07/09 11:46:38] fastreid.utils.events INFO:  eta: 0:19:19  epoch/iter: 8/224  total_loss: 57.88  loss_cls_b1: 6.27  loss_cls_b2: 6.302  loss_cls_b21: 6.256  loss_cls_b22: 6.23  loss_cls_b3: 6.249  loss_cls_b31: 6.297  loss_cls_b32: 6.151  loss_cls_b33: 6.215  loss_triplet_b1: 1.438  loss_triplet_b2: 1.437  loss_triplet_b3: 1.442  loss_triplet_b22: 1.748  loss_triplet_b33: 1.897  time: 0.9152  data_time: 0.0006  lr: 6.95e-05  max_mem: 72M
[07/09 11:47:02] fastreid.engine.defaults INFO: Prepare testing set
[07/09 11:47:02] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 11:47:02] fastreid.evaluation.evaluator INFO: Start inference on 1997 images
[07/09 11:47:13] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.5868 s / batch. ETA=0:00:02
[07/09 11:47:17] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:07.799647 (0.709059 s / batch per device, on 1 devices)
[07/09 11:47:17] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:07 (0.706046 s / batch per device, on 1 devices)
[07/09 11:47:17] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[07/09 11:47:17] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 84.36    | 91.06    | 93.85     | 56.69 | 10.22  | 70.52    |[0m
[07/09 11:47:17] fastreid.utils.events INFO:  eta: 0:18:58  epoch/iter: 9/249  total_loss: 57.86  loss_cls_b1: 6.283  loss_cls_b2: 6.292  loss_cls_b21: 6.261  loss_cls_b22: 6.23  loss_cls_b3: 6.25  loss_cls_b31: 6.297  loss_cls_b32: 6.147  loss_cls_b33: 6.202  loss_triplet_b1: 1.452  loss_triplet_b2: 1.437  loss_triplet_b3: 1.445  loss_triplet_b22: 1.75  loss_triplet_b33: 1.901  time: 0.9167  data_time: 0.0005  lr: 7.34e-05  max_mem: 252M
[07/09 11:47:41] fastreid.utils.events INFO:  eta: 0:18:38  epoch/iter: 10/274  total_loss: 57.79  loss_cls_b1: 6.276  loss_cls_b2: 6.281  loss_cls_b21: 6.254  loss_cls_b22: 6.233  loss_cls_b3: 6.246  loss_cls_b31: 6.291  loss_cls_b32: 6.148  loss_cls_b33: 6.221  loss_triplet_b1: 1.44  loss_triplet_b2: 1.426  loss_triplet_b3: 1.442  loss_triplet_b22: 1.721  loss_triplet_b33: 1.859  time: 0.9182  data_time: 0.0005  lr: 7.74e-05  max_mem: 252M
[07/09 11:48:04] fastreid.utils.events INFO:  eta: 0:18:17  epoch/iter: 11/299  total_loss: 57.97  loss_cls_b1: 6.283  loss_cls_b2: 6.281  loss_cls_b21: 6.264  loss_cls_b22: 6.233  loss_cls_b3: 6.253  loss_cls_b31: 6.267  loss_cls_b32: 6.152  loss_cls_b33: 6.199  loss_triplet_b1: 1.47  loss_triplet_b2: 1.46  loss_triplet_b3: 1.464  loss_triplet_b22: 1.748  loss_triplet_b33: 1.911  time: 0.9203  data_time: 0.0006  lr: 8.13e-05  max_mem: 252M
[07/09 11:48:28] fastreid.utils.events INFO:  eta: 0:17:56  epoch/iter: 12/324  total_loss: 58.01  loss_cls_b1: 6.289  loss_cls_b2: 6.279  loss_cls_b21: 6.276  loss_cls_b22: 6.232  loss_cls_b3: 6.253  loss_cls_b31: 6.259  loss_cls_b32: 6.146  loss_cls_b33: 6.204  loss_triplet_b1: 1.485  loss_triplet_b2: 1.474  loss_triplet_b3: 1.47  loss_triplet_b22: 1.757  loss_triplet_b33: 1.914  time: 0.9216  data_time: 0.0006  lr: 8.52e-05  max_mem: 252M
[07/09 11:48:51] fastreid.utils.events INFO:  eta: 0:17:36  epoch/iter: 13/349  total_loss: 57.9  loss_cls_b1: 6.289  loss_cls_b2: 6.267  loss_cls_b21: 6.276  loss_cls_b22: 6.232  loss_cls_b3: 6.249  loss_cls_b31: 6.263  loss_cls_b32: 6.135  loss_cls_b33: 6.208  loss_triplet_b1: 1.491  loss_triplet_b2: 1.479  loss_triplet_b3: 1.464  loss_triplet_b22: 1.741  loss_triplet_b33: 1.911  time: 0.9230  data_time: 0.0004  lr: 8.92e-05  max_mem: 252M
[07/09 11:49:15] fastreid.utils.events INFO:  eta: 0:17:15  epoch/iter: 14/374  total_loss: 57.9  loss_cls_b1: 6.285  loss_cls_b2: 6.275  loss_cls_b21: 6.277  loss_cls_b22: 6.232  loss_cls_b3: 6.239  loss_cls_b31: 6.257  loss_cls_b32: 6.125  loss_cls_b33: 6.221  loss_triplet_b1: 1.49  loss_triplet_b2: 1.472  loss_triplet_b3: 1.461  loss_triplet_b22: 1.723  loss_triplet_b33: 1.882  time: 0.9241  data_time: 0.0006  lr: 9.30e-05  max_mem: 252M
[07/09 11:49:38] fastreid.utils.events INFO:  eta: 0:16:53  epoch/iter: 15/399  total_loss: 58.03  loss_cls_b1: 6.285  loss_cls_b2: 6.273  loss_cls_b21: 6.278  loss_cls_b22: 6.243  loss_cls_b3: 6.244  loss_cls_b31: 6.251  loss_cls_b32: 6.117  loss_cls_b33: 6.215  loss_triplet_b1: 1.496  loss_triplet_b2: 1.488  loss_triplet_b3: 1.499  loss_triplet_b22: 1.746  loss_triplet_b33: 1.919  time: 0.9246  data_time: 0.0006  lr: 9.69e-05  max_mem: 252M
[07/09 11:49:38] fastreid.utils.events INFO:  eta: 0:16:53  epoch/iter: 15/399  total_loss: 58.03  loss_cls_b1: 6.285  loss_cls_b2: 6.273  loss_cls_b21: 6.278  loss_cls_b22: 6.243  loss_cls_b3: 6.244  loss_cls_b31: 6.251  loss_cls_b32: 6.117  loss_cls_b33: 6.215  loss_triplet_b1: 1.496  loss_triplet_b2: 1.488  loss_triplet_b3: 1.499  loss_triplet_b22: 1.746  loss_triplet_b33: 1.919  time: 0.9246  data_time: 0.0006  lr: 9.69e-05  max_mem: 252M
[07/09 11:50:01] fastreid.utils.events INFO:  eta: 0:16:30  epoch/iter: 16/424  total_loss: 58.07  loss_cls_b1: 6.292  loss_cls_b2: 6.267  loss_cls_b21: 6.281  loss_cls_b22: 6.246  loss_cls_b3: 6.226  loss_cls_b31: 6.247  loss_cls_b32: 6.115  loss_cls_b33: 6.221  loss_triplet_b1: 1.52  loss_triplet_b2: 1.505  loss_triplet_b3: 1.517  loss_triplet_b22: 1.762  loss_triplet_b33: 1.905  time: 0.9255  data_time: 0.0005  lr: 1.01e-04  max_mem: 252M
[07/09 11:50:25] fastreid.utils.events INFO:  eta: 0:16:08  epoch/iter: 17/449  total_loss: 58.15  loss_cls_b1: 6.282  loss_cls_b2: 6.264  loss_cls_b21: 6.283  loss_cls_b22: 6.248  loss_cls_b3: 6.228  loss_cls_b31: 6.243  loss_cls_b32: 6.117  loss_cls_b33: 6.222  loss_triplet_b1: 1.537  loss_triplet_b2: 1.522  loss_triplet_b3: 1.53  loss_triplet_b22: 1.781  loss_triplet_b33: 1.948  time: 0.9260  data_time: 0.0006  lr: 1.05e-04  max_mem: 252M
[07/09 11:50:48] fastreid.utils.events INFO:  eta: 0:15:46  epoch/iter: 18/474  total_loss: 58.32  loss_cls_b1: 6.285  loss_cls_b2: 6.276  loss_cls_b21: 6.286  loss_cls_b22: 6.232  loss_cls_b3: 6.231  loss_cls_b31: 6.226  loss_cls_b32: 6.125  loss_cls_b33: 6.22  loss_triplet_b1: 1.557  loss_triplet_b2: 1.545  loss_triplet_b3: 1.557  loss_triplet_b22: 1.81  loss_triplet_b33: 1.96  time: 0.9267  data_time: 0.0006  lr: 1.09e-04  max_mem: 252M
[07/09 11:51:12] fastreid.engine.defaults INFO: Prepare testing set
[07/09 11:51:12] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 11:51:12] fastreid.evaluation.evaluator INFO: Start inference on 1997 images
[07/09 11:51:20] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.5481 s / batch. ETA=0:00:02
[07/09 11:51:22] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:05.773950 (0.524905 s / batch per device, on 1 devices)
[07/09 11:51:22] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:05 (0.522801 s / batch per device, on 1 devices)
[07/09 11:51:22] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[07/09 11:51:22] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 80.45    | 87.71    | 92.18     | 50.95 | 9.38   | 65.70    |[0m
[07/09 11:51:22] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_best.pth
[07/09 11:51:23] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_0019.pth
[07/09 11:51:24] fastreid.utils.events INFO:  eta: 0:15:24  epoch/iter: 19/499  total_loss: 58.36  loss_cls_b1: 6.284  loss_cls_b2: 6.277  loss_cls_b21: 6.288  loss_cls_b22: 6.231  loss_cls_b3: 6.224  loss_cls_b31: 6.226  loss_cls_b32: 6.121  loss_cls_b33: 6.221  loss_triplet_b1: 1.563  loss_triplet_b2: 1.541  loss_triplet_b3: 1.559  loss_triplet_b22: 1.81  loss_triplet_b33: 1.985  time: 0.9267  data_time: 0.0005  lr: 1.13e-04  max_mem: 252M
[07/09 11:51:48] fastreid.utils.events INFO:  eta: 0:15:01  epoch/iter: 20/524  total_loss: 58.37  loss_cls_b1: 6.279  loss_cls_b2: 6.272  loss_cls_b21: 6.286  loss_cls_b22: 6.241  loss_cls_b3: 6.224  loss_cls_b31: 6.244  loss_cls_b32: 6.139  loss_cls_b33: 6.213  loss_triplet_b1: 1.57  loss_triplet_b2: 1.544  loss_triplet_b3: 1.565  loss_triplet_b22: 1.81  loss_triplet_b33: 1.972  time: 0.9273  data_time: 0.0007  lr: 1.17e-04  max_mem: 252M
[07/09 11:52:11] fastreid.utils.events INFO:  eta: 0:14:38  epoch/iter: 21/549  total_loss: 58.34  loss_cls_b1: 6.284  loss_cls_b2: 6.272  loss_cls_b21: 6.291  loss_cls_b22: 6.229  loss_cls_b3: 6.226  loss_cls_b31: 6.243  loss_cls_b32: 6.157  loss_cls_b33: 6.214  loss_triplet_b1: 1.57  loss_triplet_b2: 1.538  loss_triplet_b3: 1.562  loss_triplet_b22: 1.81  loss_triplet_b33: 1.968  time: 0.9276  data_time: 0.0008  lr: 1.21e-04  max_mem: 252M
[07/09 11:52:34] fastreid.utils.events INFO:  eta: 0:14:15  epoch/iter: 22/574  total_loss: 58.62  loss_cls_b1: 6.286  loss_cls_b2: 6.275  loss_cls_b21: 6.299  loss_cls_b22: 6.228  loss_cls_b3: 6.23  loss_cls_b31: 6.243  loss_cls_b32: 6.164  loss_cls_b33: 6.202  loss_triplet_b1: 1.597  loss_triplet_b2: 1.559  loss_triplet_b3: 1.581  loss_triplet_b22: 1.835  loss_triplet_b33: 2.004  time: 0.9279  data_time: 0.0007  lr: 1.24e-04  max_mem: 252M
[07/09 11:52:58] fastreid.utils.events INFO:  eta: 0:13:52  epoch/iter: 23/599  total_loss: 58.56  loss_cls_b1: 6.296  loss_cls_b2: 6.258  loss_cls_b21: 6.299  loss_cls_b22: 6.212  loss_cls_b3: 6.238  loss_cls_b31: 6.246  loss_cls_b32: 6.173  loss_cls_b33: 6.203  loss_triplet_b1: 1.59  loss_triplet_b2: 1.568  loss_triplet_b3: 1.565  loss_triplet_b22: 1.829  loss_triplet_b33: 2.004  time: 0.9281  data_time: 0.0005  lr: 1.28e-04  max_mem: 252M
[07/09 11:52:58] fastreid.utils.events INFO:  eta: 0:13:52  epoch/iter: 23/599  total_loss: 58.56  loss_cls_b1: 6.296  loss_cls_b2: 6.258  loss_cls_b21: 6.299  loss_cls_b22: 6.212  loss_cls_b3: 6.238  loss_cls_b31: 6.246  loss_cls_b32: 6.173  loss_cls_b33: 6.203  loss_triplet_b1: 1.59  loss_triplet_b2: 1.568  loss_triplet_b3: 1.565  loss_triplet_b22: 1.829  loss_triplet_b33: 2.004  time: 0.9281  data_time: 0.0005  lr: 1.28e-04  max_mem: 252M
[07/09 11:53:21] fastreid.utils.events INFO:  eta: 0:13:29  epoch/iter: 24/624  total_loss: 58.52  loss_cls_b1: 6.295  loss_cls_b2: 6.247  loss_cls_b21: 6.299  loss_cls_b22: 6.219  loss_cls_b3: 6.241  loss_cls_b31: 6.24  loss_cls_b32: 6.165  loss_cls_b33: 6.185  loss_triplet_b1: 1.58  loss_triplet_b2: 1.549  loss_triplet_b3: 1.556  loss_triplet_b22: 1.821  loss_triplet_b33: 2.012  time: 0.9284  data_time: 0.0006  lr: 1.32e-04  max_mem: 252M
[07/09 11:53:44] fastreid.utils.events INFO:  eta: 0:13:06  epoch/iter: 25/649  total_loss: 58.54  loss_cls_b1: 6.298  loss_cls_b2: 6.248  loss_cls_b21: 6.298  loss_cls_b22: 6.21  loss_cls_b3: 6.232  loss_cls_b31: 6.248  loss_cls_b32: 6.171  loss_cls_b33: 6.184  loss_triplet_b1: 1.609  loss_triplet_b2: 1.573  loss_triplet_b3: 1.561  loss_triplet_b22: 1.816  loss_triplet_b33: 2.012  time: 0.9286  data_time: 0.0006  lr: 1.36e-04  max_mem: 252M
[07/09 11:54:08] fastreid.utils.events INFO:  eta: 0:12:43  epoch/iter: 26/674  total_loss: 58.59  loss_cls_b1: 6.301  loss_cls_b2: 6.253  loss_cls_b21: 6.297  loss_cls_b22: 6.209  loss_cls_b3: 6.239  loss_cls_b31: 6.251  loss_cls_b32: 6.165  loss_cls_b33: 6.183  loss_triplet_b1: 1.608  loss_triplet_b2: 1.578  loss_triplet_b3: 1.579  loss_triplet_b22: 1.828  loss_triplet_b33: 2.019  time: 0.9286  data_time: 0.0007  lr: 1.40e-04  max_mem: 252M
[07/09 11:54:31] fastreid.utils.events INFO:  eta: 0:12:20  epoch/iter: 27/699  total_loss: 58.43  loss_cls_b1: 6.296  loss_cls_b2: 6.241  loss_cls_b21: 6.285  loss_cls_b22: 6.209  loss_cls_b3: 6.243  loss_cls_b31: 6.258  loss_cls_b32: 6.166  loss_cls_b33: 6.172  loss_triplet_b1: 1.597  loss_triplet_b2: 1.573  loss_triplet_b3: 1.542  loss_triplet_b22: 1.799  loss_triplet_b33: 1.977  time: 0.9288  data_time: 0.0005  lr: 1.44e-04  max_mem: 252M
[07/09 11:54:54] fastreid.utils.events INFO:  eta: 0:11:57  epoch/iter: 28/724  total_loss: 58.47  loss_cls_b1: 6.294  loss_cls_b2: 6.253  loss_cls_b21: 6.285  loss_cls_b22: 6.212  loss_cls_b3: 6.24  loss_cls_b31: 6.25  loss_cls_b32: 6.136  loss_cls_b33: 6.173  loss_triplet_b1: 1.589  loss_triplet_b2: 1.571  loss_triplet_b3: 1.53  loss_triplet_b22: 1.799  loss_triplet_b33: 1.996  time: 0.9288  data_time: 0.0006  lr: 1.48e-04  max_mem: 252M
[07/09 11:55:18] fastreid.engine.defaults INFO: Prepare testing set
[07/09 11:55:18] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 11:55:18] fastreid.evaluation.evaluator INFO: Start inference on 1997 images
[07/09 11:55:26] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.5614 s / batch. ETA=0:00:02
[07/09 11:55:29] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.183328 (0.562121 s / batch per device, on 1 devices)
[07/09 11:55:29] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.559110 s / batch per device, on 1 devices)
[07/09 11:55:29] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[07/09 11:55:29] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 79.33    | 88.27    | 90.78     | 50.36 | 9.48   | 64.84    |[0m
[07/09 11:55:29] fastreid.utils.events INFO:  eta: 0:11:34  epoch/iter: 29/749  total_loss: 58.58  loss_cls_b1: 6.286  loss_cls_b2: 6.265  loss_cls_b21: 6.279  loss_cls_b22: 6.219  loss_cls_b3: 6.243  loss_cls_b31: 6.252  loss_cls_b32: 6.14  loss_cls_b33: 6.17  loss_triplet_b1: 1.605  loss_triplet_b2: 1.592  loss_triplet_b3: 1.571  loss_triplet_b22: 1.816  loss_triplet_b33: 2.025  time: 0.9290  data_time: 0.0006  lr: 1.52e-04  max_mem: 324M
[07/09 11:55:52] fastreid.utils.events INFO:  eta: 0:11:11  epoch/iter: 30/774  total_loss: 58.46  loss_cls_b1: 6.282  loss_cls_b2: 6.251  loss_cls_b21: 6.277  loss_cls_b22: 6.219  loss_cls_b3: 6.24  loss_cls_b31: 6.252  loss_cls_b32: 6.137  loss_cls_b33: 6.177  loss_triplet_b1: 1.596  loss_triplet_b2: 1.59  loss_triplet_b3: 1.56  loss_triplet_b22: 1.796  loss_triplet_b33: 2.016  time: 0.9290  data_time: 0.0007  lr: 1.56e-04  max_mem: 324M
[07/09 11:56:16] fastreid.utils.events INFO:  eta: 0:10:48  epoch/iter: 31/799  total_loss: 58.45  loss_cls_b1: 6.271  loss_cls_b2: 6.258  loss_cls_b21: 6.278  loss_cls_b22: 6.22  loss_cls_b3: 6.242  loss_cls_b31: 6.255  loss_cls_b32: 6.137  loss_cls_b33: 6.181  loss_triplet_b1: 1.584  loss_triplet_b2: 1.568  loss_triplet_b3: 1.536  loss_triplet_b22: 1.785  loss_triplet_b33: 2.007  time: 0.9295  data_time: 0.0006  lr: 1.60e-04  max_mem: 324M
[07/09 11:56:16] fastreid.utils.events INFO:  eta: 0:10:48  epoch/iter: 31/799  total_loss: 58.45  loss_cls_b1: 6.271  loss_cls_b2: 6.258  loss_cls_b21: 6.278  loss_cls_b22: 6.22  loss_cls_b3: 6.242  loss_cls_b31: 6.255  loss_cls_b32: 6.137  loss_cls_b33: 6.181  loss_triplet_b1: 1.584  loss_triplet_b2: 1.568  loss_triplet_b3: 1.536  loss_triplet_b22: 1.785  loss_triplet_b33: 2.007  time: 0.9295  data_time: 0.0006  lr: 1.60e-04  max_mem: 324M
[07/09 11:56:39] fastreid.utils.events INFO:  eta: 0:10:25  epoch/iter: 32/824  total_loss: 58.56  loss_cls_b1: 6.278  loss_cls_b2: 6.258  loss_cls_b21: 6.286  loss_cls_b22: 6.227  loss_cls_b3: 6.239  loss_cls_b31: 6.25  loss_cls_b32: 6.153  loss_cls_b33: 6.19  loss_triplet_b1: 1.608  loss_triplet_b2: 1.586  loss_triplet_b3: 1.58  loss_triplet_b22: 1.812  loss_triplet_b33: 2.016  time: 0.9298  data_time: 0.0007  lr: 1.64e-04  max_mem: 324M
[07/09 11:57:03] fastreid.utils.events INFO:  eta: 0:10:02  epoch/iter: 33/849  total_loss: 58.46  loss_cls_b1: 6.278  loss_cls_b2: 6.264  loss_cls_b21: 6.283  loss_cls_b22: 6.23  loss_cls_b3: 6.239  loss_cls_b31: 6.248  loss_cls_b32: 6.137  loss_cls_b33: 6.177  loss_triplet_b1: 1.584  loss_triplet_b2: 1.564  loss_triplet_b3: 1.547  loss_triplet_b22: 1.793  loss_triplet_b33: 2.004  time: 0.9298  data_time: 0.0005  lr: 1.68e-04  max_mem: 324M
[07/09 11:57:26] fastreid.utils.events INFO:  eta: 0:09:38  epoch/iter: 34/874  total_loss: 58.41  loss_cls_b1: 6.273  loss_cls_b2: 6.276  loss_cls_b21: 6.286  loss_cls_b22: 6.232  loss_cls_b3: 6.239  loss_cls_b31: 6.255  loss_cls_b32: 6.161  loss_cls_b33: 6.191  loss_triplet_b1: 1.579  loss_triplet_b2: 1.554  loss_triplet_b3: 1.53  loss_triplet_b22: 1.781  loss_triplet_b33: 1.987  time: 0.9300  data_time: 0.0004  lr: 1.72e-04  max_mem: 324M
[07/09 11:57:50] fastreid.utils.events INFO:  eta: 0:09:16  epoch/iter: 35/899  total_loss: 58.49  loss_cls_b1: 6.275  loss_cls_b2: 6.278  loss_cls_b21: 6.291  loss_cls_b22: 6.237  loss_cls_b3: 6.24  loss_cls_b31: 6.26  loss_cls_b32: 6.147  loss_cls_b33: 6.215  loss_triplet_b1: 1.579  loss_triplet_b2: 1.563  loss_triplet_b3: 1.554  loss_triplet_b22: 1.812  loss_triplet_b33: 2.001  time: 0.9303  data_time: 0.0007  lr: 1.76e-04  max_mem: 324M
[07/09 11:58:13] fastreid.utils.events INFO:  eta: 0:08:52  epoch/iter: 36/924  total_loss: 58.5  loss_cls_b1: 6.283  loss_cls_b2: 6.279  loss_cls_b21: 6.307  loss_cls_b22: 6.221  loss_cls_b3: 6.241  loss_cls_b31: 6.262  loss_cls_b32: 6.173  loss_cls_b33: 6.208  loss_triplet_b1: 1.577  loss_triplet_b2: 1.56  loss_triplet_b3: 1.572  loss_triplet_b22: 1.803  loss_triplet_b33: 2.011  time: 0.9304  data_time: 0.0007  lr: 1.80e-04  max_mem: 324M
[07/09 11:58:36] fastreid.utils.events INFO:  eta: 0:08:29  epoch/iter: 37/949  total_loss: 58.45  loss_cls_b1: 6.278  loss_cls_b2: 6.281  loss_cls_b21: 6.302  loss_cls_b22: 6.232  loss_cls_b3: 6.24  loss_cls_b31: 6.257  loss_cls_b32: 6.149  loss_cls_b33: 6.207  loss_triplet_b1: 1.565  loss_triplet_b2: 1.535  loss_triplet_b3: 1.543  loss_triplet_b22: 1.779  loss_triplet_b33: 1.981  time: 0.9305  data_time: 0.0006  lr: 1.84e-04  max_mem: 324M
[07/09 11:59:00] fastreid.utils.events INFO:  eta: 0:08:06  epoch/iter: 38/974  total_loss: 58.45  loss_cls_b1: 6.281  loss_cls_b2: 6.28  loss_cls_b21: 6.3  loss_cls_b22: 6.248  loss_cls_b3: 6.243  loss_cls_b31: 6.26  loss_cls_b32: 6.136  loss_cls_b33: 6.192  loss_triplet_b1: 1.565  loss_triplet_b2: 1.542  loss_triplet_b3: 1.543  loss_triplet_b22: 1.779  loss_triplet_b33: 2.001  time: 0.9306  data_time: 0.0006  lr: 1.87e-04  max_mem: 324M
[07/09 11:59:23] fastreid.utils.events INFO:  eta: 0:07:43  epoch/iter: 39/999  total_loss: 58.52  loss_cls_b1: 6.288  loss_cls_b2: 6.289  loss_cls_b21: 6.297  loss_cls_b22: 6.252  loss_cls_b3: 6.24  loss_cls_b31: 6.26  loss_cls_b32: 6.127  loss_cls_b33: 6.189  loss_triplet_b1: 1.577  loss_triplet_b2: 1.56  loss_triplet_b3: 1.581  loss_triplet_b22: 1.784  loss_triplet_b33: 1.992  time: 0.9307  data_time: 0.0007  lr: 1.91e-04  max_mem: 324M
[07/09 11:59:23] fastreid.engine.defaults INFO: Prepare testing set
[07/09 11:59:23] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 11:59:23] fastreid.evaluation.evaluator INFO: Start inference on 1997 images
[07/09 11:59:31] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.5406 s / batch. ETA=0:00:02
[07/09 11:59:34] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:05.692679 (0.517516 s / batch per device, on 1 devices)
[07/09 11:59:34] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:05 (0.516339 s / batch per device, on 1 devices)
[07/09 11:59:34] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[07/09 11:59:34] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 79.89    | 87.43    | 91.90     | 50.78 | 9.51   | 65.33    |[0m
[07/09 11:59:34] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_0039.pth
[07/09 11:59:35] fastreid.utils.events INFO:  eta: 0:07:43  epoch/iter: 39/999  total_loss: 58.52  loss_cls_b1: 6.288  loss_cls_b2: 6.289  loss_cls_b21: 6.297  loss_cls_b22: 6.252  loss_cls_b3: 6.24  loss_cls_b31: 6.26  loss_cls_b32: 6.127  loss_cls_b33: 6.189  loss_triplet_b1: 1.577  loss_triplet_b2: 1.56  loss_triplet_b3: 1.581  loss_triplet_b22: 1.784  loss_triplet_b33: 1.992  time: 0.9307  data_time: 0.0007  lr: 1.91e-04  max_mem: 324M
[07/09 11:59:35] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[07/09 11:59:59] fastreid.utils.events INFO:  eta: 0:07:21  epoch/iter: 40/1024  total_loss: 58.13  loss_cls_b1: 6.278  loss_cls_b2: 6.28  loss_cls_b21: 6.274  loss_cls_b22: 6.221  loss_cls_b3: 6.237  loss_cls_b31: 6.249  loss_cls_b32: 6.119  loss_cls_b33: 6.169  loss_triplet_b1: 1.511  loss_triplet_b2: 1.511  loss_triplet_b3: 1.517  loss_triplet_b22: 1.741  loss_triplet_b33: 1.908  time: 0.9311  data_time: 0.0005  lr: 1.95e-04  max_mem: 324M
[07/09 12:00:22] fastreid.utils.events INFO:  eta: 0:06:58  epoch/iter: 41/1049  total_loss: 57.74  loss_cls_b1: 6.237  loss_cls_b2: 6.226  loss_cls_b21: 6.254  loss_cls_b22: 6.192  loss_cls_b3: 6.202  loss_cls_b31: 6.221  loss_cls_b32: 6.088  loss_cls_b33: 6.156  loss_triplet_b1: 1.458  loss_triplet_b2: 1.429  loss_triplet_b3: 1.444  loss_triplet_b22: 1.652  loss_triplet_b33: 1.773  time: 0.9315  data_time: 0.0009  lr: 1.99e-04  max_mem: 324M
[07/09 12:00:47] fastreid.utils.events INFO:  eta: 0:06:35  epoch/iter: 42/1074  total_loss: 57.03  loss_cls_b1: 6.164  loss_cls_b2: 6.139  loss_cls_b21: 6.175  loss_cls_b22: 6.154  loss_cls_b3: 6.145  loss_cls_b31: 6.169  loss_cls_b32: 6.022  loss_cls_b33: 6.072  loss_triplet_b1: 1.37  loss_triplet_b2: 1.325  loss_triplet_b3: 1.335  loss_triplet_b22: 1.504  loss_triplet_b33: 1.616  time: 0.9322  data_time: 0.0005  lr: 2.03e-04  max_mem: 324M
[07/09 12:01:10] fastreid.utils.events INFO:  eta: 0:06:12  epoch/iter: 43/1099  total_loss: 55.77  loss_cls_b1: 6.086  loss_cls_b2: 6.075  loss_cls_b21: 6.031  loss_cls_b22: 6.022  loss_cls_b3: 6.045  loss_cls_b31: 6.055  loss_cls_b32: 5.935  loss_cls_b33: 5.99  loss_triplet_b1: 1.141  loss_triplet_b2: 1.111  loss_triplet_b3: 1.124  loss_triplet_b22: 1.262  loss_triplet_b33: 1.321  time: 0.9327  data_time: 0.0006  lr: 2.07e-04  max_mem: 324M
[07/09 12:01:34] fastreid.utils.events INFO:  eta: 0:05:49  epoch/iter: 44/1124  total_loss: 47.4  loss_cls_b1: 5.215  loss_cls_b2: 5.445  loss_cls_b21: 5.438  loss_cls_b22: 5.274  loss_cls_b3: 5.56  loss_cls_b31: 5.338  loss_cls_b32: 5.399  loss_cls_b33: 5.568  loss_triplet_b1: 0.8472  loss_triplet_b2: 0.7901  loss_triplet_b3: 0.8206  loss_triplet_b22: 0.8573  loss_triplet_b33: 0.9484  time: 0.9332  data_time: 0.0005  lr: 2.11e-04  max_mem: 324M
[07/09 12:01:58] fastreid.utils.events INFO:  eta: 0:05:26  epoch/iter: 45/1149  total_loss: 38.68  loss_cls_b1: 4.169  loss_cls_b2: 4.506  loss_cls_b21: 4.352  loss_cls_b22: 4.554  loss_cls_b3: 4.572  loss_cls_b31: 4.438  loss_cls_b32: 4.498  loss_cls_b33: 4.619  loss_triplet_b1: 0.6199  loss_triplet_b2: 0.5982  loss_triplet_b3: 0.6179  loss_triplet_b22: 0.6803  loss_triplet_b33: 0.7113  time: 0.9337  data_time: 0.0007  lr: 2.15e-04  max_mem: 324M
[07/09 12:02:22] fastreid.utils.events INFO:  eta: 0:05:03  epoch/iter: 46/1174  total_loss: 31.99  loss_cls_b1: 3.382  loss_cls_b2: 3.642  loss_cls_b21: 3.607  loss_cls_b22: 3.707  loss_cls_b3: 3.742  loss_cls_b31: 3.702  loss_cls_b32: 3.674  loss_cls_b33: 4.03  loss_triplet_b1: 0.4792  loss_triplet_b2: 0.4972  loss_triplet_b3: 0.482  loss_triplet_b22: 0.4869  loss_triplet_b33: 0.5177  time: 0.9341  data_time: 0.0006  lr: 2.19e-04  max_mem: 324M
[07/09 12:02:46] fastreid.utils.events INFO:  eta: 0:04:40  epoch/iter: 47/1199  total_loss: 27.66  loss_cls_b1: 2.884  loss_cls_b2: 3.171  loss_cls_b21: 3.06  loss_cls_b22: 3.267  loss_cls_b3: 3.242  loss_cls_b31: 3.207  loss_cls_b32: 3.207  loss_cls_b33: 3.468  loss_triplet_b1: 0.3608  loss_triplet_b2: 0.3926  loss_triplet_b3: 0.3826  loss_triplet_b22: 0.3496  loss_triplet_b33: 0.3795  time: 0.9345  data_time: 0.0007  lr: 2.23e-04  max_mem: 324M
[07/09 12:02:46] fastreid.utils.events INFO:  eta: 0:04:40  epoch/iter: 47/1199  total_loss: 27.66  loss_cls_b1: 2.884  loss_cls_b2: 3.171  loss_cls_b21: 3.06  loss_cls_b22: 3.267  loss_cls_b3: 3.242  loss_cls_b31: 3.207  loss_cls_b32: 3.207  loss_cls_b33: 3.468  loss_triplet_b1: 0.3608  loss_triplet_b2: 0.3926  loss_triplet_b3: 0.3826  loss_triplet_b22: 0.3496  loss_triplet_b33: 0.3795  time: 0.9345  data_time: 0.0007  lr: 2.23e-04  max_mem: 324M
[07/09 12:03:10] fastreid.utils.events INFO:  eta: 0:04:17  epoch/iter: 48/1224  total_loss: 22.92  loss_cls_b1: 2.353  loss_cls_b2: 2.662  loss_cls_b21: 2.662  loss_cls_b22: 2.847  loss_cls_b3: 2.714  loss_cls_b31: 2.767  loss_cls_b32: 2.723  loss_cls_b33: 3.032  loss_triplet_b1: 0.2546  loss_triplet_b2: 0.2725  loss_triplet_b3: 0.2776  loss_triplet_b22: 0.2712  loss_triplet_b33: 0.2627  time: 0.9351  data_time: 0.0007  lr: 2.27e-04  max_mem: 324M
[07/09 12:03:34] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:03:34] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 12:03:34] fastreid.evaluation.evaluator INFO: Start inference on 1997 images
[07/09 12:03:42] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.5905 s / batch. ETA=0:00:02
[07/09 12:03:45] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.198951 (0.563541 s / batch per device, on 1 devices)
[07/09 12:03:45] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.561764 s / batch per device, on 1 devices)
[07/09 12:03:45] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[07/09 12:03:45] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 94.69    | 97.77    | 98.32     | 89.10 | 67.78  | 91.90    |[0m
[07/09 12:03:45] fastreid.utils.events INFO:  eta: 0:03:53  epoch/iter: 49/1249  total_loss: 18.98  loss_cls_b1: 1.974  loss_cls_b2: 2.19  loss_cls_b21: 2.189  loss_cls_b22: 2.393  loss_cls_b3: 2.253  loss_cls_b31: 2.347  loss_cls_b32: 2.326  loss_cls_b33: 2.675  loss_triplet_b1: 0.2003  loss_triplet_b2: 0.1972  loss_triplet_b3: 0.2132  loss_triplet_b22: 0.1911  loss_triplet_b33: 0.2008  time: 0.9354  data_time: 0.0007  lr: 2.31e-04  max_mem: 324M
[07/09 12:04:09] fastreid.utils.events INFO:  eta: 0:03:30  epoch/iter: 50/1274  total_loss: 17.37  loss_cls_b1: 1.725  loss_cls_b2: 1.903  loss_cls_b21: 1.951  loss_cls_b22: 2.13  loss_cls_b3: 1.929  loss_cls_b31: 2.081  loss_cls_b32: 2.07  loss_cls_b33: 2.401  loss_triplet_b1: 0.1616  loss_triplet_b2: 0.1591  loss_triplet_b3: 0.1783  loss_triplet_b22: 0.1427  loss_triplet_b33: 0.1531  time: 0.9357  data_time: 0.0006  lr: 2.35e-04  max_mem: 324M
[07/09 12:04:33] fastreid.utils.events INFO:  eta: 0:03:07  epoch/iter: 51/1299  total_loss: 15.73  loss_cls_b1: 1.537  loss_cls_b2: 1.733  loss_cls_b21: 1.823  loss_cls_b22: 1.956  loss_cls_b3: 1.803  loss_cls_b31: 1.874  loss_cls_b32: 1.881  loss_cls_b33: 2.267  loss_triplet_b1: 0.1389  loss_triplet_b2: 0.14  loss_triplet_b3: 0.1496  loss_triplet_b22: 0.1211  loss_triplet_b33: 0.1164  time: 0.9360  data_time: 0.0007  lr: 2.39e-04  max_mem: 324M
[07/09 12:04:56] fastreid.utils.events INFO:  eta: 0:02:43  epoch/iter: 52/1324  total_loss: 14.48  loss_cls_b1: 1.361  loss_cls_b2: 1.558  loss_cls_b21: 1.626  loss_cls_b22: 1.797  loss_cls_b3: 1.642  loss_cls_b31: 1.702  loss_cls_b32: 1.757  loss_cls_b33: 2.129  loss_triplet_b1: 0.1273  loss_triplet_b2: 0.1249  loss_triplet_b3: 0.1332  loss_triplet_b22: 0.1086  loss_triplet_b33: 0.1007  time: 0.9362  data_time: 0.0007  lr: 2.43e-04  max_mem: 324M
[07/09 12:05:20] fastreid.utils.events INFO:  eta: 0:02:20  epoch/iter: 53/1349  total_loss: 13.02  loss_cls_b1: 1.236  loss_cls_b2: 1.4  loss_cls_b21: 1.47  loss_cls_b22: 1.647  loss_cls_b3: 1.438  loss_cls_b31: 1.596  loss_cls_b32: 1.548  loss_cls_b33: 1.857  loss_triplet_b1: 0.09583  loss_triplet_b2: 0.1022  loss_triplet_b3: 0.1039  loss_triplet_b22: 0.07741  loss_triplet_b33: 0.08137  time: 0.9364  data_time: 0.0007  lr: 2.47e-04  max_mem: 324M
[07/09 12:05:44] fastreid.utils.events INFO:  eta: 0:01:57  epoch/iter: 54/1374  total_loss: 12.14  loss_cls_b1: 1.1  loss_cls_b2: 1.285  loss_cls_b21: 1.363  loss_cls_b22: 1.506  loss_cls_b3: 1.36  loss_cls_b31: 1.448  loss_cls_b32: 1.458  loss_cls_b33: 1.753  loss_triplet_b1: 0.09318  loss_triplet_b2: 0.09336  loss_triplet_b3: 0.08373  loss_triplet_b22: 0.07689  loss_triplet_b33: 0.07506  time: 0.9366  data_time: 0.0005  lr: 2.50e-04  max_mem: 324M
[07/09 12:06:08] fastreid.utils.events INFO:  eta: 0:01:33  epoch/iter: 55/1399  total_loss: 11.28  loss_cls_b1: 1.065  loss_cls_b2: 1.226  loss_cls_b21: 1.272  loss_cls_b22: 1.435  loss_cls_b3: 1.258  loss_cls_b31: 1.396  loss_cls_b32: 1.425  loss_cls_b33: 1.691  loss_triplet_b1: 0.06645  loss_triplet_b2: 0.08134  loss_triplet_b3: 0.07282  loss_triplet_b22: 0.07206  loss_triplet_b33: 0.06435  time: 0.9368  data_time: 0.0006  lr: 2.54e-04  max_mem: 324M
[07/09 12:06:08] fastreid.utils.events INFO:  eta: 0:01:33  epoch/iter: 55/1399  total_loss: 11.28  loss_cls_b1: 1.065  loss_cls_b2: 1.226  loss_cls_b21: 1.272  loss_cls_b22: 1.435  loss_cls_b3: 1.258  loss_cls_b31: 1.396  loss_cls_b32: 1.425  loss_cls_b33: 1.691  loss_triplet_b1: 0.06645  loss_triplet_b2: 0.08134  loss_triplet_b3: 0.07282  loss_triplet_b22: 0.07206  loss_triplet_b33: 0.06435  time: 0.9368  data_time: 0.0006  lr: 2.54e-04  max_mem: 324M
[07/09 12:06:31] fastreid.utils.events INFO:  eta: 0:01:10  epoch/iter: 56/1424  total_loss: 10.64  loss_cls_b1: 0.9597  loss_cls_b2: 1.105  loss_cls_b21: 1.194  loss_cls_b22: 1.333  loss_cls_b3: 1.146  loss_cls_b31: 1.285  loss_cls_b32: 1.344  loss_cls_b33: 1.609  loss_triplet_b1: 0.05616  loss_triplet_b2: 0.06672  loss_triplet_b3: 0.06431  loss_triplet_b22: 0.05769  loss_triplet_b33: 0.0447  time: 0.9369  data_time: 0.0007  lr: 2.58e-04  max_mem: 324M
[07/09 12:06:55] fastreid.utils.events INFO:  eta: 0:00:46  epoch/iter: 57/1449  total_loss: 9.633  loss_cls_b1: 0.9211  loss_cls_b2: 1.01  loss_cls_b21: 1.103  loss_cls_b22: 1.234  loss_cls_b3: 1.084  loss_cls_b31: 1.2  loss_cls_b32: 1.245  loss_cls_b33: 1.487  loss_triplet_b1: 0.05311  loss_triplet_b2: 0.05581  loss_triplet_b3: 0.06015  loss_triplet_b22: 0.04637  loss_triplet_b33: 0.03941  time: 0.9371  data_time: 0.0006  lr: 2.62e-04  max_mem: 324M
[07/09 12:07:19] fastreid.utils.events INFO:  eta: 0:00:23  epoch/iter: 58/1474  total_loss: 9.271  loss_cls_b1: 0.85  loss_cls_b2: 0.959  loss_cls_b21: 1.085  loss_cls_b22: 1.174  loss_cls_b3: 1.052  loss_cls_b31: 1.186  loss_cls_b32: 1.224  loss_cls_b33: 1.432  loss_triplet_b1: 0.04889  loss_triplet_b2: 0.05153  loss_triplet_b3: 0.04829  loss_triplet_b22: 0.03862  loss_triplet_b33: 0.03599  time: 0.9373  data_time: 0.0007  lr: 2.66e-04  max_mem: 324M
[07/09 12:07:42] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/1499  total_loss: 8.946  loss_cls_b1: 0.8416  loss_cls_b2: 0.9131  loss_cls_b21: 0.9894  loss_cls_b22: 1.111  loss_cls_b3: 0.9782  loss_cls_b31: 1.107  loss_cls_b32: 1.175  loss_cls_b33: 1.386  loss_triplet_b1: 0.04392  loss_triplet_b2: 0.0463  loss_triplet_b3: 0.04352  loss_triplet_b22: 0.03348  loss_triplet_b33: 0.02293  time: 0.9375  data_time: 0.0005  lr: 2.70e-04  max_mem: 324M
[07/09 12:07:42] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:07:42] fastreid.data.datasets.bases INFO: => Loaded WildSplit7 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 363        | 1           |
| gallery  | 297     | 1634       | 1           |[0m
[07/09 12:07:42] fastreid.evaluation.evaluator INFO: Start inference on 1997 images
[07/09 12:07:51] fastreid.evaluation.evaluator INFO: Inference done 11/16. 0.5953 s / batch. ETA=0:00:02
[07/09 12:07:54] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.426931 (0.584266 s / batch per device, on 1 devices)
[07/09 12:07:54] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.579982 s / batch per device, on 1 devices)
[07/09 12:07:54] fastreid.engine.defaults INFO: Evaluation results for WildSplit7 in csv format:
[07/09 12:07:54] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit7 | 95.53    | 99.44    | 99.44     | 92.87 | 73.99  | 94.20    |[0m
[07/09 12:07:54] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_best.pth
[07/09 12:07:58] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit7/mgn_R50-ibn/model_final.pth
[07/09 12:08:01] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/1499  total_loss: 8.946  loss_cls_b1: 0.8416  loss_cls_b2: 0.9131  loss_cls_b21: 0.9894  loss_cls_b22: 1.111  loss_cls_b3: 0.9782  loss_cls_b31: 1.107  loss_cls_b32: 1.175  loss_cls_b33: 1.386  loss_triplet_b1: 0.04392  loss_triplet_b2: 0.0463  loss_triplet_b3: 0.04352  loss_triplet_b22: 0.03348  loss_triplet_b33: 0.02293  time: 0.9375  data_time: 0.0005  lr: 2.70e-04  max_mem: 324M
[07/09 12:08:01] fastreid.engine.hooks INFO: Overall training speed: 1498 iterations in 0:23:24 (0.9375 s / it)
[07/09 12:08:01] fastreid.engine.hooks INFO: Total training time: 0:24:46 (0:01:22 on hooks)
