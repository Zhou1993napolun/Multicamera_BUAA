[05/30 17:16:07] fastreid INFO: Rank of current process: 0. World size: 1
[05/30 17:16:08] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[05/30 17:16:08] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[05/30 17:16:08] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[05/30 17:16:08] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[05/30 17:16:08] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[05/30 17:16:08] fastreid.utils.env INFO: Using a generated random seed 8743920
[05/30 17:16:08] fastreid.engine.defaults INFO: Prepare training set
[05/30 17:16:08] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 285     | 3728       | 1           |[0m
[05/30 17:16:08] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[05/30 17:16:08] fastreid.engine.defaults INFO: Auto-scaling the num_classes=285
[05/30 17:16:08] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[05/30 17:16:09] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[05/30 17:16:15] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=285, scale=64, margin=0.35)
  )
)
[05/30 17:16:16] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[05/30 17:16:16] fastreid.engine.train_loop INFO: Starting training from epoch 0
[05/30 17:16:16] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[05/30 17:17:46] fastreid.utils.events INFO:  eta: 1:24:48  epoch/iter: 0/57  total_loss: 57.67  loss_cls_b1: 6.197  loss_cls_b2: 6.183  loss_cls_b21: 6.2  loss_cls_b22: 6.185  loss_cls_b3: 6.153  loss_cls_b31: 6.162  loss_cls_b32: 6.19  loss_cls_b33: 6.141  loss_triplet_b1: 1.491  loss_triplet_b2: 1.438  loss_triplet_b3: 1.493  loss_triplet_b22: 1.837  loss_triplet_b33: 2.057  time: 1.4643  data_time: 0.0010  lr: 4.32e-05  max_mem: 22746M
[05/30 17:19:09] fastreid.utils.events INFO:  eta: 1:23:27  epoch/iter: 1/115  total_loss: 57.87  loss_cls_b1: 6.182  loss_cls_b2: 6.209  loss_cls_b21: 6.203  loss_cls_b22: 6.181  loss_cls_b3: 6.2  loss_cls_b31: 6.16  loss_cls_b32: 6.171  loss_cls_b33: 6.16  loss_triplet_b1: 1.509  loss_triplet_b2: 1.486  loss_triplet_b3: 1.512  loss_triplet_b22: 1.838  loss_triplet_b33: 2.081  time: 1.4539  data_time: 0.0007  lr: 5.23e-05  max_mem: 22746M
[05/30 17:20:33] fastreid.utils.events INFO:  eta: 1:22:06  epoch/iter: 2/173  total_loss: 58.12  loss_cls_b1: 6.182  loss_cls_b2: 6.219  loss_cls_b21: 6.207  loss_cls_b22: 6.209  loss_cls_b3: 6.224  loss_cls_b31: 6.168  loss_cls_b32: 6.194  loss_cls_b33: 6.173  loss_triplet_b1: 1.511  loss_triplet_b2: 1.488  loss_triplet_b3: 1.527  loss_triplet_b22: 1.856  loss_triplet_b33: 2.109  time: 1.4483  data_time: 0.0006  lr: 6.15e-05  max_mem: 22746M
[05/30 17:21:11] fastreid.utils.events INFO:  eta: 1:21:26  epoch/iter: 3/199  total_loss: 58.03  loss_cls_b1: 6.184  loss_cls_b2: 6.225  loss_cls_b21: 6.206  loss_cls_b22: 6.217  loss_cls_b3: 6.22  loss_cls_b31: 6.167  loss_cls_b32: 6.183  loss_cls_b33: 6.181  loss_triplet_b1: 1.5  loss_triplet_b2: 1.48  loss_triplet_b3: 1.523  loss_triplet_b22: 1.843  loss_triplet_b33: 2.092  time: 1.4492  data_time: 0.0008  lr: 6.56e-05  max_mem: 22746M
[05/30 17:21:58] fastreid.utils.events INFO:  eta: 1:20:37  epoch/iter: 3/231  total_loss: 58.24  loss_cls_b1: 6.188  loss_cls_b2: 6.219  loss_cls_b21: 6.213  loss_cls_b22: 6.219  loss_cls_b3: 6.203  loss_cls_b31: 6.18  loss_cls_b32: 6.185  loss_cls_b33: 6.176  loss_triplet_b1: 1.535  loss_triplet_b2: 1.499  loss_triplet_b3: 1.535  loss_triplet_b22: 1.871  loss_triplet_b33: 2.111  time: 1.4526  data_time: 0.0009  lr: 7.06e-05  max_mem: 22746M
[05/30 17:23:24] fastreid.utils.events INFO:  eta: 1:19:10  epoch/iter: 4/289  total_loss: 58.19  loss_cls_b1: 6.202  loss_cls_b2: 6.218  loss_cls_b21: 6.217  loss_cls_b22: 6.203  loss_cls_b3: 6.202  loss_cls_b31: 6.201  loss_cls_b32: 6.175  loss_cls_b33: 6.171  loss_triplet_b1: 1.513  loss_triplet_b2: 1.49  loss_triplet_b3: 1.547  loss_triplet_b22: 1.871  loss_triplet_b33: 2.097  time: 1.4574  data_time: 0.0008  lr: 7.97e-05  max_mem: 22746M
[05/30 17:24:50] fastreid.utils.events INFO:  eta: 1:17:40  epoch/iter: 5/347  total_loss: 58.24  loss_cls_b1: 6.195  loss_cls_b2: 6.217  loss_cls_b21: 6.204  loss_cls_b22: 6.192  loss_cls_b3: 6.191  loss_cls_b31: 6.219  loss_cls_b32: 6.175  loss_cls_b33: 6.154  loss_triplet_b1: 1.527  loss_triplet_b2: 1.505  loss_triplet_b3: 1.557  loss_triplet_b22: 1.908  loss_triplet_b33: 2.111  time: 1.4600  data_time: 0.0008  lr: 8.89e-05  max_mem: 22746M
[05/30 17:26:05] fastreid.utils.events INFO:  eta: 1:16:11  epoch/iter: 6/399  total_loss: 58.22  loss_cls_b1: 6.198  loss_cls_b2: 6.213  loss_cls_b21: 6.211  loss_cls_b22: 6.184  loss_cls_b3: 6.196  loss_cls_b31: 6.204  loss_cls_b32: 6.169  loss_cls_b33: 6.148  loss_triplet_b1: 1.523  loss_triplet_b2: 1.505  loss_triplet_b3: 1.556  loss_triplet_b22: 1.908  loss_triplet_b33: 2.106  time: 1.4593  data_time: 0.0010  lr: 9.71e-05  max_mem: 22746M
[05/30 17:26:14] fastreid.utils.events INFO:  eta: 1:15:58  epoch/iter: 6/405  total_loss: 58.13  loss_cls_b1: 6.197  loss_cls_b2: 6.21  loss_cls_b21: 6.204  loss_cls_b22: 6.183  loss_cls_b3: 6.196  loss_cls_b31: 6.216  loss_cls_b32: 6.17  loss_cls_b33: 6.148  loss_triplet_b1: 1.523  loss_triplet_b2: 1.499  loss_triplet_b3: 1.546  loss_triplet_b22: 1.875  loss_triplet_b33: 2.085  time: 1.4589  data_time: 0.0010  lr: 9.80e-05  max_mem: 22746M
[05/30 17:27:39] fastreid.utils.events INFO:  eta: 1:14:42  epoch/iter: 7/463  total_loss: 57.97  loss_cls_b1: 6.201  loss_cls_b2: 6.23  loss_cls_b21: 6.195  loss_cls_b22: 6.192  loss_cls_b3: 6.196  loss_cls_b31: 6.202  loss_cls_b32: 6.169  loss_cls_b33: 6.169  loss_triplet_b1: 1.496  loss_triplet_b2: 1.48  loss_triplet_b3: 1.517  loss_triplet_b22: 1.819  loss_triplet_b33: 2.032  time: 1.4603  data_time: 0.0009  lr: 1.07e-04  max_mem: 22746M
[05/30 17:29:05] fastreid.utils.events INFO:  eta: 1:13:17  epoch/iter: 8/521  total_loss: 58.04  loss_cls_b1: 6.217  loss_cls_b2: 6.241  loss_cls_b21: 6.197  loss_cls_b22: 6.218  loss_cls_b3: 6.2  loss_cls_b31: 6.195  loss_cls_b32: 6.188  loss_cls_b33: 6.17  loss_triplet_b1: 1.503  loss_triplet_b2: 1.489  loss_triplet_b3: 1.528  loss_triplet_b22: 1.825  loss_triplet_b33: 2.05  time: 1.4617  data_time: 0.0007  lr: 1.16e-04  max_mem: 22746M
[05/30 17:30:30] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:30:30] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[05/30 17:30:30] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[05/30 17:30:38] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.4243 s / batch. ETA=0:00:10
[05/30 17:30:50] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:14.280594 (0.460664 s / batch per device, on 1 devices)
[05/30 17:30:50] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:14 (0.459358 s / batch per device, on 1 devices)
[05/30 17:30:50] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[05/30 17:30:50] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 47.77    | 65.86    | 70.57     | 21.69 | 3.40   | 34.73    |[0m
[05/30 17:30:50] fastreid.utils.events INFO:  eta: 1:11:54  epoch/iter: 9/579  total_loss: 58.09  loss_cls_b1: 6.225  loss_cls_b2: 6.225  loss_cls_b21: 6.201  loss_cls_b22: 6.225  loss_cls_b3: 6.213  loss_cls_b31: 6.197  loss_cls_b32: 6.191  loss_cls_b33: 6.191  loss_triplet_b1: 1.504  loss_triplet_b2: 1.489  loss_triplet_b3: 1.509  loss_triplet_b22: 1.82  loss_triplet_b33: 2.045  time: 1.4618  data_time: 0.0009  lr: 1.25e-04  max_mem: 22746M
[05/30 17:31:20] fastreid.utils.events INFO:  eta: 1:11:25  epoch/iter: 10/599  total_loss: 58.1  loss_cls_b1: 6.226  loss_cls_b2: 6.225  loss_cls_b21: 6.195  loss_cls_b22: 6.22  loss_cls_b3: 6.213  loss_cls_b31: 6.194  loss_cls_b32: 6.198  loss_cls_b33: 6.191  loss_triplet_b1: 1.512  loss_triplet_b2: 1.502  loss_triplet_b3: 1.515  loss_triplet_b22: 1.82  loss_triplet_b33: 2.03  time: 1.4628  data_time: 0.0008  lr: 1.29e-04  max_mem: 22746M
[05/30 17:32:17] fastreid.utils.events INFO:  eta: 1:10:31  epoch/iter: 10/637  total_loss: 58.11  loss_cls_b1: 6.228  loss_cls_b2: 6.215  loss_cls_b21: 6.18  loss_cls_b22: 6.229  loss_cls_b3: 6.213  loss_cls_b31: 6.178  loss_cls_b32: 6.201  loss_cls_b33: 6.193  loss_triplet_b1: 1.529  loss_triplet_b2: 1.518  loss_triplet_b3: 1.543  loss_triplet_b22: 1.829  loss_triplet_b33: 2.019  time: 1.4650  data_time: 0.0009  lr: 1.35e-04  max_mem: 22746M
[05/30 17:33:44] fastreid.utils.events INFO:  eta: 1:09:09  epoch/iter: 11/695  total_loss: 57.99  loss_cls_b1: 6.204  loss_cls_b2: 6.221  loss_cls_b21: 6.178  loss_cls_b22: 6.218  loss_cls_b3: 6.23  loss_cls_b31: 6.184  loss_cls_b32: 6.196  loss_cls_b33: 6.183  loss_triplet_b1: 1.528  loss_triplet_b2: 1.515  loss_triplet_b3: 1.527  loss_triplet_b22: 1.819  loss_triplet_b33: 1.983  time: 1.4679  data_time: 0.0008  lr: 1.44e-04  max_mem: 22746M
[05/30 17:34:17] fastreid.utils.events INFO:  eta: 1:07:38  epoch/iter: 12/753  total_loss: 57.97  loss_cls_b1: 6.218  loss_cls_b2: 6.211  loss_cls_b21: 6.177  loss_cls_b22: 6.213  loss_cls_b3: 6.233  loss_cls_b31: 6.183  loss_cls_b32: 6.213  loss_cls_b33: 6.172  loss_triplet_b1: 1.529  loss_triplet_b2: 1.519  loss_triplet_b3: 1.539  loss_triplet_b22: 1.789  loss_triplet_b33: 1.968  time: 1.3984  data_time: 0.0005  lr: 1.53e-04  max_mem: 22746M
[05/30 17:34:31] fastreid.utils.events INFO:  eta: 1:06:22  epoch/iter: 13/799  total_loss: 57.91  loss_cls_b1: 6.216  loss_cls_b2: 6.212  loss_cls_b21: 6.177  loss_cls_b22: 6.211  loss_cls_b3: 6.244  loss_cls_b31: 6.185  loss_cls_b32: 6.198  loss_cls_b33: 6.175  loss_triplet_b1: 1.509  loss_triplet_b2: 1.515  loss_triplet_b3: 1.529  loss_triplet_b22: 1.746  loss_triplet_b33: 1.93  time: 1.3342  data_time: 0.0005  lr: 1.60e-04  max_mem: 22746M
[05/30 17:34:34] fastreid.utils.events INFO:  eta: 1:06:02  epoch/iter: 13/811  total_loss: 57.86  loss_cls_b1: 6.216  loss_cls_b2: 6.217  loss_cls_b21: 6.174  loss_cls_b22: 6.213  loss_cls_b3: 6.245  loss_cls_b31: 6.187  loss_cls_b32: 6.2  loss_cls_b33: 6.171  loss_triplet_b1: 1.497  loss_triplet_b2: 1.493  loss_triplet_b3: 1.502  loss_triplet_b22: 1.736  loss_triplet_b33: 1.905  time: 1.3186  data_time: 0.0007  lr: 1.62e-04  max_mem: 22746M
[05/30 17:34:51] fastreid.utils.events INFO:  eta: 1:04:20  epoch/iter: 14/869  total_loss: 58.02  loss_cls_b1: 6.212  loss_cls_b2: 6.217  loss_cls_b21: 6.187  loss_cls_b22: 6.202  loss_cls_b3: 6.239  loss_cls_b31: 6.185  loss_cls_b32: 6.19  loss_cls_b33: 6.171  loss_triplet_b1: 1.517  loss_triplet_b2: 1.534  loss_triplet_b3: 1.546  loss_triplet_b22: 1.763  loss_triplet_b33: 1.935  time: 1.2495  data_time: 0.0005  lr: 1.71e-04  max_mem: 22746M
[05/30 17:35:07] fastreid.utils.events INFO:  eta: 1:02:44  epoch/iter: 15/927  total_loss: 58.08  loss_cls_b1: 6.212  loss_cls_b2: 6.208  loss_cls_b21: 6.173  loss_cls_b22: 6.19  loss_cls_b3: 6.216  loss_cls_b31: 6.184  loss_cls_b32: 6.209  loss_cls_b33: 6.171  loss_triplet_b1: 1.529  loss_triplet_b2: 1.564  loss_triplet_b3: 1.574  loss_triplet_b22: 1.809  loss_triplet_b33: 1.963  time: 1.1891  data_time: 0.0005  lr: 1.80e-04  max_mem: 22746M
[05/30 17:35:24] fastreid.utils.events INFO:  eta: 1:01:07  epoch/iter: 16/985  total_loss: 58.01  loss_cls_b1: 6.208  loss_cls_b2: 6.214  loss_cls_b21: 6.163  loss_cls_b22: 6.187  loss_cls_b3: 6.213  loss_cls_b31: 6.186  loss_cls_b32: 6.195  loss_cls_b33: 6.165  loss_triplet_b1: 1.517  loss_triplet_b2: 1.558  loss_triplet_b3: 1.564  loss_triplet_b22: 1.813  loss_triplet_b33: 1.955  time: 1.1359  data_time: 0.0006  lr: 1.89e-04  max_mem: 22746M
[05/30 17:35:28] fastreid.utils.events INFO:  eta: 1:00:43  epoch/iter: 17/999  total_loss: 57.99  loss_cls_b1: 6.21  loss_cls_b2: 6.214  loss_cls_b21: 6.157  loss_cls_b22: 6.186  loss_cls_b3: 6.213  loss_cls_b31: 6.174  loss_cls_b32: 6.21  loss_cls_b33: 6.165  loss_triplet_b1: 1.513  loss_triplet_b2: 1.546  loss_triplet_b3: 1.555  loss_triplet_b22: 1.808  loss_triplet_b33: 1.955  time: 1.1240  data_time: 0.0006  lr: 1.91e-04  max_mem: 22746M
[05/30 17:35:28] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[05/30 17:35:41] fastreid.utils.events INFO:  eta: 0:59:24  epoch/iter: 17/1043  total_loss: 57.41  loss_cls_b1: 6.207  loss_cls_b2: 6.186  loss_cls_b21: 6.157  loss_cls_b22: 6.176  loss_cls_b3: 6.188  loss_cls_b31: 6.166  loss_cls_b32: 6.192  loss_cls_b33: 6.163  loss_triplet_b1: 1.435  loss_triplet_b2: 1.423  loss_triplet_b3: 1.456  loss_triplet_b22: 1.693  loss_triplet_b33: 1.847  time: 1.0888  data_time: 0.0004  lr: 1.98e-04  max_mem: 22746M
[05/30 17:35:58] fastreid.utils.events INFO:  eta: 0:57:33  epoch/iter: 18/1101  total_loss: 55.69  loss_cls_b1: 6.142  loss_cls_b2: 6.152  loss_cls_b21: 6.13  loss_cls_b22: 6.118  loss_cls_b3: 6.142  loss_cls_b31: 6.119  loss_cls_b32: 6.15  loss_cls_b33: 6.116  loss_triplet_b1: 1.21  loss_triplet_b2: 1.187  loss_triplet_b3: 1.147  loss_triplet_b22: 1.363  loss_triplet_b33: 1.466  time: 1.0468  data_time: 0.0005  lr: 2.07e-04  max_mem: 22746M
[05/30 17:36:15] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:36:15] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[05/30 17:36:15] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[05/30 17:36:19] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.2420 s / batch. ETA=0:00:06
[05/30 17:36:24] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.933814 (0.223671 s / batch per device, on 1 devices)
[05/30 17:36:24] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.222409 s / batch per device, on 1 devices)
[05/30 17:36:25] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[05/30 17:36:25] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 71.41    | 86.01    | 89.51     | 42.83 | 9.48   | 57.12    |[0m
[05/30 17:36:25] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[05/30 17:36:27] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_0019.pth
[05/30 17:36:29] fastreid.utils.events INFO:  eta: 0:55:08  epoch/iter: 19/1159  total_loss: 52.17  loss_cls_b1: 5.928  loss_cls_b2: 5.999  loss_cls_b21: 5.912  loss_cls_b22: 5.892  loss_cls_b3: 5.95  loss_cls_b31: 5.969  loss_cls_b32: 5.935  loss_cls_b33: 5.922  loss_triplet_b1: 0.8247  loss_triplet_b2: 0.8256  loss_triplet_b3: 0.7947  loss_triplet_b22: 0.9114  loss_triplet_b33: 0.948  time: 1.0091  data_time: 0.0007  lr: 2.17e-04  max_mem: 22746M
[05/30 17:36:41] fastreid.utils.events INFO:  eta: 0:43:50  epoch/iter: 20/1199  total_loss: 47.53  loss_cls_b1: 5.424  loss_cls_b2: 5.56  loss_cls_b21: 5.486  loss_cls_b22: 5.497  loss_cls_b3: 5.559  loss_cls_b31: 5.461  loss_cls_b32: 5.474  loss_cls_b33: 5.619  loss_triplet_b1: 0.7287  loss_triplet_b2: 0.6919  loss_triplet_b3: 0.7181  loss_triplet_b22: 0.802  loss_triplet_b33: 0.8601  time: 0.9853  data_time: 0.0004  lr: 2.23e-04  max_mem: 22746M
[05/30 17:36:46] fastreid.utils.events INFO:  eta: 0:11:24  epoch/iter: 20/1217  total_loss: 46.2  loss_cls_b1: 5.275  loss_cls_b2: 5.386  loss_cls_b21: 5.294  loss_cls_b22: 5.361  loss_cls_b3: 5.314  loss_cls_b31: 5.294  loss_cls_b32: 5.327  loss_cls_b33: 5.359  loss_triplet_b1: 0.7024  loss_triplet_b2: 0.6747  loss_triplet_b3: 0.6881  loss_triplet_b22: 0.7246  loss_triplet_b33: 0.8015  time: 0.9749  data_time: 0.0005  lr: 2.26e-04  max_mem: 22746M
[05/30 17:37:03] fastreid.utils.events INFO:  eta: 0:10:51  epoch/iter: 21/1275  total_loss: 40.84  loss_cls_b1: 4.634  loss_cls_b2: 4.73  loss_cls_b21: 4.666  loss_cls_b22: 4.783  loss_cls_b3: 4.717  loss_cls_b31: 4.642  loss_cls_b32: 4.706  loss_cls_b33: 4.831  loss_triplet_b1: 0.6672  loss_triplet_b2: 0.6006  loss_triplet_b3: 0.617  loss_triplet_b22: 0.6918  loss_triplet_b33: 0.7737  time: 0.9438  data_time: 0.0006  lr: 2.35e-04  max_mem: 22746M
[05/30 17:37:21] fastreid.utils.events INFO:  eta: 0:10:29  epoch/iter: 22/1333  total_loss: 37.41  loss_cls_b1: 4.2  loss_cls_b2: 4.249  loss_cls_b21: 4.251  loss_cls_b22: 4.426  loss_cls_b3: 4.339  loss_cls_b31: 4.282  loss_cls_b32: 4.339  loss_cls_b33: 4.398  loss_triplet_b1: 0.6109  loss_triplet_b2: 0.5599  loss_triplet_b3: 0.5834  loss_triplet_b22: 0.6531  loss_triplet_b33: 0.7064  time: 0.9154  data_time: 0.0008  lr: 2.44e-04  max_mem: 22746M
[05/30 17:37:37] fastreid.utils.events INFO:  eta: 0:10:09  epoch/iter: 23/1391  total_loss: 33.79  loss_cls_b1: 3.716  loss_cls_b2: 3.851  loss_cls_b21: 3.804  loss_cls_b22: 4.022  loss_cls_b3: 3.899  loss_cls_b31: 3.835  loss_cls_b32: 3.871  loss_cls_b33: 4.075  loss_triplet_b1: 0.5616  loss_triplet_b2: 0.5202  loss_triplet_b3: 0.5235  loss_triplet_b22: 0.596  loss_triplet_b33: 0.6456  time: 0.8893  data_time: 0.0004  lr: 2.53e-04  max_mem: 22746M
[05/30 17:37:40] fastreid.utils.events INFO:  eta: 0:10:06  epoch/iter: 24/1399  total_loss: 33.41  loss_cls_b1: 3.636  loss_cls_b2: 3.783  loss_cls_b21: 3.747  loss_cls_b22: 3.962  loss_cls_b3: 3.789  loss_cls_b31: 3.808  loss_cls_b32: 3.834  loss_cls_b33: 4.043  loss_triplet_b1: 0.5515  loss_triplet_b2: 0.5164  loss_triplet_b3: 0.5201  loss_triplet_b22: 0.5872  loss_triplet_b33: 0.6312  time: 0.8858  data_time: 0.0005  lr: 2.54e-04  max_mem: 22746M
[05/30 17:37:54] fastreid.utils.events INFO:  eta: 0:09:50  epoch/iter: 24/1449  total_loss: 30.25  loss_cls_b1: 3.246  loss_cls_b2: 3.396  loss_cls_b21: 3.437  loss_cls_b22: 3.588  loss_cls_b3: 3.396  loss_cls_b31: 3.45  loss_cls_b32: 3.537  loss_cls_b33: 3.598  loss_triplet_b1: 0.4657  loss_triplet_b2: 0.4577  loss_triplet_b3: 0.4507  loss_triplet_b22: 0.5264  loss_triplet_b33: 0.5538  time: 0.8653  data_time: 0.0006  lr: 2.62e-04  max_mem: 22746M
[05/30 17:38:11] fastreid.utils.events INFO:  eta: 0:09:32  epoch/iter: 25/1507  total_loss: 28.04  loss_cls_b1: 3.005  loss_cls_b2: 3.114  loss_cls_b21: 3.19  loss_cls_b22: 3.35  loss_cls_b3: 3.13  loss_cls_b31: 3.229  loss_cls_b32: 3.35  loss_cls_b33: 3.431  loss_triplet_b1: 0.4271  loss_triplet_b2: 0.4267  loss_triplet_b3: 0.4206  loss_triplet_b22: 0.4715  loss_triplet_b33: 0.4937  time: 0.8431  data_time: 0.0008  lr: 2.71e-04  max_mem: 22746M
[05/30 17:38:28] fastreid.utils.events INFO:  eta: 0:09:13  epoch/iter: 26/1565  total_loss: 25.52  loss_cls_b1: 2.753  loss_cls_b2: 2.849  loss_cls_b21: 2.91  loss_cls_b22: 3.078  loss_cls_b3: 2.888  loss_cls_b31: 2.993  loss_cls_b32: 3.025  loss_cls_b33: 3.256  loss_triplet_b1: 0.3934  loss_triplet_b2: 0.3851  loss_triplet_b3: 0.3913  loss_triplet_b22: 0.4095  loss_triplet_b33: 0.4371  time: 0.8225  data_time: 0.0006  lr: 2.81e-04  max_mem: 22746M
[05/30 17:38:38] fastreid.utils.events INFO:  eta: 0:09:03  epoch/iter: 27/1599  total_loss: 24.8  loss_cls_b1: 2.555  loss_cls_b2: 2.69  loss_cls_b21: 2.753  loss_cls_b22: 2.912  loss_cls_b3: 2.7  loss_cls_b31: 2.796  loss_cls_b32: 2.931  loss_cls_b33: 3.077  loss_triplet_b1: 0.3652  loss_triplet_b2: 0.3682  loss_triplet_b3: 0.3637  loss_triplet_b22: 0.3848  loss_triplet_b33: 0.3996  time: 0.8112  data_time: 0.0006  lr: 2.86e-04  max_mem: 22746M
[05/30 17:38:45] fastreid.utils.events INFO:  eta: 0:08:55  epoch/iter: 27/1623  total_loss: 23.35  loss_cls_b1: 2.443  loss_cls_b2: 2.57  loss_cls_b21: 2.634  loss_cls_b22: 2.831  loss_cls_b3: 2.582  loss_cls_b31: 2.726  loss_cls_b32: 2.848  loss_cls_b33: 2.94  loss_triplet_b1: 0.3474  loss_triplet_b2: 0.3536  loss_triplet_b3: 0.3503  loss_triplet_b22: 0.3716  loss_triplet_b33: 0.3832  time: 0.8035  data_time: 0.0005  lr: 2.90e-04  max_mem: 22746M
[05/30 17:39:02] fastreid.utils.events INFO:  eta: 0:08:38  epoch/iter: 28/1681  total_loss: 21.81  loss_cls_b1: 2.27  loss_cls_b2: 2.393  loss_cls_b21: 2.469  loss_cls_b22: 2.669  loss_cls_b3: 2.391  loss_cls_b31: 2.575  loss_cls_b32: 2.709  loss_cls_b33: 2.767  loss_triplet_b1: 0.3183  loss_triplet_b2: 0.3212  loss_triplet_b3: 0.3182  loss_triplet_b22: 0.3412  loss_triplet_b33: 0.3701  time: 0.7858  data_time: 0.0005  lr: 2.99e-04  max_mem: 22746M
[05/30 17:39:19] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:39:19] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[05/30 17:39:19] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[05/30 17:39:22] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.2391 s / batch. ETA=0:00:06
[05/30 17:39:28] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.914035 (0.223033 s / batch per device, on 1 devices)
[05/30 17:39:28] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.221823 s / batch per device, on 1 devices)
[05/30 17:39:28] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[05/30 17:39:28] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 77.56    | 90.47    | 92.52     | 57.96 | 16.78  | 67.76    |[0m
[05/30 17:39:29] fastreid.utils.events INFO:  eta: 0:08:21  epoch/iter: 29/1739  total_loss: 20.29  loss_cls_b1: 2.072  loss_cls_b2: 2.184  loss_cls_b21: 2.343  loss_cls_b22: 2.499  loss_cls_b3: 2.224  loss_cls_b31: 2.425  loss_cls_b32: 2.526  loss_cls_b33: 2.664  loss_triplet_b1: 0.2749  loss_triplet_b2: 0.2572  loss_triplet_b3: 0.2647  loss_triplet_b22: 0.2791  loss_triplet_b33: 0.3037  time: 0.7692  data_time: 0.0006  lr: 3.08e-04  max_mem: 22746M
[05/30 17:39:45] fastreid.utils.events INFO:  eta: 0:08:05  epoch/iter: 30/1797  total_loss: 19.2  loss_cls_b1: 1.936  loss_cls_b2: 2.091  loss_cls_b21: 2.231  loss_cls_b22: 2.351  loss_cls_b3: 2.136  loss_cls_b31: 2.354  loss_cls_b32: 2.414  loss_cls_b33: 2.548  loss_triplet_b1: 0.2514  loss_triplet_b2: 0.2452  loss_triplet_b3: 0.2517  loss_triplet_b22: 0.2564  loss_triplet_b33: 0.2761  time: 0.7538  data_time: 0.0005  lr: 3.17e-04  max_mem: 22746M
[05/30 17:39:46] fastreid.utils.events INFO:  eta: 0:08:04  epoch/iter: 31/1799  total_loss: 19.2  loss_cls_b1: 1.936  loss_cls_b2: 2.095  loss_cls_b21: 2.231  loss_cls_b22: 2.354  loss_cls_b3: 2.136  loss_cls_b31: 2.354  loss_cls_b32: 2.414  loss_cls_b33: 2.548  loss_triplet_b1: 0.2506  loss_triplet_b2: 0.2373  loss_triplet_b3: 0.2499  loss_triplet_b22: 0.25  loss_triplet_b33: 0.2687  time: 0.7533  data_time: 0.0005  lr: 3.17e-04  max_mem: 22746M
[05/30 17:40:02] fastreid.utils.events INFO:  eta: 0:07:49  epoch/iter: 31/1855  total_loss: 18.35  loss_cls_b1: 1.875  loss_cls_b2: 1.95  loss_cls_b21: 2.113  loss_cls_b22: 2.242  loss_cls_b3: 2  loss_cls_b31: 2.202  loss_cls_b32: 2.258  loss_cls_b33: 2.394  loss_triplet_b1: 0.2255  loss_triplet_b2: 0.2116  loss_triplet_b3: 0.2258  loss_triplet_b22: 0.2239  loss_triplet_b33: 0.2314  time: 0.7392  data_time: 0.0005  lr: 3.26e-04  max_mem: 22746M
[05/30 17:40:19] fastreid.utils.events INFO:  eta: 0:07:32  epoch/iter: 32/1913  total_loss: 17.93  loss_cls_b1: 1.828  loss_cls_b2: 1.893  loss_cls_b21: 2.019  loss_cls_b22: 2.192  loss_cls_b3: 1.904  loss_cls_b31: 2.166  loss_cls_b32: 2.221  loss_cls_b33: 2.374  loss_triplet_b1: 0.2017  loss_triplet_b2: 0.206  loss_triplet_b3: 0.2082  loss_triplet_b22: 0.2165  loss_triplet_b33: 0.2171  time: 0.7255  data_time: 0.0007  lr: 3.35e-04  max_mem: 22746M
[05/30 17:40:36] fastreid.utils.events INFO:  eta: 0:07:16  epoch/iter: 33/1971  total_loss: 17.03  loss_cls_b1: 1.681  loss_cls_b2: 1.812  loss_cls_b21: 1.935  loss_cls_b22: 2.133  loss_cls_b3: 1.809  loss_cls_b31: 2.075  loss_cls_b32: 2.131  loss_cls_b33: 2.32  loss_triplet_b1: 0.1959  loss_triplet_b2: 0.2056  loss_triplet_b3: 0.1964  loss_triplet_b22: 0.2095  loss_triplet_b33: 0.207  time: 0.7127  data_time: 0.0005  lr: 3.44e-04  max_mem: 22746M
[05/30 17:40:44] fastreid.utils.events INFO:  eta: 0:07:08  epoch/iter: 34/1999  total_loss: 16.74  loss_cls_b1: 1.649  loss_cls_b2: 1.782  loss_cls_b21: 1.918  loss_cls_b22: 2.081  loss_cls_b3: 1.758  loss_cls_b31: 2.037  loss_cls_b32: 2.091  loss_cls_b33: 2.273  loss_triplet_b1: 0.1948  loss_triplet_b2: 0.1999  loss_triplet_b3: 0.1927  loss_triplet_b22: 0.2  loss_triplet_b33: 0.1949  time: 0.7068  data_time: 0.0007  lr: 3.49e-04  max_mem: 22746M
[05/30 17:40:53] fastreid.utils.events INFO:  eta: 0:06:59  epoch/iter: 34/2029  total_loss: 16.49  loss_cls_b1: 1.585  loss_cls_b2: 1.699  loss_cls_b21: 1.867  loss_cls_b22: 2.007  loss_cls_b3: 1.727  loss_cls_b31: 2.015  loss_cls_b32: 2.062  loss_cls_b33: 2.182  loss_triplet_b1: 0.191  loss_triplet_b2: 0.1987  loss_triplet_b3: 0.1964  loss_triplet_b22: 0.2012  loss_triplet_b33: 0.2029  time: 0.7006  data_time: 0.0005  lr: 3.49e-04  max_mem: 22746M
[05/30 17:41:10] fastreid.utils.events INFO:  eta: 0:06:42  epoch/iter: 35/2087  total_loss: 15.59  loss_cls_b1: 1.563  loss_cls_b2: 1.616  loss_cls_b21: 1.806  loss_cls_b22: 1.97  loss_cls_b3: 1.674  loss_cls_b31: 1.973  loss_cls_b32: 1.993  loss_cls_b33: 2.145  loss_triplet_b1: 0.1785  loss_triplet_b2: 0.1901  loss_triplet_b3: 0.1851  loss_triplet_b22: 0.1872  loss_triplet_b33: 0.1859  time: 0.6891  data_time: 0.0007  lr: 3.48e-04  max_mem: 22746M
[05/30 17:41:26] fastreid.utils.events INFO:  eta: 0:06:25  epoch/iter: 36/2145  total_loss: 14.72  loss_cls_b1: 1.5  loss_cls_b2: 1.516  loss_cls_b21: 1.724  loss_cls_b22: 1.824  loss_cls_b3: 1.548  loss_cls_b31: 1.826  loss_cls_b32: 1.901  loss_cls_b33: 2.033  loss_triplet_b1: 0.162  loss_triplet_b2: 0.1497  loss_triplet_b3: 0.1706  loss_triplet_b22: 0.1503  loss_triplet_b33: 0.1663  time: 0.6782  data_time: 0.0005  lr: 3.44e-04  max_mem: 22746M
[05/30 17:41:42] fastreid.utils.events INFO:  eta: 0:06:09  epoch/iter: 37/2199  total_loss: 14.05  loss_cls_b1: 1.411  loss_cls_b2: 1.458  loss_cls_b21: 1.659  loss_cls_b22: 1.751  loss_cls_b3: 1.491  loss_cls_b31: 1.785  loss_cls_b32: 1.829  loss_cls_b33: 1.949  loss_triplet_b1: 0.1409  loss_triplet_b2: 0.1396  loss_triplet_b3: 0.1558  loss_triplet_b22: 0.1402  loss_triplet_b33: 0.1487  time: 0.6687  data_time: 0.0005  lr: 3.37e-04  max_mem: 22746M
[05/30 17:41:44] fastreid.utils.events INFO:  eta: 0:06:08  epoch/iter: 37/2203  total_loss: 13.98  loss_cls_b1: 1.409  loss_cls_b2: 1.454  loss_cls_b21: 1.654  loss_cls_b22: 1.741  loss_cls_b3: 1.476  loss_cls_b31: 1.779  loss_cls_b32: 1.824  loss_cls_b33: 1.939  loss_triplet_b1: 0.1435  loss_triplet_b2: 0.1396  loss_triplet_b3: 0.1558  loss_triplet_b22: 0.138  loss_triplet_b33: 0.1487  time: 0.6680  data_time: 0.0007  lr: 3.37e-04  max_mem: 22746M
[05/30 17:42:00] fastreid.utils.events INFO:  eta: 0:05:51  epoch/iter: 38/2261  total_loss: 13.67  loss_cls_b1: 1.377  loss_cls_b2: 1.396  loss_cls_b21: 1.585  loss_cls_b22: 1.703  loss_cls_b3: 1.41  loss_cls_b31: 1.713  loss_cls_b32: 1.79  loss_cls_b33: 1.908  loss_triplet_b1: 0.1236  loss_triplet_b2: 0.1304  loss_triplet_b3: 0.1385  loss_triplet_b22: 0.1268  loss_triplet_b33: 0.1414  time: 0.6582  data_time: 0.0006  lr: 3.28e-04  max_mem: 22746M
[05/30 17:42:17] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:42:17] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[05/30 17:42:17] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[05/30 17:42:21] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.2410 s / batch. ETA=0:00:06
[05/30 17:42:26] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.906584 (0.222793 s / batch per device, on 1 devices)
[05/30 17:42:26] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.221574 s / batch per device, on 1 devices)
[05/30 17:42:27] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[05/30 17:42:27] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 81.06    | 92.16    | 94.09     | 66.39 | 21.33  | 73.72    |[0m
[05/30 17:42:27] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[05/30 17:42:33] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_0039.pth
[05/30 17:42:35] fastreid.utils.events INFO:  eta: 0:05:34  epoch/iter: 39/2319  total_loss: 12.77  loss_cls_b1: 1.226  loss_cls_b2: 1.305  loss_cls_b21: 1.498  loss_cls_b22: 1.617  loss_cls_b3: 1.337  loss_cls_b31: 1.632  loss_cls_b32: 1.716  loss_cls_b33: 1.765  loss_triplet_b1: 0.1086  loss_triplet_b2: 0.1026  loss_triplet_b3: 0.1072  loss_triplet_b22: 0.1069  loss_triplet_b33: 0.1097  time: 0.6490  data_time: 0.0006  lr: 3.16e-04  max_mem: 22746M
[05/30 17:42:52] fastreid.utils.events INFO:  eta: 0:05:17  epoch/iter: 40/2377  total_loss: 11.68  loss_cls_b1: 1.137  loss_cls_b2: 1.183  loss_cls_b21: 1.396  loss_cls_b22: 1.511  loss_cls_b3: 1.227  loss_cls_b31: 1.479  loss_cls_b32: 1.621  loss_cls_b33: 1.721  loss_triplet_b1: 0.09431  loss_triplet_b2: 0.08527  loss_triplet_b3: 0.0937  loss_triplet_b22: 0.08894  loss_triplet_b33: 0.0883  time: 0.6403  data_time: 0.0005  lr: 3.02e-04  max_mem: 22746M
[05/30 17:42:58] fastreid.utils.events INFO:  eta: 0:05:11  epoch/iter: 41/2399  total_loss: 11.52  loss_cls_b1: 1.125  loss_cls_b2: 1.158  loss_cls_b21: 1.378  loss_cls_b22: 1.487  loss_cls_b3: 1.209  loss_cls_b31: 1.469  loss_cls_b32: 1.572  loss_cls_b33: 1.721  loss_triplet_b1: 0.08639  loss_triplet_b2: 0.08205  loss_triplet_b3: 0.09046  loss_triplet_b22: 0.07823  loss_triplet_b33: 0.08518  time: 0.6371  data_time: 0.0005  lr: 2.86e-04  max_mem: 22746M
[05/30 17:43:09] fastreid.utils.events INFO:  eta: 0:05:01  epoch/iter: 41/2435  total_loss: 11.13  loss_cls_b1: 1.079  loss_cls_b2: 1.104  loss_cls_b21: 1.335  loss_cls_b22: 1.427  loss_cls_b3: 1.164  loss_cls_b31: 1.413  loss_cls_b32: 1.538  loss_cls_b33: 1.655  loss_triplet_b1: 0.07597  loss_triplet_b2: 0.0726  loss_triplet_b3: 0.08259  loss_triplet_b22: 0.07493  loss_triplet_b33: 0.08316  time: 0.6321  data_time: 0.0007  lr: 2.86e-04  max_mem: 22746M
[05/30 17:43:26] fastreid.utils.events INFO:  eta: 0:04:44  epoch/iter: 42/2493  total_loss: 10.67  loss_cls_b1: 1.014  loss_cls_b2: 1.058  loss_cls_b21: 1.249  loss_cls_b22: 1.364  loss_cls_b3: 1.114  loss_cls_b31: 1.346  loss_cls_b32: 1.45  loss_cls_b33: 1.58  loss_triplet_b1: 0.07048  loss_triplet_b2: 0.06655  loss_triplet_b3: 0.0747  loss_triplet_b22: 0.06239  loss_triplet_b33: 0.07265  time: 0.6241  data_time: 0.0005  lr: 2.68e-04  max_mem: 22746M
[05/30 17:43:43] fastreid.utils.events INFO:  eta: 0:04:27  epoch/iter: 43/2551  total_loss: 9.826  loss_cls_b1: 0.9446  loss_cls_b2: 0.9803  loss_cls_b21: 1.153  loss_cls_b22: 1.292  loss_cls_b3: 1.023  loss_cls_b31: 1.246  loss_cls_b32: 1.353  loss_cls_b33: 1.471  loss_triplet_b1: 0.05975  loss_triplet_b2: 0.06018  loss_triplet_b3: 0.06591  loss_triplet_b22: 0.0551  loss_triplet_b33: 0.05078  time: 0.6165  data_time: 0.0006  lr: 2.49e-04  max_mem: 22746M
[05/30 17:43:57] fastreid.utils.events INFO:  eta: 0:04:13  epoch/iter: 44/2599  total_loss: 9.373  loss_cls_b1: 0.8831  loss_cls_b2: 0.9355  loss_cls_b21: 1.103  loss_cls_b22: 1.235  loss_cls_b3: 0.9667  loss_cls_b31: 1.195  loss_cls_b32: 1.316  loss_cls_b33: 1.397  loss_triplet_b1: 0.0507  loss_triplet_b2: 0.05512  loss_triplet_b3: 0.05884  loss_triplet_b22: 0.04504  loss_triplet_b33: 0.0473  time: 0.6104  data_time: 0.0008  lr: 2.29e-04  max_mem: 22746M
[05/30 17:44:00] fastreid.utils.events INFO:  eta: 0:04:10  epoch/iter: 44/2609  total_loss: 9.268  loss_cls_b1: 0.879  loss_cls_b2: 0.9278  loss_cls_b21: 1.084  loss_cls_b22: 1.225  loss_cls_b3: 0.9658  loss_cls_b31: 1.18  loss_cls_b32: 1.314  loss_cls_b33: 1.392  loss_triplet_b1: 0.04968  loss_triplet_b2: 0.05408  loss_triplet_b3: 0.0577  loss_triplet_b22: 0.04476  loss_triplet_b33: 0.0473  time: 0.6092  data_time: 0.0006  lr: 2.29e-04  max_mem: 22746M
[05/30 17:44:17] fastreid.utils.events INFO:  eta: 0:03:54  epoch/iter: 45/2667  total_loss: 8.847  loss_cls_b1: 0.8394  loss_cls_b2: 0.8715  loss_cls_b21: 1.045  loss_cls_b22: 1.181  loss_cls_b3: 0.9242  loss_cls_b31: 1.131  loss_cls_b32: 1.27  loss_cls_b33: 1.349  loss_triplet_b1: 0.04241  loss_triplet_b2: 0.04666  loss_triplet_b3: 0.05431  loss_triplet_b22: 0.03937  loss_triplet_b33: 0.04199  time: 0.6022  data_time: 0.0006  lr: 2.08e-04  max_mem: 22746M
[05/30 17:44:34] fastreid.utils.events INFO:  eta: 0:03:37  epoch/iter: 46/2725  total_loss: 8.093  loss_cls_b1: 0.7327  loss_cls_b2: 0.7715  loss_cls_b21: 0.9559  loss_cls_b22: 1.079  loss_cls_b3: 0.8354  loss_cls_b31: 1.046  loss_cls_b32: 1.179  loss_cls_b33: 1.241  loss_triplet_b1: 0.03457  loss_triplet_b2: 0.03385  loss_triplet_b3: 0.04331  loss_triplet_b22: 0.02634  loss_triplet_b33: 0.03297  time: 0.5956  data_time: 0.0004  lr: 1.86e-04  max_mem: 22746M
[05/30 17:44:50] fastreid.utils.events INFO:  eta: 0:03:20  epoch/iter: 47/2783  total_loss: 7.152  loss_cls_b1: 0.6654  loss_cls_b2: 0.7115  loss_cls_b21: 0.9052  loss_cls_b22: 0.9696  loss_cls_b3: 0.7267  loss_cls_b31: 0.9693  loss_cls_b32: 1.124  loss_cls_b33: 1.122  loss_triplet_b1: 0.02851  loss_triplet_b2: 0.02619  loss_triplet_b3: 0.0325  loss_triplet_b22: 0.02142  loss_triplet_b33: 0.02181  time: 0.5892  data_time: 0.0005  lr: 1.64e-04  max_mem: 22746M
[05/30 17:44:55] fastreid.utils.events INFO:  eta: 0:03:16  epoch/iter: 48/2799  total_loss: 7.13  loss_cls_b1: 0.6569  loss_cls_b2: 0.7083  loss_cls_b21: 0.8881  loss_cls_b22: 0.9651  loss_cls_b3: 0.7231  loss_cls_b31: 0.9684  loss_cls_b32: 1.093  loss_cls_b33: 1.113  loss_triplet_b1: 0.02851  loss_triplet_b2: 0.02619  loss_triplet_b3: 0.03149  loss_triplet_b22: 0.02142  loss_triplet_b33: 0.02191  time: 0.5875  data_time: 0.0008  lr: 1.42e-04  max_mem: 22746M
[05/30 17:45:07] fastreid.utils.events INFO:  eta: 0:03:03  epoch/iter: 48/2841  total_loss: 6.964  loss_cls_b1: 0.6198  loss_cls_b2: 0.6638  loss_cls_b21: 0.8563  loss_cls_b22: 0.9015  loss_cls_b3: 0.7037  loss_cls_b31: 0.9452  loss_cls_b32: 1.049  loss_cls_b33: 1.069  loss_triplet_b1: 0.02156  loss_triplet_b2: 0.02373  loss_triplet_b3: 0.02668  loss_triplet_b22: 0.01861  loss_triplet_b33: 0.02034  time: 0.5830  data_time: 0.0007  lr: 1.42e-04  max_mem: 22746M
[05/30 17:45:24] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:45:24] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[05/30 17:45:24] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[05/30 17:45:28] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.2401 s / batch. ETA=0:00:06
[05/30 17:45:33] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.900926 (0.222611 s / batch per device, on 1 devices)
[05/30 17:45:33] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.221404 s / batch per device, on 1 devices)
[05/30 17:45:34] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[05/30 17:45:34] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 81.42    | 92.16    | 94.09     | 69.92 | 28.07  | 75.67    |[0m
[05/30 17:45:34] fastreid.utils.events INFO:  eta: 0:02:47  epoch/iter: 49/2899  total_loss: 6.386  loss_cls_b1: 0.5746  loss_cls_b2: 0.6099  loss_cls_b21: 0.7865  loss_cls_b22: 0.8504  loss_cls_b3: 0.6482  loss_cls_b31: 0.8656  loss_cls_b32: 0.9731  loss_cls_b33: 0.9864  loss_triplet_b1: 0.01828  loss_triplet_b2: 0.02058  loss_triplet_b3: 0.02321  loss_triplet_b22: 0.01492  loss_triplet_b33: 0.0158  time: 0.5771  data_time: 0.0006  lr: 1.21e-04  max_mem: 22746M
[05/30 17:45:50] fastreid.utils.events INFO:  eta: 0:02:30  epoch/iter: 50/2957  total_loss: 6.049  loss_cls_b1: 0.5547  loss_cls_b2: 0.5823  loss_cls_b21: 0.7267  loss_cls_b22: 0.7978  loss_cls_b3: 0.6049  loss_cls_b31: 0.8155  loss_cls_b32: 0.9019  loss_cls_b33: 0.9322  loss_triplet_b1: 0.01788  loss_triplet_b2: 0.01867  loss_triplet_b3: 0.02244  loss_triplet_b22: 0.01307  loss_triplet_b33: 0.01422  time: 0.5715  data_time: 0.0005  lr: 1.01e-04  max_mem: 22746M
[05/30 17:46:03] fastreid.utils.events INFO:  eta: 0:02:18  epoch/iter: 51/2999  total_loss: 5.95  loss_cls_b1: 0.5373  loss_cls_b2: 0.575  loss_cls_b21: 0.7097  loss_cls_b22: 0.7884  loss_cls_b3: 0.5784  loss_cls_b31: 0.7864  loss_cls_b32: 0.8864  loss_cls_b33: 0.8927  loss_triplet_b1: 0.01701  loss_triplet_b2: 0.01833  loss_triplet_b3: 0.02234  loss_triplet_b22: 0.01249  loss_triplet_b33: 0.01384  time: 0.5676  data_time: 0.0004  lr: 8.15e-05  max_mem: 22746M
[05/30 17:46:08] fastreid.utils.events INFO:  eta: 0:02:13  epoch/iter: 51/3015  total_loss: 5.948  loss_cls_b1: 0.5429  loss_cls_b2: 0.5763  loss_cls_b21: 0.7085  loss_cls_b22: 0.7833  loss_cls_b3: 0.578  loss_cls_b31: 0.7809  loss_cls_b32: 0.8864  loss_cls_b33: 0.8859  loss_triplet_b1: 0.01668  loss_triplet_b2: 0.01821  loss_triplet_b3: 0.02176  loss_triplet_b22: 0.01187  loss_triplet_b33: 0.01216  time: 0.5661  data_time: 0.0007  lr: 8.15e-05  max_mem: 22746M
[05/30 17:46:25] fastreid.utils.events INFO:  eta: 0:01:57  epoch/iter: 52/3073  total_loss: 5.791  loss_cls_b1: 0.5239  loss_cls_b2: 0.5689  loss_cls_b21: 0.6955  loss_cls_b22: 0.7703  loss_cls_b3: 0.5781  loss_cls_b31: 0.7713  loss_cls_b32: 0.8746  loss_cls_b33: 0.8795  loss_triplet_b1: 0.01634  loss_triplet_b2: 0.01727  loss_triplet_b3: 0.01936  loss_triplet_b22: 0.01053  loss_triplet_b33: 0.01026  time: 0.5609  data_time: 0.0005  lr: 6.39e-05  max_mem: 22746M
[05/30 17:46:41] fastreid.utils.events INFO:  eta: 0:01:40  epoch/iter: 53/3131  total_loss: 5.549  loss_cls_b1: 0.4843  loss_cls_b2: 0.5247  loss_cls_b21: 0.6558  loss_cls_b22: 0.7477  loss_cls_b3: 0.5451  loss_cls_b31: 0.7327  loss_cls_b32: 0.846  loss_cls_b33: 0.817  loss_triplet_b1: 0.01242  loss_triplet_b2: 0.01334  loss_triplet_b3: 0.01551  loss_triplet_b22: 0.008616  loss_triplet_b33: 0.007874  time: 0.5559  data_time: 0.0006  lr: 4.79e-05  max_mem: 22746M
[05/30 17:46:58] fastreid.utils.events INFO:  eta: 0:01:23  epoch/iter: 54/3189  total_loss: 5.452  loss_cls_b1: 0.4922  loss_cls_b2: 0.5167  loss_cls_b21: 0.6643  loss_cls_b22: 0.7202  loss_cls_b3: 0.5466  loss_cls_b31: 0.7421  loss_cls_b32: 0.8463  loss_cls_b33: 0.8005  loss_triplet_b1: 0.01244  loss_triplet_b2: 0.01256  loss_triplet_b3: 0.01538  loss_triplet_b22: 0.008875  loss_triplet_b33: 0.007528  time: 0.5511  data_time: 0.0008  lr: 3.40e-05  max_mem: 22746M
[05/30 17:47:01] fastreid.utils.events INFO:  eta: 0:01:20  epoch/iter: 55/3199  total_loss: 5.414  loss_cls_b1: 0.4818  loss_cls_b2: 0.5155  loss_cls_b21: 0.6595  loss_cls_b22: 0.7176  loss_cls_b3: 0.545  loss_cls_b31: 0.7321  loss_cls_b32: 0.8461  loss_cls_b33: 0.796  loss_triplet_b1: 0.01231  loss_triplet_b2: 0.01238  loss_triplet_b3: 0.01493  loss_triplet_b22: 0.0087  loss_triplet_b33: 0.007934  time: 0.5502  data_time: 0.0006  lr: 2.22e-05  max_mem: 22746M
[05/30 17:47:15] fastreid.utils.events INFO:  eta: 0:01:07  epoch/iter: 55/3247  total_loss: 5.167  loss_cls_b1: 0.4542  loss_cls_b2: 0.4874  loss_cls_b21: 0.6419  loss_cls_b22: 0.6846  loss_cls_b3: 0.5151  loss_cls_b31: 0.6861  loss_cls_b32: 0.8189  loss_cls_b33: 0.7697  loss_triplet_b1: 0.01164  loss_triplet_b2: 0.01299  loss_triplet_b3: 0.01518  loss_triplet_b22: 0.008736  loss_triplet_b33: 0.008298  time: 0.5464  data_time: 0.0005  lr: 2.22e-05  max_mem: 22746M
[05/30 17:47:32] fastreid.utils.events INFO:  eta: 0:00:50  epoch/iter: 56/3305  total_loss: 5.071  loss_cls_b1: 0.4543  loss_cls_b2: 0.4726  loss_cls_b21: 0.6102  loss_cls_b22: 0.6463  loss_cls_b3: 0.5004  loss_cls_b31: 0.6791  loss_cls_b32: 0.7948  loss_cls_b33: 0.7453  loss_triplet_b1: 0.0138  loss_triplet_b2: 0.01555  loss_triplet_b3: 0.01655  loss_triplet_b22: 0.01041  loss_triplet_b33: 0.01164  time: 0.5418  data_time: 0.0006  lr: 1.29e-05  max_mem: 22746M
[05/30 17:47:49] fastreid.utils.events INFO:  eta: 0:00:33  epoch/iter: 57/3363  total_loss: 5.059  loss_cls_b1: 0.453  loss_cls_b2: 0.4743  loss_cls_b21: 0.6129  loss_cls_b22: 0.6516  loss_cls_b3: 0.5004  loss_cls_b31: 0.6784  loss_cls_b32: 0.8016  loss_cls_b33: 0.7391  loss_triplet_b1: 0.01169  loss_triplet_b2: 0.01378  loss_triplet_b3: 0.01433  loss_triplet_b22: 0.00905  loss_triplet_b33: 0.007228  time: 0.5374  data_time: 0.0006  lr: 6.17e-06  max_mem: 22746M
[05/30 17:47:59] fastreid.utils.events INFO:  eta: 0:00:23  epoch/iter: 58/3399  total_loss: 4.806  loss_cls_b1: 0.4174  loss_cls_b2: 0.4535  loss_cls_b21: 0.5879  loss_cls_b22: 0.6216  loss_cls_b3: 0.4664  loss_cls_b31: 0.6539  loss_cls_b32: 0.7601  loss_cls_b33: 0.7239  loss_triplet_b1: 0.01091  loss_triplet_b2: 0.01399  loss_triplet_b3: 0.01362  loss_triplet_b22: 0.00849  loss_triplet_b33: 0.007108  time: 0.5348  data_time: 0.0006  lr: 2.07e-06  max_mem: 22746M
[05/30 17:48:06] fastreid.utils.events INFO:  eta: 0:00:16  epoch/iter: 58/3421  total_loss: 4.938  loss_cls_b1: 0.4372  loss_cls_b2: 0.4726  loss_cls_b21: 0.5996  loss_cls_b22: 0.6524  loss_cls_b3: 0.4903  loss_cls_b31: 0.6701  loss_cls_b32: 0.7823  loss_cls_b33: 0.7435  loss_triplet_b1: 0.01097  loss_triplet_b2: 0.01397  loss_triplet_b3: 0.01362  loss_triplet_b22: 0.008066  loss_triplet_b33: 0.007427  time: 0.5332  data_time: 0.0005  lr: 2.07e-06  max_mem: 22746M
[05/30 17:48:23] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3479  total_loss: 4.798  loss_cls_b1: 0.417  loss_cls_b2: 0.4479  loss_cls_b21: 0.5829  loss_cls_b22: 0.6462  loss_cls_b3: 0.4759  loss_cls_b31: 0.6539  loss_cls_b32: 0.7536  loss_cls_b33: 0.7266  loss_triplet_b1: 0.008719  loss_triplet_b2: 0.01197  loss_triplet_b3: 0.0128  loss_triplet_b22: 0.006633  loss_triplet_b33: 0.006003  time: 0.5292  data_time: 0.0005  lr: 7.00e-07  max_mem: 22746M
[05/30 17:48:23] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:48:23] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[05/30 17:48:23] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[05/30 17:48:26] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.2372 s / batch. ETA=0:00:05
[05/30 17:48:32] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.887198 (0.222168 s / batch per device, on 1 devices)
[05/30 17:48:32] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.220949 s / batch per device, on 1 devices)
[05/30 17:48:32] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[05/30 17:48:32] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 81.06    | 92.64    | 94.09     | 70.73 | 29.88  | 75.90    |[0m
[05/30 17:48:32] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[05/30 17:48:38] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_final.pth
[05/30 17:48:40] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3479  total_loss: 4.798  loss_cls_b1: 0.417  loss_cls_b2: 0.4479  loss_cls_b21: 0.5829  loss_cls_b22: 0.6462  loss_cls_b3: 0.4759  loss_cls_b31: 0.6539  loss_cls_b32: 0.7536  loss_cls_b33: 0.7266  loss_triplet_b1: 0.008719  loss_triplet_b2: 0.01197  loss_triplet_b3: 0.0128  loss_triplet_b22: 0.006633  loss_triplet_b33: 0.006003  time: 0.5292  data_time: 0.0005  lr: 7.00e-07  max_mem: 22746M
[05/30 17:48:40] fastreid.engine.hooks INFO: Overall training speed: 3478 iterations in 0:30:40 (0.5292 s / it)
[05/30 17:48:40] fastreid.engine.hooks INFO: Total training time: 0:32:16 (0:01:36 on hooks)
[06/12 15:33:38] fastreid INFO: Rank of current process: 0. World size: 1
[06/12 15:33:39] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/12 15:33:39] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit6/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', 'cuda:1'], resume=False)
[06/12 15:33:39] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/12 15:33:39] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit6/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/12 15:33:39] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/12 15:33:39] fastreid.utils.env INFO: Using a generated random seed 41396370
[06/12 15:33:46] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/12 15:33:46] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit6/mgn_R50-ibn/model_best.pth
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (285, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:33:49] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb21_head.weight[0m
  [34mb1_head.weight[0m
  [34mb2_head.weight[0m
  [34mb22_head.weight[0m
  [34mb33_head.weight[0m
  [34mb32_head.weight[0m
  [34mb31_head.weight[0m
  [34mb3_head.weight[0m
[06/12 15:33:49] fastreid.engine.defaults INFO: Prepare testing set
[06/12 15:33:49] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/12 15:33:50] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/12 15:34:00] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.0364 s / batch. ETA=0:00:03
[06/12 15:34:03] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:03.741609 (0.120697 s / batch per device, on 1 devices)
[06/12 15:34:03] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:00 (0.024898 s / batch per device, on 1 devices)
[06/12 15:34:03] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[06/12 15:34:03] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 81.06    | 92.64    | 94.09     | 70.73 | 29.88  | 75.90    |[0m
[06/12 15:34:23] fastreid INFO: Rank of current process: 0. World size: 1
[06/12 15:34:23] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/12 15:34:23] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', 'cuda:1'], resume=False)
[06/12 15:34:23] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/12 15:34:23] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/12 15:34:23] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/12 15:34:23] fastreid.utils.env INFO: Using a generated random seed 25710615
[06/12 15:34:30] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/12 15:34:30] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/12 15:34:30] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb32_head.weight[0m
  [34mb2_head.weight[0m
  [34mb21_head.weight[0m
  [34mb31_head.weight[0m
  [34mb3_head.weight[0m
  [34mb1_head.weight[0m
  [34mb22_head.weight[0m
  [34mb33_head.weight[0m
[06/12 15:34:30] fastreid.engine.defaults INFO: Prepare testing set
[06/12 15:34:30] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/12 15:34:31] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/12 15:34:39] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.0469 s / batch. ETA=0:00:03
[06/12 15:34:43] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:03.879012 (0.125129 s / batch per device, on 1 devices)
[06/12 15:34:43] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:00 (0.031845 s / batch per device, on 1 devices)
[06/12 15:34:43] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[06/12 15:34:43] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 67.55    | 84.08    | 86.97     | 39.26 | 7.18   | 53.41    |[0m
[06/13 16:21:03] fastreid INFO: Rank of current process: 0. World size: 1
[06/13 16:21:05] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/13 16:21:05] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/13 16:21:05] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/13 16:21:05] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/13 16:21:05] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/13 16:21:05] fastreid.utils.env INFO: Using a generated random seed 7991363
[06/13 16:21:13] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/13 16:21:13] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:21:15] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb2_head.weight[0m
  [34mb31_head.weight[0m
  [34mb32_head.weight[0m
  [34mb21_head.weight[0m
  [34mb33_head.weight[0m
  [34mb1_head.weight[0m
  [34mb3_head.weight[0m
  [34mb22_head.weight[0m
[06/13 16:21:15] fastreid.engine.defaults INFO: Prepare testing set
[06/13 16:21:15] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/13 16:21:16] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/13 16:21:28] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.4820 s / batch. ETA=0:00:12
[06/13 16:21:41] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:16.182537 (0.522017 s / batch per device, on 1 devices)
[06/13 16:21:41] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:16 (0.519709 s / batch per device, on 1 devices)
[06/13 16:21:42] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[06/13 16:21:42] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 67.55    | 84.08    | 86.97     | 39.26 | 7.18   | 53.41    |[0m
[06/13 16:23:41] fastreid INFO: Rank of current process: 0. World size: 1
[06/13 16:23:43] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/13 16:23:43] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/13 16:23:43] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/13 16:23:43] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/13 16:23:43] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/13 16:23:43] fastreid.utils.env INFO: Using a generated random seed 46191020
[06/13 16:23:51] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/13 16:23:51] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:23:53] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb2_head.weight[0m
  [34mb31_head.weight[0m
  [34mb32_head.weight[0m
  [34mb1_head.weight[0m
  [34mb22_head.weight[0m
  [34mb21_head.weight[0m
  [34mb33_head.weight[0m
  [34mb3_head.weight[0m
[06/13 16:23:53] fastreid.engine.defaults INFO: Prepare testing set
[06/13 16:23:53] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/13 16:25:35] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/13 16:28:11] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.3109 s / batch. ETA=0:00:07
[06/13 16:28:19] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:09.214535 (0.297243 s / batch per device, on 1 devices)
[06/13 16:28:19] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:09 (0.295237 s / batch per device, on 1 devices)
[06/13 16:34:19] fastreid INFO: Rank of current process: 0. World size: 1
[06/13 16:34:20] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/13 16:34:20] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/13 16:34:20] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/13 16:34:20] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/13 16:34:20] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/13 16:34:20] fastreid.utils.env INFO: Using a generated random seed 23788205
[06/13 16:34:30] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/13 16:34:30] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:34:31] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb22_head.weight[0m
  [34mb2_head.weight[0m
  [34mb31_head.weight[0m
  [34mb21_head.weight[0m
  [34mb3_head.weight[0m
  [34mb1_head.weight[0m
  [34mb32_head.weight[0m
  [34mb33_head.weight[0m
[06/13 16:34:31] fastreid.engine.defaults INFO: Prepare testing set
[06/13 16:34:31] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/13 16:35:33] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/13 16:35:46] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.5503 s / batch. ETA=0:00:13
[06/13 16:35:58] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:16.105158 (0.519521 s / batch per device, on 1 devices)
[06/13 16:35:58] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:16 (0.517331 s / batch per device, on 1 devices)
[06/13 16:47:08] fastreid INFO: Rank of current process: 0. World size: 1
[06/13 16:47:10] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/13 16:47:10] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/13 16:47:10] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/13 16:47:10] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/13 16:47:10] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/13 16:47:10] fastreid.utils.env INFO: Using a generated random seed 13288597
[06/13 16:47:19] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/13 16:47:19] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 16:47:21] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb33_head.weight[0m
  [34mb22_head.weight[0m
  [34mb31_head.weight[0m
  [34mb1_head.weight[0m
  [34mb21_head.weight[0m
  [34mb2_head.weight[0m
  [34mb32_head.weight[0m
  [34mb3_head.weight[0m
[06/13 16:47:21] fastreid.engine.defaults INFO: Prepare testing set
[06/13 16:47:21] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/13 16:47:25] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/13 16:47:37] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.5202 s / batch. ETA=0:00:13
[06/13 16:47:50] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:15.883863 (0.512383 s / batch per device, on 1 devices)
[06/13 16:47:50] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.510039 s / batch per device, on 1 devices)
[06/13 17:02:12] fastreid INFO: Rank of current process: 0. World size: 1
[06/13 17:02:14] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/13 17:02:14] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/13 17:02:14] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/13 17:02:14] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/13 17:02:14] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/13 17:02:14] fastreid.utils.env INFO: Using a generated random seed 17440848
[06/13 17:02:21] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/13 17:02:21] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (98, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/13 17:02:22] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb32_head.weight[0m
  [34mb1_head.weight[0m
  [34mb2_head.weight[0m
  [34mb31_head.weight[0m
  [34mb22_head.weight[0m
  [34mb3_head.weight[0m
  [34mb21_head.weight[0m
  [34mb33_head.weight[0m
[06/13 17:02:22] fastreid.engine.defaults INFO: Prepare testing set
[06/13 17:02:22] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 833        | 1           |
| gallery  | 286     | 3710       | 1           |[0m
[06/13 17:02:27] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[06/13 17:02:36] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.1836 s / batch. ETA=0:00:04
[06/13 17:02:40] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:05.273935 (0.170127 s / batch per device, on 1 devices)
[06/13 17:02:40] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:05 (0.165903 s / batch per device, on 1 devices)
[06/14 16:20:43] fastreid INFO: Rank of current process: 0. World size: 1
[06/14 16:20:45] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/14 16:20:45] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/14 16:20:45] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/14 16:20:45] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/14 16:20:45] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/14 16:20:45] fastreid.utils.env INFO: Using a generated random seed 46451362
[06/14 16:22:39] fastreid INFO: Rank of current process: 0. World size: 1
[06/14 16:22:41] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/14 16:22:41] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit7/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/14 16:22:41] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[06/14 16:22:41] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit7/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/14 16:22:41] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[06/14 16:22:41] fastreid.utils.env INFO: Using a generated random seed 41896783
[12/27 00:32:53] fastreid INFO: Rank of current process: 0. World size: 1
[12/27 00:32:54] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/27 00:32:54] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', 'cuda:2'], resume=False)
[12/27 00:32:54] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[12/27 00:32:54] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:2
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/27 00:32:54] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit6/mgn_R50-ibn/config.yaml
[12/27 00:32:54] fastreid.utils.env INFO: Using a generated random seed 55174420
[12/27 00:32:54] fastreid.engine.defaults INFO: Prepare training set
[12/27 00:32:54] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3728       | 1           |[0m
[12/27 00:32:54] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/27 00:32:55] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[12/27 00:32:56] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[12/27 00:32:58] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[12/27 00:33:12] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:2', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[12/27 00:33:25] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[12/27 00:33:25] fastreid.engine.train_loop INFO: Starting training from epoch 0
[12/27 00:33:25] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[12/27 00:33:59] fastreid.utils.events INFO:  eta: 0:27:36  epoch/iter: 0/57  total_loss: 58.41  loss_cls_b1: 6.285  loss_cls_b2: 6.223  loss_cls_b21: 6.21  loss_cls_b22: 6.234  loss_cls_b3: 6.258  loss_cls_b31: 6.198  loss_cls_b32: 6.258  loss_cls_b33: 6.198  loss_triplet_b1: 1.579  loss_triplet_b2: 1.577  loss_triplet_b3: 1.545  loss_triplet_b22: 1.856  loss_triplet_b33: 2.097  time: 0.5166  data_time: 0.0008  lr: 4.33e-05  max_mem: 72M
[12/27 00:34:29] fastreid.utils.events INFO:  eta: 0:27:29  epoch/iter: 1/115  total_loss: 58.58  loss_cls_b1: 6.208  loss_cls_b2: 6.235  loss_cls_b21: 6.215  loss_cls_b22: 6.243  loss_cls_b3: 6.26  loss_cls_b31: 6.225  loss_cls_b32: 6.234  loss_cls_b33: 6.231  loss_triplet_b1: 1.587  loss_triplet_b2: 1.59  loss_triplet_b3: 1.547  loss_triplet_b22: 1.856  loss_triplet_b33: 2.122  time: 0.5162  data_time: 0.0014  lr: 5.25e-05  max_mem: 72M
[12/27 00:34:58] fastreid.utils.events INFO:  eta: 0:26:54  epoch/iter: 2/173  total_loss: 58.54  loss_cls_b1: 6.195  loss_cls_b2: 6.218  loss_cls_b21: 6.216  loss_cls_b22: 6.233  loss_cls_b3: 6.249  loss_cls_b31: 6.188  loss_cls_b32: 6.224  loss_cls_b33: 6.227  loss_triplet_b1: 1.588  loss_triplet_b2: 1.579  loss_triplet_b3: 1.56  loss_triplet_b22: 1.857  loss_triplet_b33: 2.115  time: 0.5089  data_time: 0.0010  lr: 6.15e-05  max_mem: 72M
[12/27 00:35:12] fastreid.utils.events INFO:  eta: 0:26:54  epoch/iter: 3/199  total_loss: 58.54  loss_cls_b1: 6.202  loss_cls_b2: 6.218  loss_cls_b21: 6.21  loss_cls_b22: 6.233  loss_cls_b3: 6.244  loss_cls_b31: 6.192  loss_cls_b32: 6.222  loss_cls_b33: 6.23  loss_triplet_b1: 1.587  loss_triplet_b2: 1.584  loss_triplet_b3: 1.559  loss_triplet_b22: 1.856  loss_triplet_b33: 2.115  time: 0.5112  data_time: 0.0024  lr: 6.56e-05  max_mem: 72M
[12/27 00:35:29] fastreid.utils.events INFO:  eta: 0:26:46  epoch/iter: 3/231  total_loss: 58.53  loss_cls_b1: 6.206  loss_cls_b2: 6.218  loss_cls_b21: 6.192  loss_cls_b22: 6.219  loss_cls_b3: 6.231  loss_cls_b31: 6.187  loss_cls_b32: 6.218  loss_cls_b33: 6.228  loss_triplet_b1: 1.587  loss_triplet_b2: 1.579  loss_triplet_b3: 1.556  loss_triplet_b22: 1.855  loss_triplet_b33: 2.103  time: 0.5137  data_time: 0.0011  lr: 7.06e-05  max_mem: 72M
[12/27 00:35:57] fastreid.utils.events INFO:  eta: 0:26:07  epoch/iter: 4/289  total_loss: 58.61  loss_cls_b1: 6.212  loss_cls_b2: 6.218  loss_cls_b21: 6.188  loss_cls_b22: 6.207  loss_cls_b3: 6.236  loss_cls_b31: 6.184  loss_cls_b32: 6.213  loss_cls_b33: 6.223  loss_triplet_b1: 1.564  loss_triplet_b2: 1.585  loss_triplet_b3: 1.56  loss_triplet_b22: 1.857  loss_triplet_b33: 2.109  time: 0.5082  data_time: 0.0013  lr: 7.97e-05  max_mem: 72M
[12/27 00:36:27] fastreid.utils.events INFO:  eta: 0:25:45  epoch/iter: 5/347  total_loss: 58.57  loss_cls_b1: 6.223  loss_cls_b2: 6.226  loss_cls_b21: 6.191  loss_cls_b22: 6.215  loss_cls_b3: 6.252  loss_cls_b31: 6.204  loss_cls_b32: 6.211  loss_cls_b33: 6.22  loss_triplet_b1: 1.547  loss_triplet_b2: 1.573  loss_triplet_b3: 1.544  loss_triplet_b22: 1.86  loss_triplet_b33: 2.102  time: 0.5084  data_time: 0.0008  lr: 8.89e-05  max_mem: 72M
[12/27 00:36:53] fastreid.utils.events INFO:  eta: 0:25:20  epoch/iter: 6/399  total_loss: 58.46  loss_cls_b1: 6.228  loss_cls_b2: 6.226  loss_cls_b21: 6.193  loss_cls_b22: 6.215  loss_cls_b3: 6.253  loss_cls_b31: 6.2  loss_cls_b32: 6.207  loss_cls_b33: 6.212  loss_triplet_b1: 1.54  loss_triplet_b2: 1.549  loss_triplet_b3: 1.508  loss_triplet_b22: 1.844  loss_triplet_b33: 2.084  time: 0.5081  data_time: 0.0005  lr: 9.71e-05  max_mem: 72M
[12/27 00:36:56] fastreid.utils.events INFO:  eta: 0:25:16  epoch/iter: 6/405  total_loss: 58.47  loss_cls_b1: 6.228  loss_cls_b2: 6.227  loss_cls_b21: 6.192  loss_cls_b22: 6.212  loss_cls_b3: 6.256  loss_cls_b31: 6.209  loss_cls_b32: 6.208  loss_cls_b33: 6.212  loss_triplet_b1: 1.54  loss_triplet_b2: 1.549  loss_triplet_b3: 1.512  loss_triplet_b22: 1.854  loss_triplet_b33: 2.089  time: 0.5077  data_time: 0.0006  lr: 9.80e-05  max_mem: 72M
[12/27 00:37:24] fastreid.utils.events INFO:  eta: 0:24:46  epoch/iter: 7/463  total_loss: 58.28  loss_cls_b1: 6.235  loss_cls_b2: 6.22  loss_cls_b21: 6.21  loss_cls_b22: 6.236  loss_cls_b3: 6.252  loss_cls_b31: 6.214  loss_cls_b32: 6.209  loss_cls_b33: 6.217  loss_triplet_b1: 1.539  loss_triplet_b2: 1.536  loss_triplet_b3: 1.499  loss_triplet_b22: 1.837  loss_triplet_b33: 2.072  time: 0.5044  data_time: 0.0016  lr: 1.07e-04  max_mem: 72M
[12/27 00:37:49] fastreid.utils.events INFO:  eta: 0:24:03  epoch/iter: 8/521  total_loss: 58.3  loss_cls_b1: 6.242  loss_cls_b2: 6.22  loss_cls_b21: 6.22  loss_cls_b22: 6.236  loss_cls_b3: 6.234  loss_cls_b31: 6.202  loss_cls_b32: 6.217  loss_cls_b33: 6.218  loss_triplet_b1: 1.535  loss_triplet_b2: 1.525  loss_triplet_b3: 1.512  loss_triplet_b22: 1.821  loss_triplet_b33: 2.061  time: 0.4954  data_time: 0.0011  lr: 1.16e-04  max_mem: 72M
[12/27 00:38:14] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:38:14] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 833        | 1           |
| gallery  | 297     | 3710       | 1           |[0m
[12/27 00:38:14] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[12/27 00:38:21] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.3134 s / batch. ETA=0:00:07
[12/27 00:38:30] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:10.744560 (0.346599 s / batch per device, on 1 devices)
[12/27 00:38:30] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:10 (0.344291 s / batch per device, on 1 devices)
[12/27 00:38:32] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[12/27 00:38:32] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 47.04    | 65.86    | 71.65     | 21.91 | 3.35   | 34.48    |[0m
[12/27 00:38:32] fastreid.utils.events INFO:  eta: 0:23:24  epoch/iter: 9/579  total_loss: 58.31  loss_cls_b1: 6.249  loss_cls_b2: 6.225  loss_cls_b21: 6.186  loss_cls_b22: 6.239  loss_cls_b3: 6.241  loss_cls_b31: 6.2  loss_cls_b32: 6.218  loss_cls_b33: 6.221  loss_triplet_b1: 1.541  loss_triplet_b2: 1.547  loss_triplet_b3: 1.52  loss_triplet_b22: 1.853  loss_triplet_b33: 2.065  time: 0.4888  data_time: 0.0026  lr: 1.25e-04  max_mem: 252M
[12/27 00:38:41] fastreid.utils.events INFO:  eta: 0:23:11  epoch/iter: 10/599  total_loss: 58.3  loss_cls_b1: 6.248  loss_cls_b2: 6.228  loss_cls_b21: 6.201  loss_cls_b22: 6.215  loss_cls_b3: 6.239  loss_cls_b31: 6.202  loss_cls_b32: 6.224  loss_cls_b33: 6.216  loss_triplet_b1: 1.551  loss_triplet_b2: 1.543  loss_triplet_b3: 1.525  loss_triplet_b22: 1.847  loss_triplet_b33: 2.063  time: 0.4866  data_time: 0.0014  lr: 1.29e-04  max_mem: 252M
[12/27 00:38:57] fastreid.utils.events INFO:  eta: 0:22:43  epoch/iter: 10/637  total_loss: 58.27  loss_cls_b1: 6.244  loss_cls_b2: 6.241  loss_cls_b21: 6.217  loss_cls_b22: 6.221  loss_cls_b3: 6.234  loss_cls_b31: 6.209  loss_cls_b32: 6.214  loss_cls_b33: 6.195  loss_triplet_b1: 1.55  loss_triplet_b2: 1.536  loss_triplet_b3: 1.523  loss_triplet_b22: 1.814  loss_triplet_b33: 2.03  time: 0.4824  data_time: 0.0009  lr: 1.35e-04  max_mem: 252M
[12/27 00:39:22] fastreid.utils.events INFO:  eta: 0:22:07  epoch/iter: 11/695  total_loss: 58.3  loss_cls_b1: 6.249  loss_cls_b2: 6.203  loss_cls_b21: 6.231  loss_cls_b22: 6.212  loss_cls_b3: 6.224  loss_cls_b31: 6.199  loss_cls_b32: 6.188  loss_cls_b33: 6.198  loss_triplet_b1: 1.599  loss_triplet_b2: 1.562  loss_triplet_b3: 1.555  loss_triplet_b22: 1.827  loss_triplet_b33: 1.996  time: 0.4784  data_time: 0.0011  lr: 1.44e-04  max_mem: 252M
[12/27 00:39:49] fastreid.utils.events INFO:  eta: 0:21:31  epoch/iter: 12/753  total_loss: 58.18  loss_cls_b1: 6.22  loss_cls_b2: 6.227  loss_cls_b21: 6.236  loss_cls_b22: 6.211  loss_cls_b3: 6.223  loss_cls_b31: 6.215  loss_cls_b32: 6.179  loss_cls_b33: 6.195  loss_triplet_b1: 1.585  loss_triplet_b2: 1.548  loss_triplet_b3: 1.528  loss_triplet_b22: 1.779  loss_triplet_b33: 1.957  time: 0.4765  data_time: 0.0008  lr: 1.53e-04  max_mem: 252M
[12/27 00:40:09] fastreid.utils.events INFO:  eta: 0:20:56  epoch/iter: 13/799  total_loss: 58.12  loss_cls_b1: 6.238  loss_cls_b2: 6.213  loss_cls_b21: 6.247  loss_cls_b22: 6.2  loss_cls_b3: 6.213  loss_cls_b31: 6.209  loss_cls_b32: 6.177  loss_cls_b33: 6.197  loss_triplet_b1: 1.595  loss_triplet_b2: 1.555  loss_triplet_b3: 1.537  loss_triplet_b22: 1.762  loss_triplet_b33: 1.938  time: 0.4746  data_time: 0.0006  lr: 1.60e-04  max_mem: 252M
[12/27 00:40:15] fastreid.utils.events INFO:  eta: 0:20:49  epoch/iter: 13/811  total_loss: 58.22  loss_cls_b1: 6.243  loss_cls_b2: 6.223  loss_cls_b21: 6.237  loss_cls_b22: 6.205  loss_cls_b3: 6.208  loss_cls_b31: 6.207  loss_cls_b32: 6.175  loss_cls_b33: 6.203  loss_triplet_b1: 1.608  loss_triplet_b2: 1.559  loss_triplet_b3: 1.553  loss_triplet_b22: 1.766  loss_triplet_b33: 1.943  time: 0.4743  data_time: 0.0004  lr: 1.62e-04  max_mem: 252M
[12/27 00:40:41] fastreid.utils.events INFO:  eta: 0:20:13  epoch/iter: 14/869  total_loss: 58.12  loss_cls_b1: 6.22  loss_cls_b2: 6.213  loss_cls_b21: 6.249  loss_cls_b22: 6.22  loss_cls_b3: 6.196  loss_cls_b31: 6.201  loss_cls_b32: 6.199  loss_cls_b33: 6.219  loss_triplet_b1: 1.585  loss_triplet_b2: 1.548  loss_triplet_b3: 1.547  loss_triplet_b22: 1.752  loss_triplet_b33: 1.911  time: 0.4727  data_time: 0.0008  lr: 1.71e-04  max_mem: 252M
[12/27 00:41:06] fastreid.utils.events INFO:  eta: 0:19:35  epoch/iter: 15/927  total_loss: 58.09  loss_cls_b1: 6.222  loss_cls_b2: 6.218  loss_cls_b21: 6.252  loss_cls_b22: 6.229  loss_cls_b3: 6.186  loss_cls_b31: 6.207  loss_cls_b32: 6.192  loss_cls_b33: 6.201  loss_triplet_b1: 1.598  loss_triplet_b2: 1.548  loss_triplet_b3: 1.547  loss_triplet_b22: 1.746  loss_triplet_b33: 1.915  time: 0.4705  data_time: 0.0015  lr: 1.80e-04  max_mem: 252M
[12/27 00:41:32] fastreid.utils.events INFO:  eta: 0:19:00  epoch/iter: 16/985  total_loss: 58.05  loss_cls_b1: 6.22  loss_cls_b2: 6.229  loss_cls_b21: 6.246  loss_cls_b22: 6.223  loss_cls_b3: 6.197  loss_cls_b31: 6.209  loss_cls_b32: 6.195  loss_cls_b33: 6.213  loss_triplet_b1: 1.594  loss_triplet_b2: 1.518  loss_triplet_b3: 1.507  loss_triplet_b22: 1.723  loss_triplet_b33: 1.881  time: 0.4689  data_time: 0.0009  lr: 1.89e-04  max_mem: 252M
[12/27 00:41:39] fastreid.utils.events INFO:  eta: 0:18:54  epoch/iter: 17/999  total_loss: 58.09  loss_cls_b1: 6.221  loss_cls_b2: 6.23  loss_cls_b21: 6.254  loss_cls_b22: 6.233  loss_cls_b3: 6.202  loss_cls_b31: 6.216  loss_cls_b32: 6.208  loss_cls_b33: 6.211  loss_triplet_b1: 1.603  loss_triplet_b2: 1.522  loss_triplet_b3: 1.527  loss_triplet_b22: 1.73  loss_triplet_b33: 1.899  time: 0.4691  data_time: 0.0009  lr: 1.91e-04  max_mem: 252M
[12/27 00:41:39] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[12/27 00:41:57] fastreid.utils.events INFO:  eta: 0:18:25  epoch/iter: 17/1043  total_loss: 57.62  loss_cls_b1: 6.2  loss_cls_b2: 6.203  loss_cls_b21: 6.22  loss_cls_b22: 6.206  loss_cls_b3: 6.202  loss_cls_b31: 6.207  loss_cls_b32: 6.187  loss_cls_b33: 6.189  loss_triplet_b1: 1.494  loss_triplet_b2: 1.447  loss_triplet_b3: 1.439  loss_triplet_b22: 1.644  loss_triplet_b33: 1.798  time: 0.4667  data_time: 0.0019  lr: 1.98e-04  max_mem: 252M
[12/27 00:42:23] fastreid.utils.events INFO:  eta: 0:17:44  epoch/iter: 18/1101  total_loss: 56.28  loss_cls_b1: 6.166  loss_cls_b2: 6.165  loss_cls_b21: 6.177  loss_cls_b22: 6.175  loss_cls_b3: 6.188  loss_cls_b31: 6.18  loss_cls_b32: 6.157  loss_cls_b33: 6.153  loss_triplet_b1: 1.282  loss_triplet_b2: 1.231  loss_triplet_b3: 1.196  loss_triplet_b22: 1.385  loss_triplet_b33: 1.53  time: 0.4650  data_time: 0.0008  lr: 2.07e-04  max_mem: 252M
[12/27 00:42:49] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:42:49] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 833        | 1           |
| gallery  | 297     | 3710       | 1           |[0m
[12/27 00:42:49] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[12/27 00:42:55] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.3533 s / batch. ETA=0:00:08
[12/27 00:43:02] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:09.476635 (0.305698 s / batch per device, on 1 devices)
[12/27 00:43:02] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:09 (0.303538 s / batch per device, on 1 devices)
[12/27 00:43:04] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[12/27 00:43:04] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 68.76    | 85.89    | 89.14     | 43.44 | 9.15   | 56.10    |[0m
[12/27 00:43:04] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[12/27 00:43:12] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_0019.pth
[12/27 00:43:21] fastreid.utils.events INFO:  eta: 0:17:08  epoch/iter: 19/1159  total_loss: 52.3  loss_cls_b1: 5.971  loss_cls_b2: 5.94  loss_cls_b21: 5.963  loss_cls_b22: 5.958  loss_cls_b3: 5.978  loss_cls_b31: 5.957  loss_cls_b32: 5.967  loss_cls_b33: 5.989  loss_triplet_b1: 0.8523  loss_triplet_b2: 0.8333  loss_triplet_b3: 0.8226  loss_triplet_b22: 0.929  loss_triplet_b33: 0.9941  time: 0.4641  data_time: 0.0016  lr: 2.17e-04  max_mem: 252M
[12/27 00:43:39] fastreid.utils.events INFO:  eta: 0:16:47  epoch/iter: 20/1199  total_loss: 48.44  loss_cls_b1: 5.464  loss_cls_b2: 5.517  loss_cls_b21: 5.513  loss_cls_b22: 5.557  loss_cls_b3: 5.517  loss_cls_b31: 5.508  loss_cls_b32: 5.527  loss_cls_b33: 5.558  loss_triplet_b1: 0.7306  loss_triplet_b2: 0.6942  loss_triplet_b3: 0.7042  loss_triplet_b22: 0.7894  loss_triplet_b33: 0.8581  time: 0.4636  data_time: 0.0015  lr: 2.23e-04  max_mem: 252M
[12/27 00:43:47] fastreid.utils.events INFO:  eta: 0:16:37  epoch/iter: 20/1217  total_loss: 46.92  loss_cls_b1: 5.269  loss_cls_b2: 5.373  loss_cls_b21: 5.304  loss_cls_b22: 5.359  loss_cls_b3: 5.304  loss_cls_b31: 5.366  loss_cls_b32: 5.351  loss_cls_b33: 5.401  loss_triplet_b1: 0.7177  loss_triplet_b2: 0.6794  loss_triplet_b3: 0.6811  loss_triplet_b22: 0.7666  loss_triplet_b33: 0.8366  time: 0.4633  data_time: 0.0019  lr: 2.26e-04  max_mem: 252M
[12/27 00:44:13] fastreid.utils.events INFO:  eta: 0:16:07  epoch/iter: 21/1275  total_loss: 40.68  loss_cls_b1: 4.59  loss_cls_b2: 4.693  loss_cls_b21: 4.688  loss_cls_b22: 4.759  loss_cls_b3: 4.733  loss_cls_b31: 4.691  loss_cls_b32: 4.67  loss_cls_b33: 4.776  loss_triplet_b1: 0.6511  loss_triplet_b2: 0.6169  loss_triplet_b3: 0.6195  loss_triplet_b22: 0.6983  loss_triplet_b33: 0.7507  time: 0.4625  data_time: 0.0005  lr: 2.35e-04  max_mem: 252M
[12/27 00:44:40] fastreid.utils.events INFO:  eta: 0:15:39  epoch/iter: 22/1333  total_loss: 37.18  loss_cls_b1: 4.128  loss_cls_b2: 4.291  loss_cls_b21: 4.139  loss_cls_b22: 4.296  loss_cls_b3: 4.237  loss_cls_b31: 4.2  loss_cls_b32: 4.29  loss_cls_b33: 4.324  loss_triplet_b1: 0.5641  loss_triplet_b2: 0.5532  loss_triplet_b3: 0.5397  loss_triplet_b22: 0.6095  loss_triplet_b33: 0.645  time: 0.4624  data_time: 0.0027  lr: 2.44e-04  max_mem: 252M
[12/27 00:45:05] fastreid.utils.events INFO:  eta: 0:15:09  epoch/iter: 23/1391  total_loss: 33.18  loss_cls_b1: 3.69  loss_cls_b2: 3.825  loss_cls_b21: 3.774  loss_cls_b22: 3.892  loss_cls_b3: 3.796  loss_cls_b31: 3.824  loss_cls_b32: 3.822  loss_cls_b33: 3.968  loss_triplet_b1: 0.5017  loss_triplet_b2: 0.4976  loss_triplet_b3: 0.4868  loss_triplet_b22: 0.5593  loss_triplet_b33: 0.6134  time: 0.4616  data_time: 0.0005  lr: 2.53e-04  max_mem: 252M
[12/27 00:45:09] fastreid.utils.events INFO:  eta: 0:15:05  epoch/iter: 24/1399  total_loss: 32.88  loss_cls_b1: 3.647  loss_cls_b2: 3.781  loss_cls_b21: 3.743  loss_cls_b22: 3.856  loss_cls_b3: 3.744  loss_cls_b31: 3.801  loss_cls_b32: 3.807  loss_cls_b33: 3.936  loss_triplet_b1: 0.5017  loss_triplet_b2: 0.5018  loss_triplet_b3: 0.4832  loss_triplet_b22: 0.5593  loss_triplet_b33: 0.6058  time: 0.4615  data_time: 0.0010  lr: 2.54e-04  max_mem: 252M
[12/27 00:45:32] fastreid.utils.events INFO:  eta: 0:14:42  epoch/iter: 24/1449  total_loss: 29.89  loss_cls_b1: 3.21  loss_cls_b2: 3.355  loss_cls_b21: 3.368  loss_cls_b22: 3.53  loss_cls_b3: 3.38  loss_cls_b31: 3.411  loss_cls_b32: 3.516  loss_cls_b33: 3.607  loss_triplet_b1: 0.4581  loss_triplet_b2: 0.4479  loss_triplet_b3: 0.4395  loss_triplet_b22: 0.5073  loss_triplet_b33: 0.5347  time: 0.4610  data_time: 0.0009  lr: 2.62e-04  max_mem: 252M
[12/27 00:45:57] fastreid.utils.events INFO:  eta: 0:14:18  epoch/iter: 25/1507  total_loss: 27.67  loss_cls_b1: 2.991  loss_cls_b2: 3.078  loss_cls_b21: 3.114  loss_cls_b22: 3.317  loss_cls_b3: 3.091  loss_cls_b31: 3.161  loss_cls_b32: 3.292  loss_cls_b33: 3.366  loss_triplet_b1: 0.4282  loss_triplet_b2: 0.4101  loss_triplet_b3: 0.4123  loss_triplet_b22: 0.4588  loss_triplet_b33: 0.4861  time: 0.4604  data_time: 0.0018  lr: 2.71e-04  max_mem: 252M
[12/27 00:46:21] fastreid.utils.events INFO:  eta: 0:13:53  epoch/iter: 26/1565  total_loss: 24.74  loss_cls_b1: 2.659  loss_cls_b2: 2.733  loss_cls_b21: 2.892  loss_cls_b22: 2.984  loss_cls_b3: 2.763  loss_cls_b31: 2.914  loss_cls_b32: 2.997  loss_cls_b33: 3.095  loss_triplet_b1: 0.365  loss_triplet_b2: 0.3494  loss_triplet_b3: 0.3644  loss_triplet_b22: 0.4046  loss_triplet_b33: 0.4429  time: 0.4580  data_time: 0.0014  lr: 2.81e-04  max_mem: 252M
[12/27 00:46:33] fastreid.utils.events INFO:  eta: 0:13:36  epoch/iter: 27/1599  total_loss: 23.91  loss_cls_b1: 2.545  loss_cls_b2: 2.637  loss_cls_b21: 2.796  loss_cls_b22: 2.905  loss_cls_b3: 2.668  loss_cls_b31: 2.81  loss_cls_b32: 2.884  loss_cls_b33: 3.043  loss_triplet_b1: 0.3445  loss_triplet_b2: 0.3355  loss_triplet_b3: 0.3526  loss_triplet_b22: 0.3789  loss_triplet_b33: 0.4185  time: 0.4562  data_time: 0.0014  lr: 2.86e-04  max_mem: 252M
[12/27 00:46:43] fastreid.utils.events INFO:  eta: 0:13:26  epoch/iter: 27/1623  total_loss: 23.34  loss_cls_b1: 2.45  loss_cls_b2: 2.548  loss_cls_b21: 2.729  loss_cls_b22: 2.751  loss_cls_b3: 2.613  loss_cls_b31: 2.715  loss_cls_b32: 2.83  loss_cls_b33: 3.006  loss_triplet_b1: 0.3293  loss_triplet_b2: 0.3244  loss_triplet_b3: 0.3299  loss_triplet_b22: 0.3652  loss_triplet_b33: 0.4025  time: 0.4553  data_time: 0.0012  lr: 2.90e-04  max_mem: 252M
[12/27 00:47:03] fastreid.utils.events INFO:  eta: 0:12:59  epoch/iter: 28/1681  total_loss: 22.93  loss_cls_b1: 2.387  loss_cls_b2: 2.474  loss_cls_b21: 2.612  loss_cls_b22: 2.729  loss_cls_b3: 2.547  loss_cls_b31: 2.667  loss_cls_b32: 2.762  loss_cls_b33: 2.91  loss_triplet_b1: 0.3097  loss_triplet_b2: 0.3057  loss_triplet_b3: 0.3097  loss_triplet_b22: 0.3423  loss_triplet_b33: 0.3674  time: 0.4515  data_time: 0.0008  lr: 2.99e-04  max_mem: 252M
[12/27 00:47:23] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:47:23] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 833        | 1           |
| gallery  | 297     | 3710       | 1           |[0m
[12/27 00:47:23] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[12/27 00:47:28] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.3042 s / batch. ETA=0:00:07
[12/27 00:47:34] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.172354 (0.263624 s / batch per device, on 1 devices)
[12/27 00:47:34] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.261371 s / batch per device, on 1 devices)
[12/27 00:47:36] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[12/27 00:47:36] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 77.68    | 89.26    | 92.04     | 59.24 | 17.72  | 68.46    |[0m
[12/27 00:47:36] fastreid.utils.events INFO:  eta: 0:12:30  epoch/iter: 29/1739  total_loss: 21.05  loss_cls_b1: 2.194  loss_cls_b2: 2.278  loss_cls_b21: 2.419  loss_cls_b22: 2.555  loss_cls_b3: 2.294  loss_cls_b31: 2.538  loss_cls_b32: 2.623  loss_cls_b33: 2.699  loss_triplet_b1: 0.2904  loss_triplet_b2: 0.2752  loss_triplet_b3: 0.2843  loss_triplet_b22: 0.3228  loss_triplet_b33: 0.3246  time: 0.4479  data_time: 0.0018  lr: 3.08e-04  max_mem: 252M
[12/27 00:47:56] fastreid.utils.events INFO:  eta: 0:11:59  epoch/iter: 30/1797  total_loss: 19.67  loss_cls_b1: 2.056  loss_cls_b2: 2.156  loss_cls_b21: 2.314  loss_cls_b22: 2.446  loss_cls_b3: 2.134  loss_cls_b31: 2.36  loss_cls_b32: 2.466  loss_cls_b33: 2.591  loss_triplet_b1: 0.2772  loss_triplet_b2: 0.2593  loss_triplet_b3: 0.274  loss_triplet_b22: 0.2981  loss_triplet_b33: 0.2913  time: 0.4444  data_time: 0.0009  lr: 3.17e-04  max_mem: 252M
[12/27 00:47:56] fastreid.utils.events INFO:  eta: 0:11:58  epoch/iter: 31/1799  total_loss: 19.67  loss_cls_b1: 2.056  loss_cls_b2: 2.156  loss_cls_b21: 2.314  loss_cls_b22: 2.441  loss_cls_b3: 2.134  loss_cls_b31: 2.36  loss_cls_b32: 2.467  loss_cls_b33: 2.59  loss_triplet_b1: 0.2772  loss_triplet_b2: 0.2593  loss_triplet_b3: 0.274  loss_triplet_b22: 0.2981  loss_triplet_b33: 0.2913  time: 0.4443  data_time: 0.0006  lr: 3.17e-04  max_mem: 252M
[12/27 00:48:16] fastreid.utils.events INFO:  eta: 0:11:28  epoch/iter: 31/1855  total_loss: 19.28  loss_cls_b1: 1.996  loss_cls_b2: 2.038  loss_cls_b21: 2.216  loss_cls_b22: 2.344  loss_cls_b3: 2.067  loss_cls_b31: 2.267  loss_cls_b32: 2.377  loss_cls_b33: 2.493  loss_triplet_b1: 0.2646  loss_triplet_b2: 0.238  loss_triplet_b3: 0.2434  loss_triplet_b22: 0.2662  loss_triplet_b33: 0.2782  time: 0.4412  data_time: 0.0019  lr: 3.26e-04  max_mem: 252M
[12/27 00:48:35] fastreid.utils.events INFO:  eta: 0:10:55  epoch/iter: 32/1913  total_loss: 18.46  loss_cls_b1: 1.858  loss_cls_b2: 1.924  loss_cls_b21: 2.084  loss_cls_b22: 2.217  loss_cls_b3: 1.956  loss_cls_b31: 2.149  loss_cls_b32: 2.307  loss_cls_b33: 2.373  loss_triplet_b1: 0.2245  loss_triplet_b2: 0.2174  loss_triplet_b3: 0.2303  loss_triplet_b22: 0.2449  loss_triplet_b33: 0.2386  time: 0.4381  data_time: 0.0007  lr: 3.35e-04  max_mem: 252M
[12/27 00:48:55] fastreid.utils.events INFO:  eta: 0:10:19  epoch/iter: 33/1971  total_loss: 16.81  loss_cls_b1: 1.692  loss_cls_b2: 1.771  loss_cls_b21: 1.962  loss_cls_b22: 2.121  loss_cls_b3: 1.816  loss_cls_b31: 2.004  loss_cls_b32: 2.129  loss_cls_b33: 2.298  loss_triplet_b1: 0.199  loss_triplet_b2: 0.1974  loss_triplet_b3: 0.1957  loss_triplet_b22: 0.2121  loss_triplet_b33: 0.213  time: 0.4352  data_time: 0.0006  lr: 3.44e-04  max_mem: 252M
[12/27 00:49:05] fastreid.utils.events INFO:  eta: 0:09:55  epoch/iter: 34/1999  total_loss: 16.67  loss_cls_b1: 1.682  loss_cls_b2: 1.728  loss_cls_b21: 1.939  loss_cls_b22: 2.104  loss_cls_b3: 1.773  loss_cls_b31: 2.003  loss_cls_b32: 2.103  loss_cls_b33: 2.262  loss_triplet_b1: 0.1998  loss_triplet_b2: 0.1905  loss_triplet_b3: 0.1923  loss_triplet_b22: 0.2056  loss_triplet_b33: 0.2057  time: 0.4338  data_time: 0.0007  lr: 3.49e-04  max_mem: 252M
[12/27 00:49:15] fastreid.utils.events INFO:  eta: 0:09:34  epoch/iter: 34/2029  total_loss: 16.41  loss_cls_b1: 1.645  loss_cls_b2: 1.696  loss_cls_b21: 1.894  loss_cls_b22: 2.061  loss_cls_b3: 1.739  loss_cls_b31: 1.991  loss_cls_b32: 2.059  loss_cls_b33: 2.205  loss_triplet_b1: 0.1944  loss_triplet_b2: 0.1853  loss_triplet_b3: 0.1891  loss_triplet_b22: 0.1866  loss_triplet_b33: 0.1922  time: 0.4324  data_time: 0.0007  lr: 3.49e-04  max_mem: 252M
[12/27 00:49:35] fastreid.utils.events INFO:  eta: 0:08:45  epoch/iter: 35/2087  total_loss: 15.88  loss_cls_b1: 1.612  loss_cls_b2: 1.627  loss_cls_b21: 1.832  loss_cls_b22: 1.983  loss_cls_b3: 1.697  loss_cls_b31: 1.94  loss_cls_b32: 1.991  loss_cls_b33: 2.162  loss_triplet_b1: 0.1659  loss_triplet_b2: 0.1574  loss_triplet_b3: 0.1671  loss_triplet_b22: 0.1685  loss_triplet_b33: 0.1769  time: 0.4298  data_time: 0.0003  lr: 3.48e-04  max_mem: 252M
[12/27 00:49:54] fastreid.utils.events INFO:  eta: 0:08:01  epoch/iter: 36/2145  total_loss: 14.96  loss_cls_b1: 1.512  loss_cls_b2: 1.546  loss_cls_b21: 1.749  loss_cls_b22: 1.93  loss_cls_b3: 1.574  loss_cls_b31: 1.859  loss_cls_b32: 1.922  loss_cls_b33: 2.056  loss_triplet_b1: 0.1602  loss_triplet_b2: 0.1516  loss_triplet_b3: 0.165  loss_triplet_b22: 0.156  loss_triplet_b33: 0.1555  time: 0.4274  data_time: 0.0011  lr: 3.44e-04  max_mem: 252M
[12/27 00:50:13] fastreid.utils.events INFO:  eta: 0:07:26  epoch/iter: 37/2199  total_loss: 14.05  loss_cls_b1: 1.432  loss_cls_b2: 1.466  loss_cls_b21: 1.675  loss_cls_b22: 1.813  loss_cls_b3: 1.49  loss_cls_b31: 1.768  loss_cls_b32: 1.849  loss_cls_b33: 1.963  loss_triplet_b1: 0.139  loss_triplet_b2: 0.133  loss_triplet_b3: 0.1454  loss_triplet_b22: 0.1388  loss_triplet_b33: 0.141  time: 0.4251  data_time: 0.0011  lr: 3.37e-04  max_mem: 252M
[12/27 00:50:14] fastreid.utils.events INFO:  eta: 0:07:24  epoch/iter: 37/2203  total_loss: 14.02  loss_cls_b1: 1.428  loss_cls_b2: 1.448  loss_cls_b21: 1.66  loss_cls_b22: 1.807  loss_cls_b3: 1.479  loss_cls_b31: 1.749  loss_cls_b32: 1.842  loss_cls_b33: 1.944  loss_triplet_b1: 0.1381  loss_triplet_b2: 0.133  loss_triplet_b3: 0.1436  loss_triplet_b22: 0.1388  loss_triplet_b33: 0.141  time: 0.4250  data_time: 0.0025  lr: 3.37e-04  max_mem: 252M
[12/27 00:50:34] fastreid.utils.events INFO:  eta: 0:06:58  epoch/iter: 38/2261  total_loss: 13.57  loss_cls_b1: 1.343  loss_cls_b2: 1.417  loss_cls_b21: 1.623  loss_cls_b22: 1.77  loss_cls_b3: 1.407  loss_cls_b31: 1.72  loss_cls_b32: 1.812  loss_cls_b33: 1.874  loss_triplet_b1: 0.1256  loss_triplet_b2: 0.1278  loss_triplet_b3: 0.1374  loss_triplet_b22: 0.1306  loss_triplet_b33: 0.1339  time: 0.4228  data_time: 0.0007  lr: 3.28e-04  max_mem: 252M
[12/27 00:50:54] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:50:54] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 833        | 1           |
| gallery  | 297     | 3710       | 1           |[0m
[12/27 00:50:54] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[12/27 00:50:59] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.3150 s / batch. ETA=0:00:07
[12/27 00:51:05] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.393851 (0.270769 s / batch per device, on 1 devices)
[12/27 00:51:05] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.268236 s / batch per device, on 1 devices)
[12/27 00:51:07] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[12/27 00:51:07] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 78.77    | 91.68    | 93.61     | 65.42 | 23.57  | 72.10    |[0m
[12/27 00:51:07] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[12/27 00:51:14] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_0039.pth
[12/27 00:51:22] fastreid.utils.events INFO:  eta: 0:06:36  epoch/iter: 39/2319  total_loss: 12.61  loss_cls_b1: 1.257  loss_cls_b2: 1.31  loss_cls_b21: 1.52  loss_cls_b22: 1.629  loss_cls_b3: 1.331  loss_cls_b31: 1.584  loss_cls_b32: 1.71  loss_cls_b33: 1.769  loss_triplet_b1: 0.1036  loss_triplet_b2: 0.1113  loss_triplet_b3: 0.1112  loss_triplet_b22: 0.1052  loss_triplet_b33: 0.1056  time: 0.4207  data_time: 0.0027  lr: 3.16e-04  max_mem: 252M
[12/27 00:51:41] fastreid.utils.events INFO:  eta: 0:06:15  epoch/iter: 40/2377  total_loss: 11.48  loss_cls_b1: 1.117  loss_cls_b2: 1.181  loss_cls_b21: 1.405  loss_cls_b22: 1.488  loss_cls_b3: 1.188  loss_cls_b31: 1.469  loss_cls_b32: 1.584  loss_cls_b33: 1.656  loss_triplet_b1: 0.08919  loss_triplet_b2: 0.08997  loss_triplet_b3: 0.09154  loss_triplet_b22: 0.08212  loss_triplet_b33: 0.09386  time: 0.4188  data_time: 0.0007  lr: 3.02e-04  max_mem: 252M
[12/27 00:51:49] fastreid.utils.events INFO:  eta: 0:06:07  epoch/iter: 41/2399  total_loss: 11.53  loss_cls_b1: 1.113  loss_cls_b2: 1.182  loss_cls_b21: 1.382  loss_cls_b22: 1.492  loss_cls_b3: 1.188  loss_cls_b31: 1.466  loss_cls_b32: 1.577  loss_cls_b33: 1.66  loss_triplet_b1: 0.084  loss_triplet_b2: 0.08929  loss_triplet_b3: 0.09154  loss_triplet_b22: 0.07712  loss_triplet_b33: 0.09037  time: 0.4180  data_time: 0.0009  lr: 2.86e-04  max_mem: 252M
[12/27 00:52:01] fastreid.utils.events INFO:  eta: 0:05:54  epoch/iter: 41/2435  total_loss: 11.33  loss_cls_b1: 1.091  loss_cls_b2: 1.142  loss_cls_b21: 1.342  loss_cls_b22: 1.454  loss_cls_b3: 1.177  loss_cls_b31: 1.444  loss_cls_b32: 1.551  loss_cls_b33: 1.601  loss_triplet_b1: 0.08048  loss_triplet_b2: 0.08566  loss_triplet_b3: 0.08664  loss_triplet_b22: 0.07824  loss_triplet_b33: 0.08623  time: 0.4168  data_time: 0.0023  lr: 2.86e-04  max_mem: 252M
[12/27 00:52:21] fastreid.utils.events INFO:  eta: 0:05:33  epoch/iter: 42/2493  total_loss: 10.81  loss_cls_b1: 1.036  loss_cls_b2: 1.065  loss_cls_b21: 1.29  loss_cls_b22: 1.382  loss_cls_b3: 1.1  loss_cls_b31: 1.418  loss_cls_b32: 1.515  loss_cls_b33: 1.54  loss_triplet_b1: 0.07529  loss_triplet_b2: 0.07632  loss_triplet_b3: 0.08188  loss_triplet_b22: 0.07687  loss_triplet_b33: 0.0767  time: 0.4150  data_time: 0.0009  lr: 2.68e-04  max_mem: 252M
[12/27 00:52:41] fastreid.utils.events INFO:  eta: 0:05:12  epoch/iter: 43/2551  total_loss: 9.795  loss_cls_b1: 0.9203  loss_cls_b2: 0.9485  loss_cls_b21: 1.172  loss_cls_b22: 1.298  loss_cls_b3: 0.991  loss_cls_b31: 1.284  loss_cls_b32: 1.358  loss_cls_b33: 1.423  loss_triplet_b1: 0.06613  loss_triplet_b2: 0.06401  loss_triplet_b3: 0.06994  loss_triplet_b22: 0.06515  loss_triplet_b33: 0.0623  time: 0.4132  data_time: 0.0007  lr: 2.49e-04  max_mem: 252M
[12/27 00:52:57] fastreid.utils.events INFO:  eta: 0:04:56  epoch/iter: 44/2599  total_loss: 9.423  loss_cls_b1: 0.8971  loss_cls_b2: 0.9332  loss_cls_b21: 1.123  loss_cls_b22: 1.253  loss_cls_b3: 0.9551  loss_cls_b31: 1.207  loss_cls_b32: 1.281  loss_cls_b33: 1.385  loss_triplet_b1: 0.06302  loss_triplet_b2: 0.0586  loss_triplet_b3: 0.06618  loss_triplet_b22: 0.05991  loss_triplet_b33: 0.055  time: 0.4118  data_time: 0.0005  lr: 2.29e-04  max_mem: 252M
[12/27 00:53:00] fastreid.utils.events INFO:  eta: 0:04:52  epoch/iter: 44/2609  total_loss: 9.275  loss_cls_b1: 0.888  loss_cls_b2: 0.9249  loss_cls_b21: 1.119  loss_cls_b22: 1.233  loss_cls_b3: 0.9454  loss_cls_b31: 1.193  loss_cls_b32: 1.271  loss_cls_b33: 1.365  loss_triplet_b1: 0.06201  loss_triplet_b2: 0.05663  loss_triplet_b3: 0.06507  loss_triplet_b22: 0.05682  loss_triplet_b33: 0.05319  time: 0.4116  data_time: 0.0006  lr: 2.29e-04  max_mem: 252M
[12/27 00:53:20] fastreid.utils.events INFO:  eta: 0:04:32  epoch/iter: 45/2667  total_loss: 8.506  loss_cls_b1: 0.8158  loss_cls_b2: 0.8581  loss_cls_b21: 1.024  loss_cls_b22: 1.163  loss_cls_b3: 0.8732  loss_cls_b31: 1.097  loss_cls_b32: 1.236  loss_cls_b33: 1.278  loss_triplet_b1: 0.04523  loss_triplet_b2: 0.04521  loss_triplet_b3: 0.05285  loss_triplet_b22: 0.03757  loss_triplet_b33: 0.03761  time: 0.4101  data_time: 0.0012  lr: 2.08e-04  max_mem: 252M
[12/27 00:53:40] fastreid.utils.events INFO:  eta: 0:04:13  epoch/iter: 46/2725  total_loss: 7.731  loss_cls_b1: 0.7344  loss_cls_b2: 0.7626  loss_cls_b21: 0.9529  loss_cls_b22: 1.035  loss_cls_b3: 0.7958  loss_cls_b31: 1.047  loss_cls_b32: 1.148  loss_cls_b33: 1.168  loss_triplet_b1: 0.03439  loss_triplet_b2: 0.03458  loss_triplet_b3: 0.04174  loss_triplet_b22: 0.02776  loss_triplet_b33: 0.02821  time: 0.4087  data_time: 0.0012  lr: 1.86e-04  max_mem: 252M
[12/27 00:54:01] fastreid.utils.events INFO:  eta: 0:03:54  epoch/iter: 47/2783  total_loss: 7.529  loss_cls_b1: 0.7087  loss_cls_b2: 0.7368  loss_cls_b21: 0.9176  loss_cls_b22: 1.002  loss_cls_b3: 0.7526  loss_cls_b31: 0.9981  loss_cls_b32: 1.086  loss_cls_b33: 1.134  loss_triplet_b1: 0.03099  loss_triplet_b2: 0.0292  loss_triplet_b3: 0.03254  loss_triplet_b22: 0.02432  loss_triplet_b33: 0.02414  time: 0.4074  data_time: 0.0005  lr: 1.64e-04  max_mem: 252M
[12/27 00:54:06] fastreid.utils.events INFO:  eta: 0:03:48  epoch/iter: 48/2799  total_loss: 7.373  loss_cls_b1: 0.6858  loss_cls_b2: 0.7183  loss_cls_b21: 0.8958  loss_cls_b22: 0.9873  loss_cls_b3: 0.7315  loss_cls_b31: 0.9502  loss_cls_b32: 1.064  loss_cls_b33: 1.081  loss_triplet_b1: 0.02882  loss_triplet_b2: 0.02881  loss_triplet_b3: 0.02973  loss_triplet_b22: 0.02329  loss_triplet_b33: 0.0221  time: 0.4070  data_time: 0.0006  lr: 1.42e-04  max_mem: 252M
[12/27 00:54:21] fastreid.utils.events INFO:  eta: 0:03:34  epoch/iter: 48/2841  total_loss: 7.343  loss_cls_b1: 0.6648  loss_cls_b2: 0.7266  loss_cls_b21: 0.8671  loss_cls_b22: 1.004  loss_cls_b3: 0.7299  loss_cls_b31: 0.9355  loss_cls_b32: 1.055  loss_cls_b33: 1.092  loss_triplet_b1: 0.02703  loss_triplet_b2: 0.02699  loss_triplet_b3: 0.02923  loss_triplet_b22: 0.0227  loss_triplet_b33: 0.02201  time: 0.4060  data_time: 0.0004  lr: 1.42e-04  max_mem: 252M
[12/27 00:54:42] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:54:42] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 833        | 1           |
| gallery  | 297     | 3710       | 1           |[0m
[12/27 00:54:42] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[12/27 00:54:47] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.2988 s / batch. ETA=0:00:07
[12/27 00:54:53] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.173375 (0.263657 s / batch per device, on 1 devices)
[12/27 00:54:53] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.261071 s / batch per device, on 1 devices)
[12/27 00:54:55] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[12/27 00:54:55] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 80.58    | 92.40    | 93.85     | 69.19 | 27.77  | 74.89    |[0m
[12/27 00:54:55] fastreid.utils.events INFO:  eta: 0:03:15  epoch/iter: 49/2899  total_loss: 6.588  loss_cls_b1: 0.6021  loss_cls_b2: 0.6369  loss_cls_b21: 0.7677  loss_cls_b22: 0.8833  loss_cls_b3: 0.6655  loss_cls_b31: 0.8514  loss_cls_b32: 0.9682  loss_cls_b33: 0.9862  loss_triplet_b1: 0.01989  loss_triplet_b2: 0.02189  loss_triplet_b3: 0.02461  loss_triplet_b22: 0.01529  loss_triplet_b33: 0.01524  time: 0.4052  data_time: 0.0016  lr: 1.21e-04  max_mem: 252M
[12/27 00:55:14] fastreid.utils.events INFO:  eta: 0:02:55  epoch/iter: 50/2957  total_loss: 6.287  loss_cls_b1: 0.5652  loss_cls_b2: 0.5995  loss_cls_b21: 0.7417  loss_cls_b22: 0.8351  loss_cls_b3: 0.6227  loss_cls_b31: 0.789  loss_cls_b32: 0.9433  loss_cls_b33: 0.9473  loss_triplet_b1: 0.01516  loss_triplet_b2: 0.01835  loss_triplet_b3: 0.02238  loss_triplet_b22: 0.01454  loss_triplet_b33: 0.01245  time: 0.4039  data_time: 0.0006  lr: 1.01e-04  max_mem: 252M
[12/27 00:55:29] fastreid.utils.events INFO:  eta: 0:02:41  epoch/iter: 51/2999  total_loss: 6.094  loss_cls_b1: 0.5315  loss_cls_b2: 0.5797  loss_cls_b21: 0.7059  loss_cls_b22: 0.8334  loss_cls_b3: 0.5952  loss_cls_b31: 0.766  loss_cls_b32: 0.9215  loss_cls_b33: 0.9473  loss_triplet_b1: 0.01539  loss_triplet_b2: 0.01847  loss_triplet_b3: 0.02185  loss_triplet_b22: 0.0151  loss_triplet_b33: 0.01363  time: 0.4029  data_time: 0.0017  lr: 8.15e-05  max_mem: 252M
[12/27 00:55:34] fastreid.utils.events INFO:  eta: 0:02:36  epoch/iter: 51/3015  total_loss: 6.053  loss_cls_b1: 0.5263  loss_cls_b2: 0.5773  loss_cls_b21: 0.7026  loss_cls_b22: 0.8256  loss_cls_b3: 0.5874  loss_cls_b31: 0.7515  loss_cls_b32: 0.9133  loss_cls_b33: 0.9339  loss_triplet_b1: 0.0149  loss_triplet_b2: 0.01629  loss_triplet_b3: 0.02109  loss_triplet_b22: 0.01401  loss_triplet_b33: 0.01176  time: 0.4026  data_time: 0.0008  lr: 8.15e-05  max_mem: 252M
[12/27 00:55:54] fastreid.utils.events INFO:  eta: 0:02:16  epoch/iter: 52/3073  total_loss: 5.699  loss_cls_b1: 0.4851  loss_cls_b2: 0.5282  loss_cls_b21: 0.6821  loss_cls_b22: 0.7815  loss_cls_b3: 0.5615  loss_cls_b31: 0.7363  loss_cls_b32: 0.8608  loss_cls_b33: 0.9011  loss_triplet_b1: 0.01335  loss_triplet_b2: 0.01469  loss_triplet_b3: 0.01995  loss_triplet_b22: 0.01107  loss_triplet_b33: 0.01035  time: 0.4013  data_time: 0.0007  lr: 6.39e-05  max_mem: 252M
[12/27 00:56:14] fastreid.utils.events INFO:  eta: 0:01:57  epoch/iter: 53/3131  total_loss: 5.323  loss_cls_b1: 0.457  loss_cls_b2: 0.502  loss_cls_b21: 0.6435  loss_cls_b22: 0.7451  loss_cls_b3: 0.5435  loss_cls_b31: 0.7231  loss_cls_b32: 0.8271  loss_cls_b33: 0.8386  loss_triplet_b1: 0.01369  loss_triplet_b2: 0.01438  loss_triplet_b3: 0.01814  loss_triplet_b22: 0.008362  loss_triplet_b33: 0.009443  time: 0.4003  data_time: 0.0006  lr: 4.79e-05  max_mem: 252M
[12/27 00:56:33] fastreid.utils.events INFO:  eta: 0:01:37  epoch/iter: 54/3189  total_loss: 5.139  loss_cls_b1: 0.4432  loss_cls_b2: 0.474  loss_cls_b21: 0.6247  loss_cls_b22: 0.7163  loss_cls_b3: 0.5072  loss_cls_b31: 0.6689  loss_cls_b32: 0.8086  loss_cls_b33: 0.828  loss_triplet_b1: 0.01192  loss_triplet_b2: 0.01325  loss_triplet_b3: 0.01628  loss_triplet_b22: 0.007255  loss_triplet_b33: 0.007775  time: 0.3991  data_time: 0.0006  lr: 3.40e-05  max_mem: 252M
[12/27 00:56:37] fastreid.utils.events INFO:  eta: 0:01:34  epoch/iter: 55/3199  total_loss: 5.098  loss_cls_b1: 0.4406  loss_cls_b2: 0.474  loss_cls_b21: 0.6151  loss_cls_b22: 0.7071  loss_cls_b3: 0.5043  loss_cls_b31: 0.6625  loss_cls_b32: 0.8  loss_cls_b33: 0.8274  loss_triplet_b1: 0.01176  loss_triplet_b2: 0.01325  loss_triplet_b3: 0.01469  loss_triplet_b22: 0.007146  loss_triplet_b33: 0.007535  time: 0.3989  data_time: 0.0005  lr: 2.22e-05  max_mem: 252M
[12/27 00:56:53] fastreid.utils.events INFO:  eta: 0:01:18  epoch/iter: 55/3247  total_loss: 4.98  loss_cls_b1: 0.4334  loss_cls_b2: 0.4749  loss_cls_b21: 0.604  loss_cls_b22: 0.687  loss_cls_b3: 0.4955  loss_cls_b31: 0.6573  loss_cls_b32: 0.7718  loss_cls_b33: 0.7915  loss_triplet_b1: 0.01015  loss_triplet_b2: 0.01195  loss_triplet_b3: 0.01271  loss_triplet_b22: 0.006567  loss_triplet_b33: 0.006425  time: 0.3981  data_time: 0.0016  lr: 2.22e-05  max_mem: 252M
[12/27 00:57:13] fastreid.utils.events INFO:  eta: 0:00:58  epoch/iter: 56/3305  total_loss: 4.83  loss_cls_b1: 0.4152  loss_cls_b2: 0.4609  loss_cls_b21: 0.5855  loss_cls_b22: 0.6581  loss_cls_b3: 0.4668  loss_cls_b31: 0.6327  loss_cls_b32: 0.7388  loss_cls_b33: 0.7199  loss_triplet_b1: 0.01166  loss_triplet_b2: 0.01298  loss_triplet_b3: 0.01212  loss_triplet_b22: 0.007114  loss_triplet_b33: 0.006626  time: 0.3971  data_time: 0.0008  lr: 1.29e-05  max_mem: 252M
[12/27 00:57:33] fastreid.utils.events INFO:  eta: 0:00:39  epoch/iter: 57/3363  total_loss: 4.857  loss_cls_b1: 0.4248  loss_cls_b2: 0.4674  loss_cls_b21: 0.5966  loss_cls_b22: 0.6581  loss_cls_b3: 0.4845  loss_cls_b31: 0.656  loss_cls_b32: 0.7325  loss_cls_b33: 0.7353  loss_triplet_b1: 0.01157  loss_triplet_b2: 0.01259  loss_triplet_b3: 0.01361  loss_triplet_b22: 0.007323  loss_triplet_b33: 0.006863  time: 0.3961  data_time: 0.0009  lr: 6.17e-06  max_mem: 252M
[12/27 00:57:45] fastreid.utils.events INFO:  eta: 0:00:26  epoch/iter: 58/3399  total_loss: 4.887  loss_cls_b1: 0.4294  loss_cls_b2: 0.4674  loss_cls_b21: 0.5966  loss_cls_b22: 0.6558  loss_cls_b3: 0.4853  loss_cls_b31: 0.6553  loss_cls_b32: 0.7373  loss_cls_b33: 0.7308  loss_triplet_b1: 0.01062  loss_triplet_b2: 0.01229  loss_triplet_b3: 0.01376  loss_triplet_b22: 0.007581  loss_triplet_b33: 0.006993  time: 0.3955  data_time: 0.0013  lr: 2.07e-06  max_mem: 252M
[12/27 00:57:53] fastreid.utils.events INFO:  eta: 0:00:19  epoch/iter: 58/3421  total_loss: 4.914  loss_cls_b1: 0.4306  loss_cls_b2: 0.476  loss_cls_b21: 0.6063  loss_cls_b22: 0.6515  loss_cls_b3: 0.4853  loss_cls_b31: 0.6715  loss_cls_b32: 0.7427  loss_cls_b33: 0.7308  loss_triplet_b1: 0.01026  loss_triplet_b2: 0.01252  loss_triplet_b3: 0.01376  loss_triplet_b22: 0.007886  loss_triplet_b33: 0.006993  time: 0.3952  data_time: 0.0005  lr: 2.07e-06  max_mem: 252M
[12/27 00:58:13] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3479  total_loss: 4.868  loss_cls_b1: 0.4271  loss_cls_b2: 0.466  loss_cls_b21: 0.6144  loss_cls_b22: 0.6411  loss_cls_b3: 0.4853  loss_cls_b31: 0.6772  loss_cls_b32: 0.7411  loss_cls_b33: 0.7458  loss_triplet_b1: 0.01001  loss_triplet_b2: 0.0114  loss_triplet_b3: 0.0139  loss_triplet_b22: 0.006923  loss_triplet_b33: 0.006993  time: 0.3943  data_time: 0.0007  lr: 7.00e-07  max_mem: 252M
[12/27 00:58:13] fastreid.engine.defaults INFO: Prepare testing set
[12/27 00:58:13] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 833        | 1           |
| gallery  | 297     | 3710       | 1           |[0m
[12/27 00:58:13] fastreid.evaluation.evaluator INFO: Start inference on 4543 images
[12/27 00:58:18] fastreid.evaluation.evaluator INFO: Inference done 11/36. 0.3048 s / batch. ETA=0:00:07
[12/27 00:58:25] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.295118 (0.267584 s / batch per device, on 1 devices)
[12/27 00:58:25] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.264807 s / batch per device, on 1 devices)
[12/27 00:58:26] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[12/27 00:58:26] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 80.34    | 92.76    | 94.21     | 70.30 | 29.88  | 75.32    |[0m
[12/27 00:58:26] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[12/27 00:58:34] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_final.pth
[12/27 00:58:41] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3479  total_loss: 4.868  loss_cls_b1: 0.4271  loss_cls_b2: 0.466  loss_cls_b21: 0.6144  loss_cls_b22: 0.6411  loss_cls_b3: 0.4853  loss_cls_b31: 0.6772  loss_cls_b32: 0.7411  loss_cls_b33: 0.7458  loss_triplet_b1: 0.01001  loss_triplet_b2: 0.0114  loss_triplet_b3: 0.0139  loss_triplet_b22: 0.006923  loss_triplet_b33: 0.006993  time: 0.3943  data_time: 0.0007  lr: 7.00e-07  max_mem: 252M
[12/27 00:58:41] fastreid.engine.hooks INFO: Overall training speed: 3478 iterations in 0:22:51 (0.3944 s / it)
[12/27 00:58:41] fastreid.engine.hooks INFO: Total training time: 0:25:11 (0:02:19 on hooks)
[07/09 12:08:54] fastreid INFO: Rank of current process: 0. World size: 1
[07/09 12:08:54] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                   1.24.3
fastreid                1.3 @/home/zhourui/hyf_lpl_multicamera/codes/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA GeForce GTX 1080 Ti
CUDA_HOME               :/usr/local/cuda-10.2
Pillow                  10.3.0
torchvision             0.12.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision
torchvision arch flags  /opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
----------------------  ----------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/09 12:08:54] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit6/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50154', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/09 12:08:54] fastreid INFO: Contents of args.config_file=./configs/WildSplit6/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit6",)
  TESTS: ("WildSplit6",)

OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn

[07/09 12:08:54] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit6',)
  TESTS: ('WildSplit6',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit6/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/09 12:08:54] fastreid INFO: Full config saved to /home/zhourui/hyf_lpl_multicamera/codes/logs/wildsplit6/mgn_R50-ibn/config.yaml
[07/09 12:08:54] fastreid.utils.env INFO: Using a generated random seed 56840636
[07/09 12:08:54] fastreid.engine.defaults INFO: Prepare training set
[07/09 12:08:54] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3954       | 1           |[0m
[07/09 12:08:54] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[07/09 12:08:57] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[07/09 12:08:57] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /home/zhourui/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[07/09 12:08:57] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[07/09 12:08:59] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[07/09 12:09:03] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[07/09 12:09:03] fastreid.engine.train_loop INFO: Starting training from epoch 0
[07/09 12:09:03] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[07/09 12:10:02] fastreid.utils.events INFO:  eta: 0:54:10  epoch/iter: 0/60  total_loss: 58.59  loss_cls_b1: 6.202  loss_cls_b2: 6.217  loss_cls_b21: 6.186  loss_cls_b22: 6.244  loss_cls_b3: 6.213  loss_cls_b31: 6.193  loss_cls_b32: 6.214  loss_cls_b33: 6.194  loss_triplet_b1: 1.562  loss_triplet_b2: 1.592  loss_triplet_b3: 1.587  loss_triplet_b22: 1.939  loss_triplet_b33: 2.189  time: 0.9020  data_time: 0.0008  lr: 4.38e-05  max_mem: 72M
[07/09 12:10:59] fastreid.utils.events INFO:  eta: 0:53:51  epoch/iter: 1/121  total_loss: 58.4  loss_cls_b1: 6.209  loss_cls_b2: 6.221  loss_cls_b21: 6.213  loss_cls_b22: 6.232  loss_cls_b3: 6.212  loss_cls_b31: 6.198  loss_cls_b32: 6.185  loss_cls_b33: 6.164  loss_triplet_b1: 1.513  loss_triplet_b2: 1.534  loss_triplet_b3: 1.521  loss_triplet_b22: 1.854  loss_triplet_b33: 2.138  time: 0.9160  data_time: 0.0009  lr: 5.33e-05  max_mem: 72M
[07/09 12:11:56] fastreid.utils.events INFO:  eta: 0:53:12  epoch/iter: 2/182  total_loss: 58.39  loss_cls_b1: 6.245  loss_cls_b2: 6.231  loss_cls_b21: 6.225  loss_cls_b22: 6.239  loss_cls_b3: 6.216  loss_cls_b31: 6.192  loss_cls_b32: 6.176  loss_cls_b33: 6.174  loss_triplet_b1: 1.532  loss_triplet_b2: 1.54  loss_triplet_b3: 1.523  loss_triplet_b22: 1.851  loss_triplet_b33: 2.132  time: 0.9217  data_time: 0.0005  lr: 6.29e-05  max_mem: 72M
[07/09 12:12:11] fastreid.utils.events INFO:  eta: 0:53:01  epoch/iter: 3/199  total_loss: 58.31  loss_cls_b1: 6.243  loss_cls_b2: 6.232  loss_cls_b21: 6.232  loss_cls_b22: 6.239  loss_cls_b3: 6.214  loss_cls_b31: 6.195  loss_cls_b32: 6.177  loss_cls_b33: 6.174  loss_triplet_b1: 1.512  loss_triplet_b2: 1.53  loss_triplet_b3: 1.517  loss_triplet_b22: 1.844  loss_triplet_b33: 2.111  time: 0.9222  data_time: 0.0005  lr: 6.56e-05  max_mem: 72M
[07/09 12:12:53] fastreid.utils.events INFO:  eta: 0:52:30  epoch/iter: 3/243  total_loss: 58.22  loss_cls_b1: 6.257  loss_cls_b2: 6.243  loss_cls_b21: 6.241  loss_cls_b22: 6.235  loss_cls_b3: 6.218  loss_cls_b31: 6.209  loss_cls_b32: 6.178  loss_cls_b33: 6.165  loss_triplet_b1: 1.497  loss_triplet_b2: 1.526  loss_triplet_b3: 1.503  loss_triplet_b22: 1.831  loss_triplet_b33: 2.084  time: 0.9246  data_time: 0.0006  lr: 7.25e-05  max_mem: 72M
[07/09 12:13:50] fastreid.utils.events INFO:  eta: 0:51:36  epoch/iter: 4/304  total_loss: 58.18  loss_cls_b1: 6.259  loss_cls_b2: 6.243  loss_cls_b21: 6.226  loss_cls_b22: 6.243  loss_cls_b3: 6.197  loss_cls_b31: 6.198  loss_cls_b32: 6.197  loss_cls_b33: 6.17  loss_triplet_b1: 1.497  loss_triplet_b2: 1.529  loss_triplet_b3: 1.508  loss_triplet_b22: 1.844  loss_triplet_b33: 2.075  time: 0.9261  data_time: 0.0005  lr: 8.21e-05  max_mem: 72M
[07/09 12:14:46] fastreid.utils.events INFO:  eta: 0:50:40  epoch/iter: 5/365  total_loss: 58.18  loss_cls_b1: 6.249  loss_cls_b2: 6.233  loss_cls_b21: 6.235  loss_cls_b22: 6.246  loss_cls_b3: 6.2  loss_cls_b31: 6.204  loss_cls_b32: 6.214  loss_cls_b33: 6.15  loss_triplet_b1: 1.478  loss_triplet_b2: 1.51  loss_triplet_b3: 1.504  loss_triplet_b22: 1.856  loss_triplet_b33: 2.061  time: 0.9259  data_time: 0.0006  lr: 9.17e-05  max_mem: 72M
[07/09 12:15:17] fastreid.utils.events INFO:  eta: 0:50:08  epoch/iter: 6/399  total_loss: 58.12  loss_cls_b1: 6.24  loss_cls_b2: 6.233  loss_cls_b21: 6.226  loss_cls_b22: 6.241  loss_cls_b3: 6.217  loss_cls_b31: 6.19  loss_cls_b32: 6.211  loss_cls_b33: 6.164  loss_triplet_b1: 1.478  loss_triplet_b2: 1.498  loss_triplet_b3: 1.503  loss_triplet_b22: 1.856  loss_triplet_b33: 2.051  time: 0.9258  data_time: 0.0007  lr: 9.71e-05  max_mem: 72M
[07/09 12:15:42] fastreid.utils.events INFO:  eta: 0:49:43  epoch/iter: 6/426  total_loss: 58.09  loss_cls_b1: 6.242  loss_cls_b2: 6.225  loss_cls_b21: 6.233  loss_cls_b22: 6.245  loss_cls_b3: 6.219  loss_cls_b31: 6.184  loss_cls_b32: 6.217  loss_cls_b33: 6.157  loss_triplet_b1: 1.476  loss_triplet_b2: 1.49  loss_triplet_b3: 1.499  loss_triplet_b22: 1.857  loss_triplet_b33: 2.042  time: 0.9258  data_time: 0.0005  lr: 1.01e-04  max_mem: 72M
[07/09 12:16:39] fastreid.utils.events INFO:  eta: 0:48:50  epoch/iter: 7/487  total_loss: 58.06  loss_cls_b1: 6.242  loss_cls_b2: 6.25  loss_cls_b21: 6.221  loss_cls_b22: 6.26  loss_cls_b3: 6.219  loss_cls_b31: 6.182  loss_cls_b32: 6.225  loss_cls_b33: 6.152  loss_triplet_b1: 1.46  loss_triplet_b2: 1.478  loss_triplet_b3: 1.465  loss_triplet_b22: 1.827  loss_triplet_b33: 2.032  time: 0.9266  data_time: 0.0007  lr: 1.11e-04  max_mem: 72M
[07/09 12:17:36] fastreid.utils.events INFO:  eta: 0:47:55  epoch/iter: 8/548  total_loss: 58.07  loss_cls_b1: 6.242  loss_cls_b2: 6.25  loss_cls_b21: 6.209  loss_cls_b22: 6.265  loss_cls_b3: 6.222  loss_cls_b31: 6.165  loss_cls_b32: 6.222  loss_cls_b33: 6.155  loss_triplet_b1: 1.473  loss_triplet_b2: 1.485  loss_triplet_b3: 1.493  loss_triplet_b22: 1.835  loss_triplet_b33: 2.047  time: 0.9271  data_time: 0.0005  lr: 1.21e-04  max_mem: 72M
[07/09 12:18:23] fastreid.utils.events INFO:  eta: 0:47:07  epoch/iter: 9/599  total_loss: 58.21  loss_cls_b1: 6.247  loss_cls_b2: 6.241  loss_cls_b21: 6.215  loss_cls_b22: 6.266  loss_cls_b3: 6.218  loss_cls_b31: 6.168  loss_cls_b32: 6.229  loss_cls_b33: 6.159  loss_triplet_b1: 1.485  loss_triplet_b2: 1.5  loss_triplet_b3: 1.509  loss_triplet_b22: 1.857  loss_triplet_b33: 2.069  time: 0.9265  data_time: 0.0005  lr: 1.29e-04  max_mem: 72M
[07/09 12:18:32] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:18:32] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 878        | 1           |
| gallery  | 297     | 3956       | 1           |[0m
[07/09 12:18:32] fastreid.evaluation.evaluator INFO: Start inference on 4834 images
[07/09 12:18:43] fastreid.evaluation.evaluator INFO: Inference done 11/38. 0.6119 s / batch. ETA=0:00:16
[07/09 12:18:59] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:19.809095 (0.600276 s / batch per device, on 1 devices)
[07/09 12:18:59] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:19 (0.597730 s / batch per device, on 1 devices)
[07/09 12:19:00] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[07/09 12:19:00] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 48.12    | 65.91    | 70.58     | 21.28 | 2.36   | 34.70    |[0m
[07/09 12:19:00] fastreid.utils.events INFO:  eta: 0:46:57  epoch/iter: 9/609  total_loss: 58.18  loss_cls_b1: 6.255  loss_cls_b2: 6.241  loss_cls_b21: 6.214  loss_cls_b22: 6.265  loss_cls_b3: 6.216  loss_cls_b31: 6.168  loss_cls_b32: 6.228  loss_cls_b33: 6.164  loss_triplet_b1: 1.477  loss_triplet_b2: 1.5  loss_triplet_b3: 1.505  loss_triplet_b22: 1.857  loss_triplet_b33: 2.072  time: 0.9265  data_time: 0.0005  lr: 1.30e-04  max_mem: 252M
[07/09 12:19:56] fastreid.utils.events INFO:  eta: 0:46:01  epoch/iter: 10/670  total_loss: 58.07  loss_cls_b1: 6.243  loss_cls_b2: 6.226  loss_cls_b21: 6.236  loss_cls_b22: 6.225  loss_cls_b3: 6.202  loss_cls_b31: 6.163  loss_cls_b32: 6.23  loss_cls_b33: 6.169  loss_triplet_b1: 1.498  loss_triplet_b2: 1.507  loss_triplet_b3: 1.506  loss_triplet_b22: 1.838  loss_triplet_b33: 2.049  time: 0.9268  data_time: 0.0005  lr: 1.40e-04  max_mem: 252M
[07/09 12:20:53] fastreid.utils.events INFO:  eta: 0:45:05  epoch/iter: 11/731  total_loss: 58.07  loss_cls_b1: 6.239  loss_cls_b2: 6.199  loss_cls_b21: 6.244  loss_cls_b22: 6.207  loss_cls_b3: 6.188  loss_cls_b31: 6.193  loss_cls_b32: 6.23  loss_cls_b33: 6.191  loss_triplet_b1: 1.502  loss_triplet_b2: 1.501  loss_triplet_b3: 1.504  loss_triplet_b22: 1.816  loss_triplet_b33: 2.001  time: 0.9268  data_time: 0.0007  lr: 1.49e-04  max_mem: 252M
[07/09 12:21:50] fastreid.utils.events INFO:  eta: 0:44:09  epoch/iter: 12/792  total_loss: 57.92  loss_cls_b1: 6.241  loss_cls_b2: 6.175  loss_cls_b21: 6.227  loss_cls_b22: 6.192  loss_cls_b3: 6.181  loss_cls_b31: 6.191  loss_cls_b32: 6.258  loss_cls_b33: 6.191  loss_triplet_b1: 1.502  loss_triplet_b2: 1.486  loss_triplet_b3: 1.51  loss_triplet_b22: 1.771  loss_triplet_b33: 1.936  time: 0.9270  data_time: 0.0004  lr: 1.59e-04  max_mem: 252M
[07/09 12:21:56] fastreid.utils.events INFO:  eta: 0:44:02  epoch/iter: 13/799  total_loss: 57.89  loss_cls_b1: 6.234  loss_cls_b2: 6.17  loss_cls_b21: 6.234  loss_cls_b22: 6.193  loss_cls_b3: 6.184  loss_cls_b31: 6.191  loss_cls_b32: 6.252  loss_cls_b33: 6.186  loss_triplet_b1: 1.502  loss_triplet_b2: 1.485  loss_triplet_b3: 1.504  loss_triplet_b22: 1.776  loss_triplet_b33: 1.937  time: 0.9270  data_time: 0.0006  lr: 1.60e-04  max_mem: 252M
[07/09 12:22:46] fastreid.utils.events INFO:  eta: 0:43:12  epoch/iter: 13/853  total_loss: 57.99  loss_cls_b1: 6.216  loss_cls_b2: 6.164  loss_cls_b21: 6.223  loss_cls_b22: 6.201  loss_cls_b3: 6.198  loss_cls_b31: 6.191  loss_cls_b32: 6.244  loss_cls_b33: 6.194  loss_triplet_b1: 1.504  loss_triplet_b2: 1.486  loss_triplet_b3: 1.519  loss_triplet_b22: 1.783  loss_triplet_b33: 1.942  time: 0.9271  data_time: 0.0005  lr: 1.68e-04  max_mem: 252M
[07/09 12:23:43] fastreid.utils.events INFO:  eta: 0:42:15  epoch/iter: 14/914  total_loss: 57.91  loss_cls_b1: 6.231  loss_cls_b2: 6.182  loss_cls_b21: 6.224  loss_cls_b22: 6.192  loss_cls_b3: 6.215  loss_cls_b31: 6.192  loss_cls_b32: 6.241  loss_cls_b33: 6.199  loss_triplet_b1: 1.505  loss_triplet_b2: 1.485  loss_triplet_b3: 1.514  loss_triplet_b22: 1.785  loss_triplet_b33: 1.948  time: 0.9270  data_time: 0.0006  lr: 1.78e-04  max_mem: 252M
[07/09 12:24:40] fastreid.utils.events INFO:  eta: 0:41:20  epoch/iter: 15/975  total_loss: 58.02  loss_cls_b1: 6.212  loss_cls_b2: 6.186  loss_cls_b21: 6.25  loss_cls_b22: 6.209  loss_cls_b3: 6.216  loss_cls_b31: 6.196  loss_cls_b32: 6.232  loss_cls_b33: 6.199  loss_triplet_b1: 1.509  loss_triplet_b2: 1.485  loss_triplet_b3: 1.508  loss_triplet_b22: 1.801  loss_triplet_b33: 1.986  time: 0.9276  data_time: 0.0007  lr: 1.87e-04  max_mem: 252M
[07/09 12:25:02] fastreid.utils.events INFO:  eta: 0:40:58  epoch/iter: 16/999  total_loss: 58.13  loss_cls_b1: 6.216  loss_cls_b2: 6.193  loss_cls_b21: 6.253  loss_cls_b22: 6.203  loss_cls_b3: 6.211  loss_cls_b31: 6.198  loss_cls_b32: 6.236  loss_cls_b33: 6.208  loss_triplet_b1: 1.546  loss_triplet_b2: 1.501  loss_triplet_b3: 1.524  loss_triplet_b22: 1.836  loss_triplet_b33: 1.991  time: 0.9278  data_time: 0.0004  lr: 1.91e-04  max_mem: 252M
[07/09 12:25:02] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[07/09 12:25:38] fastreid.utils.events INFO:  eta: 0:40:28  epoch/iter: 16/1036  total_loss: 57.87  loss_cls_b1: 6.218  loss_cls_b2: 6.203  loss_cls_b21: 6.245  loss_cls_b22: 6.208  loss_cls_b3: 6.211  loss_cls_b31: 6.196  loss_cls_b32: 6.244  loss_cls_b33: 6.207  loss_triplet_b1: 1.474  loss_triplet_b2: 1.426  loss_triplet_b3: 1.461  loss_triplet_b22: 1.769  loss_triplet_b33: 1.937  time: 0.9287  data_time: 0.0005  lr: 1.97e-04  max_mem: 252M
[07/09 12:26:36] fastreid.utils.events INFO:  eta: 0:39:37  epoch/iter: 17/1097  total_loss: 56.39  loss_cls_b1: 6.17  loss_cls_b2: 6.177  loss_cls_b21: 6.207  loss_cls_b22: 6.166  loss_cls_b3: 6.184  loss_cls_b31: 6.181  loss_cls_b32: 6.193  loss_cls_b33: 6.172  loss_triplet_b1: 1.265  loss_triplet_b2: 1.212  loss_triplet_b3: 1.253  loss_triplet_b22: 1.467  loss_triplet_b33: 1.589  time: 0.9301  data_time: 0.0006  lr: 2.07e-04  max_mem: 252M
[07/09 12:27:33] fastreid.utils.events INFO:  eta: 0:38:43  epoch/iter: 18/1158  total_loss: 53.31  loss_cls_b1: 6.016  loss_cls_b2: 6.035  loss_cls_b21: 6.019  loss_cls_b22: 6.012  loss_cls_b3: 6.032  loss_cls_b31: 6.055  loss_cls_b32: 6.015  loss_cls_b33: 6.072  loss_triplet_b1: 0.8905  loss_triplet_b2: 0.8273  loss_triplet_b3: 0.8418  loss_triplet_b22: 0.9288  loss_triplet_b33: 1.014  time: 0.9307  data_time: 0.0007  lr: 2.16e-04  max_mem: 252M
[07/09 12:28:12] fastreid.utils.events INFO:  eta: 0:38:06  epoch/iter: 19/1199  total_loss: 49.06  loss_cls_b1: 5.516  loss_cls_b2: 5.63  loss_cls_b21: 5.545  loss_cls_b22: 5.65  loss_cls_b3: 5.69  loss_cls_b31: 5.615  loss_cls_b32: 5.654  loss_cls_b33: 5.711  loss_triplet_b1: 0.7729  loss_triplet_b2: 0.7516  loss_triplet_b3: 0.742  loss_triplet_b22: 0.8324  loss_triplet_b33: 0.8739  time: 0.9311  data_time: 0.0006  lr: 2.23e-04  max_mem: 252M
[07/09 12:28:31] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:28:31] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 878        | 1           |
| gallery  | 297     | 3956       | 1           |[0m
[07/09 12:28:31] fastreid.evaluation.evaluator INFO: Start inference on 4834 images
[07/09 12:28:39] fastreid.evaluation.evaluator INFO: Inference done 11/38. 0.5667 s / batch. ETA=0:00:15
[07/09 12:28:53] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:17.552043 (0.531880 s / batch per device, on 1 devices)
[07/09 12:28:53] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:17 (0.530600 s / batch per device, on 1 devices)
[07/09 12:28:53] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[07/09 12:28:53] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 69.78    | 85.06    | 87.69     | 44.18 | 8.67   | 56.98    |[0m
[07/09 12:28:54] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[07/09 12:28:56] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_0019.pth
[07/09 12:28:58] fastreid.utils.events INFO:  eta: 0:37:48  epoch/iter: 19/1219  total_loss: 46.86  loss_cls_b1: 5.272  loss_cls_b2: 5.436  loss_cls_b21: 5.305  loss_cls_b22: 5.411  loss_cls_b3: 5.383  loss_cls_b31: 5.349  loss_cls_b32: 5.372  loss_cls_b33: 5.462  loss_triplet_b1: 0.7219  loss_triplet_b2: 0.6953  loss_triplet_b3: 0.7094  loss_triplet_b22: 0.7842  loss_triplet_b33: 0.8305  time: 0.9312  data_time: 0.0008  lr: 2.26e-04  max_mem: 252M
[07/09 12:29:56] fastreid.utils.events INFO:  eta: 0:36:52  epoch/iter: 20/1280  total_loss: 41.85  loss_cls_b1: 4.655  loss_cls_b2: 4.826  loss_cls_b21: 4.655  loss_cls_b22: 4.811  loss_cls_b3: 4.795  loss_cls_b31: 4.746  loss_cls_b32: 4.748  loss_cls_b33: 4.845  loss_triplet_b1: 0.6755  loss_triplet_b2: 0.6457  loss_triplet_b3: 0.6495  loss_triplet_b22: 0.7161  loss_triplet_b33: 0.7693  time: 0.9328  data_time: 0.0007  lr: 2.35e-04  max_mem: 252M
[07/09 12:30:56] fastreid.utils.events INFO:  eta: 0:35:59  epoch/iter: 21/1341  total_loss: 36.81  loss_cls_b1: 4.094  loss_cls_b2: 4.286  loss_cls_b21: 4.174  loss_cls_b22: 4.359  loss_cls_b3: 4.298  loss_cls_b31: 4.266  loss_cls_b32: 4.3  loss_cls_b33: 4.402  loss_triplet_b1: 0.5944  loss_triplet_b2: 0.5696  loss_triplet_b3: 0.5865  loss_triplet_b22: 0.6283  loss_triplet_b33: 0.7021  time: 0.9348  data_time: 0.0007  lr: 2.45e-04  max_mem: 252M
[07/09 12:31:51] fastreid.utils.events INFO:  eta: 0:35:08  epoch/iter: 22/1399  total_loss: 33.35  loss_cls_b1: 3.586  loss_cls_b2: 3.788  loss_cls_b21: 3.703  loss_cls_b22: 3.902  loss_cls_b3: 3.805  loss_cls_b31: 3.79  loss_cls_b32: 3.921  loss_cls_b33: 4.002  loss_triplet_b1: 0.5368  loss_triplet_b2: 0.5177  loss_triplet_b3: 0.5287  loss_triplet_b22: 0.5935  loss_triplet_b33: 0.6421  time: 0.9355  data_time: 0.0006  lr: 2.54e-04  max_mem: 252M
[07/09 12:31:54] fastreid.utils.events INFO:  eta: 0:35:05  epoch/iter: 22/1402  total_loss: 33.35  loss_cls_b1: 3.572  loss_cls_b2: 3.788  loss_cls_b21: 3.68  loss_cls_b22: 3.902  loss_cls_b3: 3.803  loss_cls_b31: 3.77  loss_cls_b32: 3.904  loss_cls_b33: 4.002  loss_triplet_b1: 0.5413  loss_triplet_b2: 0.5185  loss_triplet_b3: 0.5223  loss_triplet_b22: 0.6062  loss_triplet_b33: 0.6427  time: 0.9355  data_time: 0.0006  lr: 2.55e-04  max_mem: 252M
[07/09 12:32:52] fastreid.utils.events INFO:  eta: 0:34:11  epoch/iter: 23/1463  total_loss: 30.58  loss_cls_b1: 3.274  loss_cls_b2: 3.39  loss_cls_b21: 3.452  loss_cls_b22: 3.554  loss_cls_b3: 3.446  loss_cls_b31: 3.51  loss_cls_b32: 3.574  loss_cls_b33: 3.663  loss_triplet_b1: 0.455  loss_triplet_b2: 0.4442  loss_triplet_b3: 0.4574  loss_triplet_b22: 0.5127  loss_triplet_b33: 0.5484  time: 0.9363  data_time: 0.0005  lr: 2.64e-04  max_mem: 252M
[07/09 12:33:50] fastreid.utils.events INFO:  eta: 0:33:16  epoch/iter: 24/1524  total_loss: 27.47  loss_cls_b1: 2.931  loss_cls_b2: 3.033  loss_cls_b21: 3.112  loss_cls_b22: 3.235  loss_cls_b3: 3.1  loss_cls_b31: 3.26  loss_cls_b32: 3.221  loss_cls_b33: 3.41  loss_triplet_b1: 0.4064  loss_triplet_b2: 0.4149  loss_triplet_b3: 0.4206  loss_triplet_b22: 0.4712  loss_triplet_b33: 0.5139  time: 0.9369  data_time: 0.0007  lr: 2.74e-04  max_mem: 252M
[07/09 12:34:51] fastreid.utils.events INFO:  eta: 0:32:21  epoch/iter: 25/1585  total_loss: 25.86  loss_cls_b1: 2.692  loss_cls_b2: 2.829  loss_cls_b21: 2.928  loss_cls_b22: 3.075  loss_cls_b3: 2.932  loss_cls_b31: 3.069  loss_cls_b32: 3.08  loss_cls_b33: 3.225  loss_triplet_b1: 0.3679  loss_triplet_b2: 0.3458  loss_triplet_b3: 0.3689  loss_triplet_b22: 0.4093  loss_triplet_b33: 0.4462  time: 0.9391  data_time: 0.0012  lr: 2.84e-04  max_mem: 252M
[07/09 12:35:04] fastreid.utils.events INFO:  eta: 0:32:09  epoch/iter: 26/1599  total_loss: 25.45  loss_cls_b1: 2.619  loss_cls_b2: 2.779  loss_cls_b21: 2.893  loss_cls_b22: 3.024  loss_cls_b3: 2.852  loss_cls_b31: 3.002  loss_cls_b32: 3.029  loss_cls_b33: 3.191  loss_triplet_b1: 0.3669  loss_triplet_b2: 0.3447  loss_triplet_b3: 0.3614  loss_triplet_b22: 0.3999  loss_triplet_b33: 0.4447  time: 0.9391  data_time: 0.0006  lr: 2.86e-04  max_mem: 252M
[07/09 12:35:49] fastreid.utils.events INFO:  eta: 0:31:26  epoch/iter: 26/1646  total_loss: 24.5  loss_cls_b1: 2.561  loss_cls_b2: 2.688  loss_cls_b21: 2.819  loss_cls_b22: 2.934  loss_cls_b3: 2.695  loss_cls_b31: 2.93  loss_cls_b32: 2.92  loss_cls_b33: 3.08  loss_triplet_b1: 0.3551  loss_triplet_b2: 0.3317  loss_triplet_b3: 0.3572  loss_triplet_b22: 0.3814  loss_triplet_b33: 0.3956  time: 0.9396  data_time: 0.0006  lr: 2.93e-04  max_mem: 252M
[07/09 12:36:48] fastreid.utils.events INFO:  eta: 0:30:30  epoch/iter: 27/1707  total_loss: 22.08  loss_cls_b1: 2.289  loss_cls_b2: 2.416  loss_cls_b21: 2.572  loss_cls_b22: 2.723  loss_cls_b3: 2.442  loss_cls_b31: 2.689  loss_cls_b32: 2.713  loss_cls_b33: 2.888  loss_triplet_b1: 0.3073  loss_triplet_b2: 0.3087  loss_triplet_b3: 0.3172  loss_triplet_b22: 0.3339  loss_triplet_b33: 0.3517  time: 0.9402  data_time: 0.0007  lr: 3.03e-04  max_mem: 252M
[07/09 12:37:45] fastreid.utils.events INFO:  eta: 0:29:34  epoch/iter: 28/1768  total_loss: 21.11  loss_cls_b1: 2.147  loss_cls_b2: 2.261  loss_cls_b21: 2.375  loss_cls_b22: 2.58  loss_cls_b3: 2.311  loss_cls_b31: 2.51  loss_cls_b32: 2.605  loss_cls_b33: 2.664  loss_triplet_b1: 0.2625  loss_triplet_b2: 0.273  loss_triplet_b3: 0.2848  loss_triplet_b22: 0.2988  loss_triplet_b33: 0.322  time: 0.9404  data_time: 0.0008  lr: 3.12e-04  max_mem: 252M
[07/09 12:38:15] fastreid.utils.events INFO:  eta: 0:29:06  epoch/iter: 29/1799  total_loss: 20.54  loss_cls_b1: 2.093  loss_cls_b2: 2.203  loss_cls_b21: 2.342  loss_cls_b22: 2.511  loss_cls_b3: 2.241  loss_cls_b31: 2.439  loss_cls_b32: 2.5  loss_cls_b33: 2.651  loss_triplet_b1: 0.2548  loss_triplet_b2: 0.2621  loss_triplet_b3: 0.2643  loss_triplet_b22: 0.2863  loss_triplet_b33: 0.3035  time: 0.9406  data_time: 0.0006  lr: 3.17e-04  max_mem: 252M
[07/09 12:38:43] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:38:43] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 878        | 1           |
| gallery  | 297     | 3956       | 1           |[0m
[07/09 12:38:43] fastreid.evaluation.evaluator INFO: Start inference on 4834 images
[07/09 12:38:52] fastreid.evaluation.evaluator INFO: Inference done 11/38. 0.5832 s / batch. ETA=0:00:15
[07/09 12:39:07] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:18.883100 (0.572215 s / batch per device, on 1 devices)
[07/09 12:39:07] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:18 (0.567719 s / batch per device, on 1 devices)
[07/09 12:39:08] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[07/09 12:39:08] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 75.94    | 88.37    | 91.33     | 59.74 | 18.73  | 67.84    |[0m
[07/09 12:39:08] fastreid.utils.events INFO:  eta: 0:28:38  epoch/iter: 29/1829  total_loss: 20.14  loss_cls_b1: 2.028  loss_cls_b2: 2.151  loss_cls_b21: 2.316  loss_cls_b22: 2.46  loss_cls_b3: 2.205  loss_cls_b31: 2.399  loss_cls_b32: 2.467  loss_cls_b33: 2.584  loss_triplet_b1: 0.2496  loss_triplet_b2: 0.259  loss_triplet_b3: 0.2608  loss_triplet_b22: 0.2857  loss_triplet_b33: 0.2996  time: 0.9407  data_time: 0.0009  lr: 3.22e-04  max_mem: 252M
[07/09 12:40:06] fastreid.utils.events INFO:  eta: 0:27:42  epoch/iter: 30/1890  total_loss: 18.76  loss_cls_b1: 1.926  loss_cls_b2: 1.983  loss_cls_b21: 2.19  loss_cls_b22: 2.333  loss_cls_b3: 2.044  loss_cls_b31: 2.274  loss_cls_b32: 2.361  loss_cls_b33: 2.45  loss_triplet_b1: 0.2278  loss_triplet_b2: 0.2246  loss_triplet_b3: 0.2302  loss_triplet_b22: 0.2329  loss_triplet_b33: 0.2488  time: 0.9410  data_time: 0.0006  lr: 3.32e-04  max_mem: 252M
[07/09 12:41:03] fastreid.utils.events INFO:  eta: 0:26:45  epoch/iter: 31/1951  total_loss: 17.96  loss_cls_b1: 1.812  loss_cls_b2: 1.896  loss_cls_b21: 2.047  loss_cls_b22: 2.199  loss_cls_b3: 1.954  loss_cls_b31: 2.15  loss_cls_b32: 2.253  loss_cls_b33: 2.352  loss_triplet_b1: 0.217  loss_triplet_b2: 0.2246  loss_triplet_b3: 0.2295  loss_triplet_b22: 0.2329  loss_triplet_b33: 0.2386  time: 0.9410  data_time: 0.0006  lr: 3.41e-04  max_mem: 252M
[07/09 12:41:48] fastreid.utils.events INFO:  eta: 0:26:00  epoch/iter: 32/1999  total_loss: 17.36  loss_cls_b1: 1.765  loss_cls_b2: 1.845  loss_cls_b21: 2.029  loss_cls_b22: 2.152  loss_cls_b3: 1.887  loss_cls_b31: 2.119  loss_cls_b32: 2.162  loss_cls_b33: 2.333  loss_triplet_b1: 0.21  loss_triplet_b2: 0.2151  loss_triplet_b3: 0.2205  loss_triplet_b22: 0.2293  loss_triplet_b33: 0.2325  time: 0.9409  data_time: 0.0007  lr: 3.49e-04  max_mem: 252M
[07/09 12:42:01] fastreid.utils.events INFO:  eta: 0:25:47  epoch/iter: 32/2012  total_loss: 16.91  loss_cls_b1: 1.727  loss_cls_b2: 1.781  loss_cls_b21: 1.97  loss_cls_b22: 2.117  loss_cls_b3: 1.824  loss_cls_b31: 2.091  loss_cls_b32: 2.148  loss_cls_b33: 2.305  loss_triplet_b1: 0.204  loss_triplet_b2: 0.2019  loss_triplet_b3: 0.2079  loss_triplet_b22: 0.223  loss_triplet_b33: 0.2281  time: 0.9409  data_time: 0.0005  lr: 3.49e-04  max_mem: 252M
[07/09 12:42:58] fastreid.utils.events INFO:  eta: 0:24:49  epoch/iter: 33/2073  total_loss: 16.48  loss_cls_b1: 1.662  loss_cls_b2: 1.734  loss_cls_b21: 1.909  loss_cls_b22: 2.073  loss_cls_b3: 1.768  loss_cls_b31: 2.018  loss_cls_b32: 2.031  loss_cls_b33: 2.264  loss_triplet_b1: 0.1958  loss_triplet_b2: 0.1965  loss_triplet_b3: 0.1965  loss_triplet_b22: 0.2141  loss_triplet_b33: 0.2225  time: 0.9409  data_time: 0.0006  lr: 3.48e-04  max_mem: 252M
[07/09 12:43:55] fastreid.utils.events INFO:  eta: 0:23:51  epoch/iter: 34/2134  total_loss: 15.73  loss_cls_b1: 1.571  loss_cls_b2: 1.68  loss_cls_b21: 1.83  loss_cls_b22: 1.99  loss_cls_b3: 1.703  loss_cls_b31: 1.939  loss_cls_b32: 1.981  loss_cls_b33: 2.119  loss_triplet_b1: 0.1791  loss_triplet_b2: 0.1784  loss_triplet_b3: 0.1836  loss_triplet_b22: 0.1897  loss_triplet_b33: 0.1967  time: 0.9409  data_time: 0.0005  lr: 3.44e-04  max_mem: 252M
[07/09 12:44:53] fastreid.utils.events INFO:  eta: 0:22:54  epoch/iter: 35/2195  total_loss: 14.64  loss_cls_b1: 1.454  loss_cls_b2: 1.498  loss_cls_b21: 1.724  loss_cls_b22: 1.805  loss_cls_b3: 1.528  loss_cls_b31: 1.849  loss_cls_b32: 1.918  loss_cls_b33: 2.019  loss_triplet_b1: 0.1582  loss_triplet_b2: 0.1483  loss_triplet_b3: 0.1532  loss_triplet_b22: 0.1442  loss_triplet_b33: 0.1595  time: 0.9408  data_time: 0.0004  lr: 3.38e-04  max_mem: 252M
[07/09 12:44:56] fastreid.utils.events INFO:  eta: 0:22:50  epoch/iter: 36/2199  total_loss: 14.56  loss_cls_b1: 1.441  loss_cls_b2: 1.493  loss_cls_b21: 1.722  loss_cls_b22: 1.792  loss_cls_b3: 1.519  loss_cls_b31: 1.839  loss_cls_b32: 1.907  loss_cls_b33: 2.002  loss_triplet_b1: 0.1572  loss_triplet_b2: 0.1469  loss_triplet_b3: 0.1515  loss_triplet_b22: 0.144  loss_triplet_b33: 0.1565  time: 0.9408  data_time: 0.0005  lr: 3.30e-04  max_mem: 252M
[07/09 12:45:50] fastreid.utils.events INFO:  eta: 0:21:56  epoch/iter: 36/2256  total_loss: 14.01  loss_cls_b1: 1.372  loss_cls_b2: 1.435  loss_cls_b21: 1.655  loss_cls_b22: 1.746  loss_cls_b3: 1.477  loss_cls_b31: 1.738  loss_cls_b32: 1.824  loss_cls_b33: 1.916  loss_triplet_b1: 0.1405  loss_triplet_b2: 0.1222  loss_triplet_b3: 0.1301  loss_triplet_b22: 0.1262  loss_triplet_b33: 0.137  time: 0.9409  data_time: 0.0005  lr: 3.30e-04  max_mem: 252M
[07/09 12:46:47] fastreid.utils.events INFO:  eta: 0:20:58  epoch/iter: 37/2317  total_loss: 13  loss_cls_b1: 1.274  loss_cls_b2: 1.359  loss_cls_b21: 1.534  loss_cls_b22: 1.641  loss_cls_b3: 1.423  loss_cls_b31: 1.619  loss_cls_b32: 1.746  loss_cls_b33: 1.849  loss_triplet_b1: 0.114  loss_triplet_b2: 0.1135  loss_triplet_b3: 0.1126  loss_triplet_b22: 0.1017  loss_triplet_b33: 0.1162  time: 0.9408  data_time: 0.0006  lr: 3.20e-04  max_mem: 252M
[07/09 12:47:45] fastreid.utils.events INFO:  eta: 0:20:01  epoch/iter: 38/2378  total_loss: 11.94  loss_cls_b1: 1.179  loss_cls_b2: 1.217  loss_cls_b21: 1.437  loss_cls_b22: 1.546  loss_cls_b3: 1.26  loss_cls_b31: 1.5  loss_cls_b32: 1.643  loss_cls_b33: 1.782  loss_triplet_b1: 0.101  loss_triplet_b2: 0.0994  loss_triplet_b3: 0.1067  loss_triplet_b22: 0.09079  loss_triplet_b33: 0.0902  time: 0.9408  data_time: 0.0006  lr: 3.08e-04  max_mem: 252M
[07/09 12:48:05] fastreid.utils.events INFO:  eta: 0:19:41  epoch/iter: 39/2399  total_loss: 11.92  loss_cls_b1: 1.167  loss_cls_b2: 1.203  loss_cls_b21: 1.437  loss_cls_b22: 1.541  loss_cls_b3: 1.255  loss_cls_b31: 1.5  loss_cls_b32: 1.636  loss_cls_b33: 1.786  loss_triplet_b1: 0.09861  loss_triplet_b2: 0.09551  loss_triplet_b3: 0.1024  loss_triplet_b22: 0.09079  loss_triplet_b33: 0.09387  time: 0.9408  data_time: 0.0006  lr: 2.94e-04  max_mem: 252M
[07/09 12:48:42] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:48:42] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 878        | 1           |
| gallery  | 297     | 3956       | 1           |[0m
[07/09 12:48:42] fastreid.evaluation.evaluator INFO: Start inference on 4834 images
[07/09 12:48:50] fastreid.evaluation.evaluator INFO: Inference done 11/38. 0.5970 s / batch. ETA=0:00:16
[07/09 12:49:05] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:18.374280 (0.556796 s / batch per device, on 1 devices)
[07/09 12:49:05] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:18 (0.554115 s / batch per device, on 1 devices)
[07/09 12:49:06] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[07/09 12:49:06] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 78.22    | 89.62    | 92.82     | 66.12 | 25.84  | 72.17    |[0m
[07/09 12:49:06] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[07/09 12:49:10] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_0039.pth
[07/09 12:49:12] fastreid.utils.events INFO:  eta: 0:19:03  epoch/iter: 39/2439  total_loss: 11.29  loss_cls_b1: 1.087  loss_cls_b2: 1.124  loss_cls_b21: 1.364  loss_cls_b22: 1.453  loss_cls_b3: 1.175  loss_cls_b31: 1.423  loss_cls_b32: 1.554  loss_cls_b33: 1.634  loss_triplet_b1: 0.0818  loss_triplet_b2: 0.07863  loss_triplet_b3: 0.08973  loss_triplet_b22: 0.07239  loss_triplet_b33: 0.0814  time: 0.9408  data_time: 0.0006  lr: 2.94e-04  max_mem: 252M
[07/09 12:50:10] fastreid.utils.events INFO:  eta: 0:18:06  epoch/iter: 40/2500  total_loss: 10.59  loss_cls_b1: 1.048  loss_cls_b2: 1.069  loss_cls_b21: 1.31  loss_cls_b22: 1.38  loss_cls_b3: 1.119  loss_cls_b31: 1.378  loss_cls_b32: 1.498  loss_cls_b33: 1.573  loss_triplet_b1: 0.06658  loss_triplet_b2: 0.07063  loss_triplet_b3: 0.07577  loss_triplet_b22: 0.05898  loss_triplet_b33: 0.06307  time: 0.9409  data_time: 0.0007  lr: 2.79e-04  max_mem: 252M
[07/09 12:51:08] fastreid.utils.events INFO:  eta: 0:17:09  epoch/iter: 41/2561  total_loss: 10.05  loss_cls_b1: 0.9526  loss_cls_b2: 0.986  loss_cls_b21: 1.185  loss_cls_b22: 1.28  loss_cls_b3: 1.052  loss_cls_b31: 1.294  loss_cls_b32: 1.413  loss_cls_b33: 1.473  loss_triplet_b1: 0.05235  loss_triplet_b2: 0.05844  loss_triplet_b3: 0.06137  loss_triplet_b22: 0.04372  loss_triplet_b33: 0.0477  time: 0.9411  data_time: 0.0006  lr: 2.62e-04  max_mem: 252M
[07/09 12:51:44] fastreid.utils.events INFO:  eta: 0:16:33  epoch/iter: 42/2599  total_loss: 9.368  loss_cls_b1: 0.8857  loss_cls_b2: 0.9356  loss_cls_b21: 1.141  loss_cls_b22: 1.227  loss_cls_b3: 0.9758  loss_cls_b31: 1.254  loss_cls_b32: 1.318  loss_cls_b33: 1.404  loss_triplet_b1: 0.0468  loss_triplet_b2: 0.05199  loss_triplet_b3: 0.05089  loss_triplet_b22: 0.04179  loss_triplet_b33: 0.04236  time: 0.9412  data_time: 0.0007  lr: 2.44e-04  max_mem: 252M
[07/09 12:52:05] fastreid.utils.events INFO:  eta: 0:16:11  epoch/iter: 42/2622  total_loss: 9.325  loss_cls_b1: 0.8639  loss_cls_b2: 0.927  loss_cls_b21: 1.114  loss_cls_b22: 1.209  loss_cls_b3: 0.9586  loss_cls_b31: 1.204  loss_cls_b32: 1.297  loss_cls_b33: 1.387  loss_triplet_b1: 0.04755  loss_triplet_b2: 0.05358  loss_triplet_b3: 0.05296  loss_triplet_b22: 0.04237  loss_triplet_b33: 0.04153  time: 0.9412  data_time: 0.0007  lr: 2.44e-04  max_mem: 252M
[07/09 12:53:03] fastreid.utils.events INFO:  eta: 0:15:14  epoch/iter: 43/2683  total_loss: 8.694  loss_cls_b1: 0.8237  loss_cls_b2: 0.8826  loss_cls_b21: 1.062  loss_cls_b22: 1.17  loss_cls_b3: 0.9152  loss_cls_b31: 1.167  loss_cls_b32: 1.255  loss_cls_b33: 1.325  loss_triplet_b1: 0.04365  loss_triplet_b2: 0.04821  loss_triplet_b3: 0.0461  loss_triplet_b22: 0.04175  loss_triplet_b33: 0.03722  time: 0.9413  data_time: 0.0006  lr: 2.25e-04  max_mem: 252M
[07/09 12:54:01] fastreid.utils.events INFO:  eta: 0:14:17  epoch/iter: 44/2744  total_loss: 8.641  loss_cls_b1: 0.7886  loss_cls_b2: 0.8385  loss_cls_b21: 1.019  loss_cls_b22: 1.136  loss_cls_b3: 0.8886  loss_cls_b31: 1.134  loss_cls_b32: 1.245  loss_cls_b33: 1.311  loss_triplet_b1: 0.04127  loss_triplet_b2: 0.04234  loss_triplet_b3: 0.04529  loss_triplet_b22: 0.03801  loss_triplet_b33: 0.03564  time: 0.9413  data_time: 0.0006  lr: 2.05e-04  max_mem: 252M
[07/09 12:54:53] fastreid.utils.events INFO:  eta: 0:13:25  epoch/iter: 45/2799  total_loss: 7.914  loss_cls_b1: 0.747  loss_cls_b2: 0.7869  loss_cls_b21: 0.9499  loss_cls_b22: 1.022  loss_cls_b3: 0.8183  loss_cls_b31: 1.036  loss_cls_b32: 1.166  loss_cls_b33: 1.194  loss_triplet_b1: 0.03468  loss_triplet_b2: 0.03557  loss_triplet_b3: 0.04242  loss_triplet_b22: 0.03198  loss_triplet_b33: 0.0313  time: 0.9413  data_time: 0.0006  lr: 1.85e-04  max_mem: 252M
[07/09 12:54:58] fastreid.utils.events INFO:  eta: 0:13:19  epoch/iter: 45/2805  total_loss: 7.921  loss_cls_b1: 0.747  loss_cls_b2: 0.7869  loss_cls_b21: 0.9484  loss_cls_b22: 1.042  loss_cls_b3: 0.8183  loss_cls_b31: 1.039  loss_cls_b32: 1.166  loss_cls_b33: 1.195  loss_triplet_b1: 0.03551  loss_triplet_b2: 0.03492  loss_triplet_b3: 0.04101  loss_triplet_b22: 0.0325  loss_triplet_b33: 0.03214  time: 0.9414  data_time: 0.0006  lr: 1.85e-04  max_mem: 252M
[07/09 12:55:56] fastreid.utils.events INFO:  eta: 0:12:22  epoch/iter: 46/2866  total_loss: 7.248  loss_cls_b1: 0.6944  loss_cls_b2: 0.7356  loss_cls_b21: 0.8884  loss_cls_b22: 0.9591  loss_cls_b3: 0.756  loss_cls_b31: 0.9741  loss_cls_b32: 1.068  loss_cls_b33: 1.103  loss_triplet_b1: 0.03236  loss_triplet_b2: 0.02889  loss_triplet_b3: 0.03178  loss_triplet_b22: 0.02342  loss_triplet_b33: 0.02542  time: 0.9414  data_time: 0.0007  lr: 1.65e-04  max_mem: 252M
[07/09 12:56:53] fastreid.utils.events INFO:  eta: 0:11:25  epoch/iter: 47/2927  total_loss: 7.185  loss_cls_b1: 0.6583  loss_cls_b2: 0.7089  loss_cls_b21: 0.8581  loss_cls_b22: 0.9229  loss_cls_b3: 0.7334  loss_cls_b31: 0.9767  loss_cls_b32: 1.067  loss_cls_b33: 1.08  loss_triplet_b1: 0.03242  loss_triplet_b2: 0.02981  loss_triplet_b3: 0.03212  loss_triplet_b22: 0.02059  loss_triplet_b33: 0.02347  time: 0.9414  data_time: 0.0008  lr: 1.45e-04  max_mem: 252M
[07/09 12:57:51] fastreid.utils.events INFO:  eta: 0:10:27  epoch/iter: 48/2988  total_loss: 6.91  loss_cls_b1: 0.6305  loss_cls_b2: 0.6806  loss_cls_b21: 0.8283  loss_cls_b22: 0.9149  loss_cls_b3: 0.7068  loss_cls_b31: 0.9396  loss_cls_b32: 1.025  loss_cls_b33: 1.037  loss_triplet_b1: 0.02789  loss_triplet_b2: 0.02497  loss_triplet_b3: 0.02685  loss_triplet_b22: 0.01769  loss_triplet_b33: 0.02004  time: 0.9413  data_time: 0.0006  lr: 1.25e-04  max_mem: 252M
[07/09 12:58:01] fastreid.utils.events INFO:  eta: 0:10:17  epoch/iter: 49/2999  total_loss: 6.868  loss_cls_b1: 0.6303  loss_cls_b2: 0.6792  loss_cls_b21: 0.8268  loss_cls_b22: 0.9083  loss_cls_b3: 0.7018  loss_cls_b31: 0.9291  loss_cls_b32: 1.018  loss_cls_b33: 1.02  loss_triplet_b1: 0.02618  loss_triplet_b2: 0.02263  loss_triplet_b3: 0.02572  loss_triplet_b22: 0.01763  loss_triplet_b33: 0.01909  time: 0.9413  data_time: 0.0008  lr: 1.06e-04  max_mem: 252M
[07/09 12:58:48] fastreid.engine.defaults INFO: Prepare testing set
[07/09 12:58:48] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 878        | 1           |
| gallery  | 297     | 3956       | 1           |[0m
[07/09 12:58:48] fastreid.evaluation.evaluator INFO: Start inference on 4834 images
[07/09 12:58:56] fastreid.evaluation.evaluator INFO: Inference done 11/38. 0.6157 s / batch. ETA=0:00:16
[07/09 12:59:11] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:18.226996 (0.552333 s / batch per device, on 1 devices)
[07/09 12:59:11] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:18 (0.549294 s / batch per device, on 1 devices)
[07/09 12:59:11] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[07/09 12:59:11] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 80.50    | 90.42    | 92.59     | 69.96 | 30.38  | 75.23    |[0m
[07/09 12:59:11] fastreid.utils.events INFO:  eta: 0:09:30  epoch/iter: 49/3049  total_loss: 6.375  loss_cls_b1: 0.5799  loss_cls_b2: 0.6315  loss_cls_b21: 0.7683  loss_cls_b22: 0.8743  loss_cls_b3: 0.6476  loss_cls_b31: 0.8428  loss_cls_b32: 0.9559  loss_cls_b33: 0.9832  loss_triplet_b1: 0.02034  loss_triplet_b2: 0.01867  loss_triplet_b3: 0.02333  loss_triplet_b22: 0.0132  loss_triplet_b33: 0.01455  time: 0.9413  data_time: 0.0005  lr: 1.06e-04  max_mem: 252M
[07/09 13:00:09] fastreid.utils.events INFO:  eta: 0:08:34  epoch/iter: 50/3110  total_loss: 5.955  loss_cls_b1: 0.5375  loss_cls_b2: 0.5915  loss_cls_b21: 0.7265  loss_cls_b22: 0.8168  loss_cls_b3: 0.5857  loss_cls_b31: 0.7663  loss_cls_b32: 0.8703  loss_cls_b33: 0.9215  loss_triplet_b1: 0.01958  loss_triplet_b2: 0.01671  loss_triplet_b3: 0.02119  loss_triplet_b22: 0.01272  loss_triplet_b33: 0.0132  time: 0.9415  data_time: 0.0008  lr: 8.77e-05  max_mem: 252M
[07/09 13:01:07] fastreid.utils.events INFO:  eta: 0:07:37  epoch/iter: 51/3171  total_loss: 5.791  loss_cls_b1: 0.5295  loss_cls_b2: 0.5864  loss_cls_b21: 0.6817  loss_cls_b22: 0.8015  loss_cls_b3: 0.5784  loss_cls_b31: 0.7531  loss_cls_b32: 0.8703  loss_cls_b33: 0.9182  loss_triplet_b1: 0.01756  loss_triplet_b2: 0.01745  loss_triplet_b3: 0.02073  loss_triplet_b22: 0.01252  loss_triplet_b33: 0.01249  time: 0.9415  data_time: 0.0007  lr: 7.08e-05  max_mem: 252M
[07/09 13:01:33] fastreid.utils.events INFO:  eta: 0:07:10  epoch/iter: 52/3199  total_loss: 5.51  loss_cls_b1: 0.5044  loss_cls_b2: 0.5483  loss_cls_b21: 0.6413  loss_cls_b22: 0.7702  loss_cls_b3: 0.5461  loss_cls_b31: 0.7201  loss_cls_b32: 0.8335  loss_cls_b33: 0.8882  loss_triplet_b1: 0.0144  loss_triplet_b2: 0.01504  loss_triplet_b3: 0.01703  loss_triplet_b22: 0.009978  loss_triplet_b33: 0.0107  time: 0.9415  data_time: 0.0005  lr: 5.53e-05  max_mem: 252M
[07/09 13:02:04] fastreid.utils.events INFO:  eta: 0:06:40  epoch/iter: 52/3232  total_loss: 5.453  loss_cls_b1: 0.4908  loss_cls_b2: 0.5414  loss_cls_b21: 0.6302  loss_cls_b22: 0.7679  loss_cls_b3: 0.5505  loss_cls_b31: 0.7187  loss_cls_b32: 0.8182  loss_cls_b33: 0.8882  loss_triplet_b1: 0.01317  loss_triplet_b2: 0.01496  loss_triplet_b3: 0.01681  loss_triplet_b22: 0.009661  loss_triplet_b33: 0.01017  time: 0.9416  data_time: 0.0004  lr: 5.53e-05  max_mem: 252M
[07/09 13:03:02] fastreid.utils.events INFO:  eta: 0:05:42  epoch/iter: 53/3293  total_loss: 5.32  loss_cls_b1: 0.4824  loss_cls_b2: 0.5196  loss_cls_b21: 0.6218  loss_cls_b22: 0.734  loss_cls_b3: 0.5312  loss_cls_b31: 0.6818  loss_cls_b32: 0.8055  loss_cls_b33: 0.8349  loss_triplet_b1: 0.01318  loss_triplet_b2: 0.01607  loss_triplet_b3: 0.01814  loss_triplet_b22: 0.009611  loss_triplet_b33: 0.00961  time: 0.9416  data_time: 0.0005  lr: 4.14e-05  max_mem: 252M
[07/09 13:04:00] fastreid.utils.events INFO:  eta: 0:04:45  epoch/iter: 54/3354  total_loss: 5.153  loss_cls_b1: 0.4589  loss_cls_b2: 0.5132  loss_cls_b21: 0.6155  loss_cls_b22: 0.676  loss_cls_b3: 0.5103  loss_cls_b31: 0.6617  loss_cls_b32: 0.7666  loss_cls_b33: 0.786  loss_triplet_b1: 0.01078  loss_triplet_b2: 0.01499  loss_triplet_b3: 0.01481  loss_triplet_b22: 0.00771  loss_triplet_b33: 0.006961  time: 0.9416  data_time: 0.0005  lr: 2.93e-05  max_mem: 252M
[07/09 13:04:42] fastreid.utils.events INFO:  eta: 0:04:03  epoch/iter: 55/3399  total_loss: 5.021  loss_cls_b1: 0.4487  loss_cls_b2: 0.4814  loss_cls_b21: 0.6096  loss_cls_b22: 0.6721  loss_cls_b3: 0.5051  loss_cls_b31: 0.6506  loss_cls_b32: 0.7621  loss_cls_b33: 0.786  loss_triplet_b1: 0.01023  loss_triplet_b2: 0.01565  loss_triplet_b3: 0.01607  loss_triplet_b22: 0.009473  loss_triplet_b33: 0.007674  time: 0.9417  data_time: 0.0005  lr: 1.92e-05  max_mem: 252M
[07/09 13:04:57] fastreid.utils.events INFO:  eta: 0:03:48  epoch/iter: 55/3415  total_loss: 5.006  loss_cls_b1: 0.4487  loss_cls_b2: 0.4835  loss_cls_b21: 0.6016  loss_cls_b22: 0.6736  loss_cls_b3: 0.499  loss_cls_b31: 0.6547  loss_cls_b32: 0.756  loss_cls_b33: 0.7873  loss_triplet_b1: 0.01072  loss_triplet_b2: 0.01575  loss_triplet_b3: 0.01608  loss_triplet_b22: 0.009473  loss_triplet_b33: 0.007674  time: 0.9417  data_time: 0.0006  lr: 1.92e-05  max_mem: 252M
[07/09 13:05:55] fastreid.utils.events INFO:  eta: 0:02:51  epoch/iter: 56/3476  total_loss: 4.808  loss_cls_b1: 0.4379  loss_cls_b2: 0.464  loss_cls_b21: 0.5831  loss_cls_b22: 0.6687  loss_cls_b3: 0.4836  loss_cls_b31: 0.6471  loss_cls_b32: 0.7357  loss_cls_b33: 0.7873  loss_triplet_b1: 0.00916  loss_triplet_b2: 0.01158  loss_triplet_b3: 0.01345  loss_triplet_b22: 0.007554  loss_triplet_b33: 0.006329  time: 0.9417  data_time: 0.0006  lr: 1.12e-05  max_mem: 252M
[07/09 13:06:53] fastreid.utils.events INFO:  eta: 0:01:54  epoch/iter: 57/3537  total_loss: 4.698  loss_cls_b1: 0.4168  loss_cls_b2: 0.4405  loss_cls_b21: 0.5735  loss_cls_b22: 0.6418  loss_cls_b3: 0.4805  loss_cls_b31: 0.6215  loss_cls_b32: 0.7184  loss_cls_b33: 0.7711  loss_triplet_b1: 0.008561  loss_triplet_b2: 0.01064  loss_triplet_b3: 0.01318  loss_triplet_b22: 0.007205  loss_triplet_b33: 0.005927  time: 0.9418  data_time: 0.0005  lr: 5.39e-06  max_mem: 252M
[07/09 13:07:50] fastreid.utils.events INFO:  eta: 0:00:57  epoch/iter: 58/3598  total_loss: 4.645  loss_cls_b1: 0.4104  loss_cls_b2: 0.4377  loss_cls_b21: 0.562  loss_cls_b22: 0.6409  loss_cls_b3: 0.4597  loss_cls_b31: 0.6312  loss_cls_b32: 0.6936  loss_cls_b33: 0.75  loss_triplet_b1: 0.007902  loss_triplet_b2: 0.009679  loss_triplet_b3: 0.01224  loss_triplet_b22: 0.005782  loss_triplet_b33: 0.00536  time: 0.9418  data_time: 0.0005  lr: 1.88e-06  max_mem: 252M
[07/09 13:07:51] fastreid.utils.events INFO:  eta: 0:00:56  epoch/iter: 59/3599  total_loss: 4.634  loss_cls_b1: 0.4094  loss_cls_b2: 0.4364  loss_cls_b21: 0.5588  loss_cls_b22: 0.6361  loss_cls_b3: 0.4564  loss_cls_b31: 0.6257  loss_cls_b32: 0.6925  loss_cls_b33: 0.7455  loss_triplet_b1: 0.007657  loss_triplet_b2: 0.009679  loss_triplet_b3: 0.01224  loss_triplet_b22: 0.005646  loss_triplet_b33: 0.005261  time: 0.9418  data_time: 0.0005  lr: 7.00e-07  max_mem: 252M
[07/09 13:08:48] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3659  total_loss: 4.616  loss_cls_b1: 0.4031  loss_cls_b2: 0.4353  loss_cls_b21: 0.5522  loss_cls_b22: 0.6279  loss_cls_b3: 0.4605  loss_cls_b31: 0.6215  loss_cls_b32: 0.6958  loss_cls_b33: 0.7393  loss_triplet_b1: 0.007927  loss_triplet_b2: 0.009994  loss_triplet_b3: 0.01255  loss_triplet_b22: 0.005646  loss_triplet_b33: 0.004921  time: 0.9418  data_time: 0.0006  lr: 7.00e-07  max_mem: 252M
[07/09 13:08:48] fastreid.engine.defaults INFO: Prepare testing set
[07/09 13:08:48] fastreid.data.datasets.bases INFO: => Loaded WildSplit6 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 878        | 1           |
| gallery  | 297     | 3956       | 1           |[0m
[07/09 13:08:48] fastreid.evaluation.evaluator INFO: Start inference on 4834 images
[07/09 13:08:55] fastreid.evaluation.evaluator INFO: Inference done 11/38. 0.5430 s / batch. ETA=0:00:14
[07/09 13:09:10] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:17.454340 (0.528919 s / batch per device, on 1 devices)
[07/09 13:09:10] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:17 (0.527431 s / batch per device, on 1 devices)
[07/09 13:09:10] fastreid.engine.defaults INFO: Evaluation results for WildSplit6 in csv format:
[07/09 13:09:10] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit6 | 81.07    | 90.31    | 92.82     | 70.95 | 32.62  | 76.01    |[0m
[07/09 13:09:10] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_best.pth
[07/09 13:09:14] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit6/mgn_R50-ibn/model_final.pth
[07/09 13:09:17] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3659  total_loss: 4.616  loss_cls_b1: 0.4031  loss_cls_b2: 0.4353  loss_cls_b21: 0.5522  loss_cls_b22: 0.6279  loss_cls_b3: 0.4605  loss_cls_b31: 0.6215  loss_cls_b32: 0.6958  loss_cls_b33: 0.7393  loss_triplet_b1: 0.007927  loss_triplet_b2: 0.009994  loss_triplet_b3: 0.01255  loss_triplet_b22: 0.005646  loss_triplet_b33: 0.004921  time: 0.9418  data_time: 0.0006  lr: 7.00e-07  max_mem: 252M
[07/09 13:09:17] fastreid.engine.hooks INFO: Overall training speed: 3658 iterations in 0:57:25 (0.9419 s / it)
[07/09 13:09:17] fastreid.engine.hooks INFO: Total training time: 1:00:07 (0:02:42 on hooks)
