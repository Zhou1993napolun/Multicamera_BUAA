[05/30 16:41:29] fastreid INFO: Rank of current process: 0. World size: 1
[05/30 16:41:31] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[05/30 16:41:31] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[05/30 16:41:31] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[05/30 16:41:31] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[05/30 16:41:31] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[05/30 16:41:31] fastreid.utils.env INFO: Using a generated random seed 32138144
[05/30 16:41:31] fastreid.engine.defaults INFO: Prepare training set
[05/30 16:41:31] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[05/30 16:41:31] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[05/30 16:41:31] fastreid.engine.defaults INFO: Auto-scaling the num_classes=286
[05/30 16:41:32] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[05/30 16:41:33] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[05/30 16:41:53] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
)
[05/30 16:41:56] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[05/30 16:41:56] fastreid.engine.train_loop INFO: Starting training from epoch 0
[05/30 16:41:56] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[05/30 16:42:16] fastreid.utils.events INFO:  eta: 0:14:54  epoch/iter: 0/58  total_loss: 57.29  loss_cls_b1: 6.2  loss_cls_b2: 6.165  loss_cls_b21: 6.212  loss_cls_b22: 6.233  loss_cls_b3: 6.185  loss_cls_b31: 6.147  loss_cls_b32: 6.15  loss_cls_b33: 6.136  loss_triplet_b1: 1.349  loss_triplet_b2: 1.383  loss_triplet_b3: 1.361  loss_triplet_b22: 1.611  loss_triplet_b33: 1.857  time: 0.2568  data_time: 0.0008  lr: 4.35e-05  max_mem: 23742M
[05/30 16:42:31] fastreid.utils.events INFO:  eta: 0:14:34  epoch/iter: 1/117  total_loss: 57.31  loss_cls_b1: 6.199  loss_cls_b2: 6.17  loss_cls_b21: 6.191  loss_cls_b22: 6.195  loss_cls_b3: 6.204  loss_cls_b31: 6.144  loss_cls_b32: 6.187  loss_cls_b33: 6.187  loss_triplet_b1: 1.375  loss_triplet_b2: 1.412  loss_triplet_b3: 1.4  loss_triplet_b22: 1.693  loss_triplet_b33: 1.89  time: 0.2556  data_time: 0.0005  lr: 5.28e-05  max_mem: 23742M
[05/30 16:42:46] fastreid.utils.events INFO:  eta: 0:14:16  epoch/iter: 2/176  total_loss: 57.29  loss_cls_b1: 6.218  loss_cls_b2: 6.173  loss_cls_b21: 6.211  loss_cls_b22: 6.217  loss_cls_b3: 6.214  loss_cls_b31: 6.142  loss_cls_b32: 6.181  loss_cls_b33: 6.195  loss_triplet_b1: 1.367  loss_triplet_b2: 1.401  loss_triplet_b3: 1.389  loss_triplet_b22: 1.669  loss_triplet_b33: 1.856  time: 0.2552  data_time: 0.0005  lr: 6.19e-05  max_mem: 23742M
[05/30 16:42:52] fastreid.utils.events INFO:  eta: 0:14:10  epoch/iter: 3/199  total_loss: 57.28  loss_cls_b1: 6.218  loss_cls_b2: 6.17  loss_cls_b21: 6.204  loss_cls_b22: 6.207  loss_cls_b3: 6.21  loss_cls_b31: 6.14  loss_cls_b32: 6.173  loss_cls_b33: 6.201  loss_triplet_b1: 1.357  loss_triplet_b2: 1.399  loss_triplet_b3: 1.385  loss_triplet_b22: 1.653  loss_triplet_b33: 1.855  time: 0.2552  data_time: 0.0005  lr: 6.56e-05  max_mem: 23742M
[05/30 16:43:02] fastreid.utils.events INFO:  eta: 0:14:01  epoch/iter: 3/235  total_loss: 57.21  loss_cls_b1: 6.219  loss_cls_b2: 6.185  loss_cls_b21: 6.199  loss_cls_b22: 6.217  loss_cls_b3: 6.215  loss_cls_b31: 6.141  loss_cls_b32: 6.175  loss_cls_b33: 6.206  loss_triplet_b1: 1.36  loss_triplet_b2: 1.398  loss_triplet_b3: 1.389  loss_triplet_b22: 1.656  loss_triplet_b33: 1.851  time: 0.2556  data_time: 0.0008  lr: 7.12e-05  max_mem: 23742M
[05/30 16:43:17] fastreid.utils.events INFO:  eta: 0:13:45  epoch/iter: 4/294  total_loss: 57.29  loss_cls_b1: 6.212  loss_cls_b2: 6.188  loss_cls_b21: 6.2  loss_cls_b22: 6.223  loss_cls_b3: 6.22  loss_cls_b31: 6.147  loss_cls_b32: 6.172  loss_cls_b33: 6.201  loss_triplet_b1: 1.371  loss_triplet_b2: 1.408  loss_triplet_b3: 1.389  loss_triplet_b22: 1.675  loss_triplet_b33: 1.856  time: 0.2553  data_time: 0.0005  lr: 8.05e-05  max_mem: 23742M
[05/30 16:43:32] fastreid.utils.events INFO:  eta: 0:13:29  epoch/iter: 5/353  total_loss: 57.3  loss_cls_b1: 6.205  loss_cls_b2: 6.193  loss_cls_b21: 6.201  loss_cls_b22: 6.218  loss_cls_b3: 6.227  loss_cls_b31: 6.176  loss_cls_b32: 6.17  loss_cls_b33: 6.202  loss_triplet_b1: 1.365  loss_triplet_b2: 1.403  loss_triplet_b3: 1.379  loss_triplet_b22: 1.671  loss_triplet_b33: 1.873  time: 0.2551  data_time: 0.0007  lr: 8.98e-05  max_mem: 23742M
[05/30 16:43:44] fastreid.utils.events INFO:  eta: 0:13:16  epoch/iter: 6/399  total_loss: 57.3  loss_cls_b1: 6.204  loss_cls_b2: 6.206  loss_cls_b21: 6.203  loss_cls_b22: 6.233  loss_cls_b3: 6.216  loss_cls_b31: 6.172  loss_cls_b32: 6.162  loss_cls_b33: 6.204  loss_triplet_b1: 1.361  loss_triplet_b2: 1.404  loss_triplet_b3: 1.378  loss_triplet_b22: 1.665  loss_triplet_b33: 1.883  time: 0.2548  data_time: 0.0007  lr: 9.71e-05  max_mem: 23742M
[05/30 16:43:47] fastreid.utils.events INFO:  eta: 0:13:13  epoch/iter: 6/412  total_loss: 57.23  loss_cls_b1: 6.201  loss_cls_b2: 6.199  loss_cls_b21: 6.201  loss_cls_b22: 6.218  loss_cls_b3: 6.211  loss_cls_b31: 6.176  loss_cls_b32: 6.166  loss_cls_b33: 6.204  loss_triplet_b1: 1.361  loss_triplet_b2: 1.408  loss_triplet_b3: 1.378  loss_triplet_b22: 1.671  loss_triplet_b33: 1.88  time: 0.2548  data_time: 0.0007  lr: 9.91e-05  max_mem: 23742M
[05/30 16:44:02] fastreid.utils.events INFO:  eta: 0:12:58  epoch/iter: 7/471  total_loss: 57.17  loss_cls_b1: 6.209  loss_cls_b2: 6.209  loss_cls_b21: 6.215  loss_cls_b22: 6.214  loss_cls_b3: 6.213  loss_cls_b31: 6.176  loss_cls_b32: 6.168  loss_cls_b33: 6.208  loss_triplet_b1: 1.362  loss_triplet_b2: 1.393  loss_triplet_b3: 1.365  loss_triplet_b22: 1.662  loss_triplet_b33: 1.877  time: 0.2546  data_time: 0.0005  lr: 1.08e-04  max_mem: 23742M
[05/30 16:44:17] fastreid.utils.events INFO:  eta: 0:12:43  epoch/iter: 8/530  total_loss: 57.46  loss_cls_b1: 6.21  loss_cls_b2: 6.21  loss_cls_b21: 6.231  loss_cls_b22: 6.238  loss_cls_b3: 6.207  loss_cls_b31: 6.161  loss_cls_b32: 6.168  loss_cls_b33: 6.221  loss_triplet_b1: 1.382  loss_triplet_b2: 1.4  loss_triplet_b3: 1.404  loss_triplet_b22: 1.697  loss_triplet_b33: 1.914  time: 0.2548  data_time: 0.0006  lr: 1.18e-04  max_mem: 23742M
[05/30 16:44:33] fastreid.engine.defaults INFO: Prepare testing set
[05/30 16:44:33] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 16:44:33] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 16:44:40] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.2157 s / batch. ETA=0:00:05
[05/30 16:44:47] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.392816 (0.262276 s / batch per device, on 1 devices)
[05/30 16:44:47] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.260494 s / batch per device, on 1 devices)
[05/30 16:44:48] fastreid.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/engine/train_loop.py", line 148, in train
    self.after_epoch()
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/engine/train_loop.py", line 182, in after_epoch
    h.after_epoch()
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/engine/hooks.py", line 377, in after_epoch
    self._do_eval()
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/engine/hooks.py", line 351, in _do_eval
    results = self._func()
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/engine/defaults.py", line 303, in test_and_save_results
    self._last_eval_results = self.test(self.cfg, self.model)
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/engine/defaults.py", line 439, in test
    results_i = inference_on_dataset(model, data_loader, evaluator, flip_test=cfg.TEST.FLIP.ENABLED)
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/evaluation/evaluator.py", line 156, in inference_on_dataset
    results = evaluator.evaluate()
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/evaluation/reid_evaluation.py", line 107, in evaluate
    cmc, all_AP, all_INP = evaluate_rank(dist, query_pids, gallery_pids, query_camids, gallery_camids)
  File "/data01/zhangleiting/_codes/fast-reid/./fastreid/evaluation/rank.py", line 198, in evaluate_rank
    return evaluate_cy(distmat, q_pids, g_pids, q_camids, g_camids, max_rank, use_metric_cuhk03)
  File "rank_cy.pyx", line 20, in rank_cy.evaluate_cy
  File "rank_cy.pyx", line 28, in rank_cy.evaluate_cy
  File "rank_cy.pyx", line 240, in rank_cy.eval_market1501_cy
AssertionError: Error: all query identities do not appear in gallery
[05/30 16:44:48] fastreid.engine.hooks INFO: Overall training speed: 588 iterations in 0:02:29 (0.2551 s / it)
[05/30 16:44:48] fastreid.engine.hooks INFO: Total training time: 0:02:46 (0:00:16 on hooks)
[05/30 17:03:06] fastreid INFO: Rank of current process: 0. World size: 1
[05/30 17:03:06] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[05/30 17:03:06] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[05/30 17:03:06] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[05/30 17:03:06] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[05/30 17:03:06] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[05/30 17:03:06] fastreid.utils.env INFO: Using a generated random seed 7434195
[05/30 17:03:06] fastreid.engine.defaults INFO: Prepare training set
[05/30 17:03:06] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[05/30 17:03:06] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[05/30 17:03:07] fastreid.engine.defaults INFO: Auto-scaling the num_classes=286
[05/30 17:03:07] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[05/30 17:03:07] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[05/30 17:03:13] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
)
[05/30 17:03:14] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[05/30 17:03:14] fastreid.engine.train_loop INFO: Starting training from epoch 0
[05/30 17:03:14] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[05/30 17:03:32] fastreid.utils.events INFO:  eta: 0:14:21  epoch/iter: 0/58  total_loss: 56.89  loss_cls_b1: 6.237  loss_cls_b2: 6.197  loss_cls_b21: 6.18  loss_cls_b22: 6.245  loss_cls_b3: 6.169  loss_cls_b31: 6.146  loss_cls_b32: 6.165  loss_cls_b33: 6.246  loss_triplet_b1: 1.335  loss_triplet_b2: 1.339  loss_triplet_b3: 1.325  loss_triplet_b22: 1.555  loss_triplet_b33: 1.773  time: 0.2485  data_time: 0.0008  lr: 4.35e-05  max_mem: 23742M
[05/30 17:03:47] fastreid.utils.events INFO:  eta: 0:14:10  epoch/iter: 1/117  total_loss: 57.3  loss_cls_b1: 6.223  loss_cls_b2: 6.198  loss_cls_b21: 6.207  loss_cls_b22: 6.251  loss_cls_b3: 6.146  loss_cls_b31: 6.158  loss_cls_b32: 6.17  loss_cls_b33: 6.233  loss_triplet_b1: 1.376  loss_triplet_b2: 1.367  loss_triplet_b3: 1.392  loss_triplet_b22: 1.683  loss_triplet_b33: 1.827  time: 0.2486  data_time: 0.0007  lr: 5.28e-05  max_mem: 23742M
[05/30 17:04:02] fastreid.utils.events INFO:  eta: 0:13:50  epoch/iter: 2/176  total_loss: 57.32  loss_cls_b1: 6.218  loss_cls_b2: 6.214  loss_cls_b21: 6.218  loss_cls_b22: 6.26  loss_cls_b3: 6.147  loss_cls_b31: 6.167  loss_cls_b32: 6.223  loss_cls_b33: 6.223  loss_triplet_b1: 1.383  loss_triplet_b2: 1.401  loss_triplet_b3: 1.39  loss_triplet_b22: 1.683  loss_triplet_b33: 1.9  time: 0.2473  data_time: 0.0006  lr: 6.21e-05  max_mem: 23742M
[05/30 17:04:07] fastreid.utils.events INFO:  eta: 0:13:43  epoch/iter: 3/199  total_loss: 57.27  loss_cls_b1: 6.216  loss_cls_b2: 6.215  loss_cls_b21: 6.212  loss_cls_b22: 6.247  loss_cls_b3: 6.15  loss_cls_b31: 6.168  loss_cls_b32: 6.223  loss_cls_b33: 6.218  loss_triplet_b1: 1.376  loss_triplet_b2: 1.39  loss_triplet_b3: 1.387  loss_triplet_b22: 1.687  loss_triplet_b33: 1.895  time: 0.2470  data_time: 0.0004  lr: 6.57e-05  max_mem: 23742M
[05/30 17:04:16] fastreid.utils.events INFO:  eta: 0:13:33  epoch/iter: 3/235  total_loss: 57.37  loss_cls_b1: 6.217  loss_cls_b2: 6.208  loss_cls_b21: 6.194  loss_cls_b22: 6.243  loss_cls_b3: 6.155  loss_cls_b31: 6.207  loss_cls_b32: 6.22  loss_cls_b33: 6.222  loss_triplet_b1: 1.404  loss_triplet_b2: 1.404  loss_triplet_b3: 1.397  loss_triplet_b22: 1.708  loss_triplet_b33: 1.925  time: 0.2469  data_time: 0.0006  lr: 7.14e-05  max_mem: 23742M
[05/30 17:04:31] fastreid.utils.events INFO:  eta: 0:13:17  epoch/iter: 4/294  total_loss: 57.37  loss_cls_b1: 6.208  loss_cls_b2: 6.2  loss_cls_b21: 6.194  loss_cls_b22: 6.229  loss_cls_b3: 6.154  loss_cls_b31: 6.192  loss_cls_b32: 6.216  loss_cls_b33: 6.229  loss_triplet_b1: 1.416  loss_triplet_b2: 1.404  loss_triplet_b3: 1.4  loss_triplet_b22: 1.713  loss_triplet_b33: 1.926  time: 0.2466  data_time: 0.0005  lr: 8.07e-05  max_mem: 23742M
[05/30 17:04:46] fastreid.utils.events INFO:  eta: 0:13:05  epoch/iter: 5/353  total_loss: 57.43  loss_cls_b1: 6.211  loss_cls_b2: 6.206  loss_cls_b21: 6.207  loss_cls_b22: 6.242  loss_cls_b3: 6.152  loss_cls_b31: 6.192  loss_cls_b32: 6.218  loss_cls_b33: 6.23  loss_triplet_b1: 1.417  loss_triplet_b2: 1.407  loss_triplet_b3: 1.396  loss_triplet_b22: 1.717  loss_triplet_b33: 1.928  time: 0.2473  data_time: 0.0008  lr: 9.00e-05  max_mem: 23742M
[05/30 17:04:57] fastreid.utils.events INFO:  eta: 0:12:56  epoch/iter: 6/399  total_loss: 57.37  loss_cls_b1: 6.21  loss_cls_b2: 6.201  loss_cls_b21: 6.207  loss_cls_b22: 6.242  loss_cls_b3: 6.155  loss_cls_b31: 6.191  loss_cls_b32: 6.197  loss_cls_b33: 6.239  loss_triplet_b1: 1.399  loss_triplet_b2: 1.393  loss_triplet_b3: 1.378  loss_triplet_b22: 1.687  loss_triplet_b33: 1.89  time: 0.2477  data_time: 0.0007  lr: 9.71e-05  max_mem: 23742M
[05/30 17:05:01] fastreid.utils.events INFO:  eta: 0:12:53  epoch/iter: 6/412  total_loss: 57.37  loss_cls_b1: 6.203  loss_cls_b2: 6.208  loss_cls_b21: 6.207  loss_cls_b22: 6.238  loss_cls_b3: 6.15  loss_cls_b31: 6.191  loss_cls_b32: 6.202  loss_cls_b33: 6.234  loss_triplet_b1: 1.403  loss_triplet_b2: 1.396  loss_triplet_b3: 1.378  loss_triplet_b22: 1.705  loss_triplet_b33: 1.902  time: 0.2478  data_time: 0.0008  lr: 9.91e-05  max_mem: 23742M
[05/30 17:05:16] fastreid.utils.events INFO:  eta: 0:12:40  epoch/iter: 7/471  total_loss: 57.4  loss_cls_b1: 6.197  loss_cls_b2: 6.201  loss_cls_b21: 6.215  loss_cls_b22: 6.245  loss_cls_b3: 6.151  loss_cls_b31: 6.189  loss_cls_b32: 6.2  loss_cls_b33: 6.226  loss_triplet_b1: 1.388  loss_triplet_b2: 1.4  loss_triplet_b3: 1.375  loss_triplet_b22: 1.697  loss_triplet_b33: 1.907  time: 0.2482  data_time: 0.0005  lr: 1.08e-04  max_mem: 23742M
[05/30 17:05:30] fastreid.utils.events INFO:  eta: 0:12:24  epoch/iter: 8/530  total_loss: 57.5  loss_cls_b1: 6.2  loss_cls_b2: 6.208  loss_cls_b21: 6.222  loss_cls_b22: 6.252  loss_cls_b3: 6.131  loss_cls_b31: 6.177  loss_cls_b32: 6.2  loss_cls_b33: 6.217  loss_triplet_b1: 1.393  loss_triplet_b2: 1.401  loss_triplet_b3: 1.395  loss_triplet_b22: 1.719  loss_triplet_b33: 1.911  time: 0.2478  data_time: 0.0005  lr: 1.18e-04  max_mem: 23742M
[05/30 17:05:45] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:05:45] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 17:05:45] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 17:05:51] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.2156 s / batch. ETA=0:00:05
[05/30 17:05:58] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.348491 (0.260890 s / batch per device, on 1 devices)
[05/30 17:05:58] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.259633 s / batch per device, on 1 devices)
[05/30 17:05:58] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[05/30 17:05:58] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 59.22    | 74.70    | 80.61     | 27.97 | 3.67   | 43.60    |[0m
[05/30 17:05:58] fastreid.utils.events INFO:  eta: 0:12:09  epoch/iter: 9/589  total_loss: 57.5  loss_cls_b1: 6.211  loss_cls_b2: 6.21  loss_cls_b21: 6.188  loss_cls_b22: 6.235  loss_cls_b3: 6.133  loss_cls_b31: 6.207  loss_cls_b32: 6.206  loss_cls_b33: 6.223  loss_triplet_b1: 1.391  loss_triplet_b2: 1.412  loss_triplet_b3: 1.399  loss_triplet_b22: 1.721  loss_triplet_b33: 1.911  time: 0.2476  data_time: 0.0007  lr: 1.27e-04  max_mem: 23742M
[05/30 17:06:01] fastreid.utils.events INFO:  eta: 0:12:06  epoch/iter: 10/599  total_loss: 57.53  loss_cls_b1: 6.216  loss_cls_b2: 6.209  loss_cls_b21: 6.199  loss_cls_b22: 6.234  loss_cls_b3: 6.131  loss_cls_b31: 6.205  loss_cls_b32: 6.215  loss_cls_b33: 6.23  loss_triplet_b1: 1.442  loss_triplet_b2: 1.439  loss_triplet_b3: 1.412  loss_triplet_b22: 1.753  loss_triplet_b33: 1.941  time: 0.2478  data_time: 0.0008  lr: 1.29e-04  max_mem: 23742M
[05/30 17:06:13] fastreid.utils.events INFO:  eta: 0:11:54  epoch/iter: 10/648  total_loss: 57.64  loss_cls_b1: 6.221  loss_cls_b2: 6.214  loss_cls_b21: 6.206  loss_cls_b22: 6.232  loss_cls_b3: 6.146  loss_cls_b31: 6.202  loss_cls_b32: 6.212  loss_cls_b33: 6.233  loss_triplet_b1: 1.449  loss_triplet_b2: 1.447  loss_triplet_b3: 1.433  loss_triplet_b22: 1.746  loss_triplet_b33: 1.911  time: 0.2477  data_time: 0.0005  lr: 1.36e-04  max_mem: 23742M
[05/30 17:06:28] fastreid.utils.events INFO:  eta: 0:11:39  epoch/iter: 11/707  total_loss: 57.89  loss_cls_b1: 6.208  loss_cls_b2: 6.215  loss_cls_b21: 6.197  loss_cls_b22: 6.239  loss_cls_b3: 6.155  loss_cls_b31: 6.215  loss_cls_b32: 6.226  loss_cls_b33: 6.242  loss_triplet_b1: 1.504  loss_triplet_b2: 1.499  loss_triplet_b3: 1.496  loss_triplet_b22: 1.767  loss_triplet_b33: 1.922  time: 0.2475  data_time: 0.0006  lr: 1.46e-04  max_mem: 23742M
[05/30 17:06:42] fastreid.utils.events INFO:  eta: 0:11:24  epoch/iter: 12/766  total_loss: 58.09  loss_cls_b1: 6.219  loss_cls_b2: 6.215  loss_cls_b21: 6.212  loss_cls_b22: 6.228  loss_cls_b3: 6.148  loss_cls_b31: 6.213  loss_cls_b32: 6.225  loss_cls_b33: 6.215  loss_triplet_b1: 1.546  loss_triplet_b2: 1.55  loss_triplet_b3: 1.565  loss_triplet_b22: 1.804  loss_triplet_b33: 1.977  time: 0.2476  data_time: 0.0008  lr: 1.55e-04  max_mem: 23742M
[05/30 17:06:51] fastreid.utils.events INFO:  eta: 0:11:16  epoch/iter: 13/799  total_loss: 58.07  loss_cls_b1: 6.204  loss_cls_b2: 6.211  loss_cls_b21: 6.206  loss_cls_b22: 6.235  loss_cls_b3: 6.149  loss_cls_b31: 6.207  loss_cls_b32: 6.206  loss_cls_b33: 6.216  loss_triplet_b1: 1.55  loss_triplet_b2: 1.565  loss_triplet_b3: 1.575  loss_triplet_b22: 1.805  loss_triplet_b33: 1.975  time: 0.2476  data_time: 0.0005  lr: 1.60e-04  max_mem: 23742M
[05/30 17:06:57] fastreid.utils.events INFO:  eta: 0:11:09  epoch/iter: 13/825  total_loss: 58.01  loss_cls_b1: 6.204  loss_cls_b2: 6.213  loss_cls_b21: 6.2  loss_cls_b22: 6.225  loss_cls_b3: 6.154  loss_cls_b31: 6.214  loss_cls_b32: 6.206  loss_cls_b33: 6.216  loss_triplet_b1: 1.544  loss_triplet_b2: 1.55  loss_triplet_b3: 1.572  loss_triplet_b22: 1.79  loss_triplet_b33: 1.964  time: 0.2475  data_time: 0.0005  lr: 1.64e-04  max_mem: 23742M
[05/30 17:07:12] fastreid.utils.events INFO:  eta: 0:10:56  epoch/iter: 14/884  total_loss: 58.01  loss_cls_b1: 6.209  loss_cls_b2: 6.209  loss_cls_b21: 6.197  loss_cls_b22: 6.24  loss_cls_b3: 6.126  loss_cls_b31: 6.199  loss_cls_b32: 6.211  loss_cls_b33: 6.224  loss_triplet_b1: 1.538  loss_triplet_b2: 1.544  loss_triplet_b3: 1.567  loss_triplet_b22: 1.775  loss_triplet_b33: 1.974  time: 0.2479  data_time: 0.0005  lr: 1.73e-04  max_mem: 23742M
[05/30 17:07:27] fastreid.utils.events INFO:  eta: 0:10:43  epoch/iter: 15/943  total_loss: 58.05  loss_cls_b1: 6.21  loss_cls_b2: 6.198  loss_cls_b21: 6.204  loss_cls_b22: 6.237  loss_cls_b3: 6.129  loss_cls_b31: 6.211  loss_cls_b32: 6.2  loss_cls_b33: 6.222  loss_triplet_b1: 1.559  loss_triplet_b2: 1.55  loss_triplet_b3: 1.577  loss_triplet_b22: 1.79  loss_triplet_b33: 1.969  time: 0.2484  data_time: 0.0006  lr: 1.83e-04  max_mem: 23742M
[05/30 17:07:42] fastreid.utils.events INFO:  eta: 0:10:29  epoch/iter: 16/999  total_loss: 58.01  loss_cls_b1: 6.209  loss_cls_b2: 6.205  loss_cls_b21: 6.203  loss_cls_b22: 6.236  loss_cls_b3: 6.129  loss_cls_b31: 6.218  loss_cls_b32: 6.214  loss_cls_b33: 6.222  loss_triplet_b1: 1.543  loss_triplet_b2: 1.526  loss_triplet_b3: 1.553  loss_triplet_b22: 1.766  loss_triplet_b33: 1.933  time: 0.2485  data_time: 0.0004  lr: 1.91e-04  max_mem: 23742M
[05/30 17:07:42] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[05/30 17:07:42] fastreid.utils.events INFO:  eta: 0:10:28  epoch/iter: 16/1002  total_loss: 58.01  loss_cls_b1: 6.21  loss_cls_b2: 6.206  loss_cls_b21: 6.203  loss_cls_b22: 6.236  loss_cls_b3: 6.138  loss_cls_b31: 6.215  loss_cls_b32: 6.213  loss_cls_b33: 6.225  loss_triplet_b1: 1.543  loss_triplet_b2: 1.526  loss_triplet_b3: 1.553  loss_triplet_b22: 1.766  loss_triplet_b33: 1.933  time: 0.2485  data_time: 0.0005  lr: 1.92e-04  max_mem: 23742M
[05/30 17:07:57] fastreid.utils.events INFO:  eta: 0:10:14  epoch/iter: 17/1061  total_loss: 57.46  loss_cls_b1: 6.154  loss_cls_b2: 6.165  loss_cls_b21: 6.164  loss_cls_b22: 6.187  loss_cls_b3: 6.121  loss_cls_b31: 6.166  loss_cls_b32: 6.177  loss_cls_b33: 6.193  loss_triplet_b1: 1.428  loss_triplet_b2: 1.421  loss_triplet_b3: 1.401  loss_triplet_b22: 1.621  loss_triplet_b33: 1.751  time: 0.2487  data_time: 0.0006  lr: 2.01e-04  max_mem: 23742M
[05/30 17:08:12] fastreid.utils.events INFO:  eta: 0:10:00  epoch/iter: 18/1120  total_loss: 54.23  loss_cls_b1: 6.073  loss_cls_b2: 6.062  loss_cls_b21: 6.072  loss_cls_b22: 6.09  loss_cls_b3: 6.064  loss_cls_b31: 6.089  loss_cls_b32: 6.088  loss_cls_b33: 6.083  loss_triplet_b1: 1.004  loss_triplet_b2: 0.9895  loss_triplet_b3: 0.9629  loss_triplet_b22: 1.031  loss_triplet_b33: 1.149  time: 0.2490  data_time: 0.0005  lr: 2.10e-04  max_mem: 23742M
[05/30 17:08:27] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:08:27] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 17:08:27] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 17:08:31] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.2360 s / batch. ETA=0:00:06
[05/30 17:08:36] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.752970 (0.211030 s / batch per device, on 1 devices)
[05/30 17:08:36] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.209962 s / batch per device, on 1 devices)
[05/30 17:08:37] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[05/30 17:08:37] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 81.09    | 91.61    | 93.62     | 57.52 | 17.97  | 69.31    |[0m
[05/30 17:08:37] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[05/30 17:08:39] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_0019.pth
[05/30 17:08:41] fastreid.utils.events INFO:  eta: 0:09:47  epoch/iter: 19/1179  total_loss: 48.99  loss_cls_b1: 5.533  loss_cls_b2: 5.66  loss_cls_b21: 5.549  loss_cls_b22: 5.731  loss_cls_b3: 5.672  loss_cls_b31: 5.662  loss_cls_b32: 5.627  loss_cls_b33: 5.728  loss_triplet_b1: 0.7239  loss_triplet_b2: 0.6571  loss_triplet_b3: 0.6831  loss_triplet_b22: 0.7292  loss_triplet_b33: 0.7843  time: 0.2492  data_time: 0.0007  lr: 2.20e-04  max_mem: 23742M
[05/30 17:08:46] fastreid.utils.events INFO:  eta: 0:09:42  epoch/iter: 20/1199  total_loss: 46.43  loss_cls_b1: 5.236  loss_cls_b2: 5.334  loss_cls_b21: 5.341  loss_cls_b22: 5.439  loss_cls_b3: 5.389  loss_cls_b31: 5.298  loss_cls_b32: 5.375  loss_cls_b33: 5.474  loss_triplet_b1: 0.6509  loss_triplet_b2: 0.6193  loss_triplet_b3: 0.6294  loss_triplet_b22: 0.6662  loss_triplet_b33: 0.7121  time: 0.2493  data_time: 0.0011  lr: 2.23e-04  max_mem: 23742M
[05/30 17:08:56] fastreid.utils.events INFO:  eta: 0:09:33  epoch/iter: 20/1238  total_loss: 42.58  loss_cls_b1: 4.862  loss_cls_b2: 4.977  loss_cls_b21: 4.743  loss_cls_b22: 5.119  loss_cls_b3: 4.98  loss_cls_b31: 4.868  loss_cls_b32: 4.981  loss_cls_b33: 5.133  loss_triplet_b1: 0.5732  loss_triplet_b2: 0.5201  loss_triplet_b3: 0.5336  loss_triplet_b22: 0.554  loss_triplet_b33: 0.6105  time: 0.2495  data_time: 0.0005  lr: 2.29e-04  max_mem: 23742M
[05/30 17:09:11] fastreid.utils.events INFO:  eta: 0:09:19  epoch/iter: 21/1297  total_loss: 36.07  loss_cls_b1: 4.133  loss_cls_b2: 4.222  loss_cls_b21: 4.154  loss_cls_b22: 4.369  loss_cls_b3: 4.265  loss_cls_b31: 4.142  loss_cls_b32: 4.337  loss_cls_b33: 4.394  loss_triplet_b1: 0.4631  loss_triplet_b2: 0.4546  loss_triplet_b3: 0.467  loss_triplet_b22: 0.4782  loss_triplet_b33: 0.5236  time: 0.2495  data_time: 0.0007  lr: 2.38e-04  max_mem: 23742M
[05/30 17:09:26] fastreid.utils.events INFO:  eta: 0:09:05  epoch/iter: 22/1356  total_loss: 32.61  loss_cls_b1: 3.616  loss_cls_b2: 3.779  loss_cls_b21: 3.683  loss_cls_b22: 3.995  loss_cls_b3: 3.828  loss_cls_b31: 3.782  loss_cls_b32: 3.863  loss_cls_b33: 4.08  loss_triplet_b1: 0.4254  loss_triplet_b2: 0.4105  loss_triplet_b3: 0.4152  loss_triplet_b22: 0.4201  loss_triplet_b33: 0.4461  time: 0.2498  data_time: 0.0007  lr: 2.48e-04  max_mem: 23742M
[05/30 17:09:38] fastreid.utils.events INFO:  eta: 0:08:55  epoch/iter: 23/1399  total_loss: 30.39  loss_cls_b1: 3.292  loss_cls_b2: 3.44  loss_cls_b21: 3.392  loss_cls_b22: 3.642  loss_cls_b3: 3.433  loss_cls_b31: 3.436  loss_cls_b32: 3.573  loss_cls_b33: 3.794  loss_triplet_b1: 0.3757  loss_triplet_b2: 0.3628  loss_triplet_b3: 0.3891  loss_triplet_b22: 0.381  loss_triplet_b33: 0.4074  time: 0.2500  data_time: 0.0005  lr: 2.54e-04  max_mem: 23742M
[05/30 17:09:42] fastreid.utils.events INFO:  eta: 0:08:51  epoch/iter: 23/1415  total_loss: 29.6  loss_cls_b1: 3.215  loss_cls_b2: 3.378  loss_cls_b21: 3.305  loss_cls_b22: 3.623  loss_cls_b3: 3.378  loss_cls_b31: 3.38  loss_cls_b32: 3.491  loss_cls_b33: 3.737  loss_triplet_b1: 0.3716  loss_triplet_b2: 0.3494  loss_triplet_b3: 0.3829  loss_triplet_b22: 0.3772  loss_triplet_b33: 0.3996  time: 0.2501  data_time: 0.0006  lr: 2.57e-04  max_mem: 23742M
[05/30 17:09:57] fastreid.utils.events INFO:  eta: 0:08:37  epoch/iter: 24/1474  total_loss: 25.97  loss_cls_b1: 2.747  loss_cls_b2: 2.948  loss_cls_b21: 2.982  loss_cls_b22: 3.184  loss_cls_b3: 2.987  loss_cls_b31: 3.006  loss_cls_b32: 3.049  loss_cls_b33: 3.386  loss_triplet_b1: 0.2919  loss_triplet_b2: 0.2912  loss_triplet_b3: 0.2987  loss_triplet_b22: 0.3147  loss_triplet_b33: 0.3228  time: 0.2501  data_time: 0.0005  lr: 2.66e-04  max_mem: 23742M
[05/30 17:10:12] fastreid.utils.events INFO:  eta: 0:08:23  epoch/iter: 25/1533  total_loss: 23.43  loss_cls_b1: 2.491  loss_cls_b2: 2.613  loss_cls_b21: 2.654  loss_cls_b22: 2.966  loss_cls_b3: 2.645  loss_cls_b31: 2.758  loss_cls_b32: 2.819  loss_cls_b33: 3.129  loss_triplet_b1: 0.2372  loss_triplet_b2: 0.2484  loss_triplet_b3: 0.2587  loss_triplet_b22: 0.2569  loss_triplet_b33: 0.2683  time: 0.2503  data_time: 0.0007  lr: 2.76e-04  max_mem: 23742M
[05/30 17:10:27] fastreid.utils.events INFO:  eta: 0:08:09  epoch/iter: 26/1592  total_loss: 21.63  loss_cls_b1: 2.314  loss_cls_b2: 2.415  loss_cls_b21: 2.448  loss_cls_b22: 2.759  loss_cls_b3: 2.464  loss_cls_b31: 2.566  loss_cls_b32: 2.717  loss_cls_b33: 2.981  loss_triplet_b1: 0.2142  loss_triplet_b2: 0.2141  loss_triplet_b3: 0.2211  loss_triplet_b22: 0.2197  loss_triplet_b33: 0.2366  time: 0.2503  data_time: 0.0006  lr: 2.85e-04  max_mem: 23742M
[05/30 17:10:29] fastreid.utils.events INFO:  eta: 0:08:07  epoch/iter: 27/1599  total_loss: 21.4  loss_cls_b1: 2.288  loss_cls_b2: 2.393  loss_cls_b21: 2.434  loss_cls_b22: 2.728  loss_cls_b3: 2.423  loss_cls_b31: 2.551  loss_cls_b32: 2.679  loss_cls_b33: 2.951  loss_triplet_b1: 0.2119  loss_triplet_b2: 0.2124  loss_triplet_b3: 0.2188  loss_triplet_b22: 0.2189  loss_triplet_b33: 0.2366  time: 0.2503  data_time: 0.0007  lr: 2.86e-04  max_mem: 23742M
[05/30 17:10:42] fastreid.utils.events INFO:  eta: 0:07:55  epoch/iter: 27/1651  total_loss: 20.02  loss_cls_b1: 2.068  loss_cls_b2: 2.145  loss_cls_b21: 2.321  loss_cls_b22: 2.528  loss_cls_b3: 2.226  loss_cls_b31: 2.346  loss_cls_b32: 2.418  loss_cls_b33: 2.767  loss_triplet_b1: 0.1795  loss_triplet_b2: 0.1734  loss_triplet_b3: 0.1794  loss_triplet_b22: 0.1845  loss_triplet_b33: 0.189  time: 0.2506  data_time: 0.0005  lr: 2.94e-04  max_mem: 23742M
[05/30 17:10:57] fastreid.utils.events INFO:  eta: 0:07:41  epoch/iter: 28/1710  total_loss: 19.18  loss_cls_b1: 1.959  loss_cls_b2: 2.079  loss_cls_b21: 2.182  loss_cls_b22: 2.414  loss_cls_b3: 2.107  loss_cls_b31: 2.274  loss_cls_b32: 2.322  loss_cls_b33: 2.656  loss_triplet_b1: 0.1739  loss_triplet_b2: 0.1828  loss_triplet_b3: 0.1801  loss_triplet_b22: 0.1915  loss_triplet_b33: 0.1786  time: 0.2507  data_time: 0.0006  lr: 3.03e-04  max_mem: 23742M
[05/30 17:11:12] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:11:12] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 17:11:12] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 17:11:16] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.2395 s / batch. ETA=0:00:06
[05/30 17:11:21] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.754511 (0.211078 s / batch per device, on 1 devices)
[05/30 17:11:21] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.209554 s / batch per device, on 1 devices)
[05/30 17:11:22] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[05/30 17:11:22] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 87.12    | 95.51    | 97.04     | 75.17 | 35.04  | 81.14    |[0m
[05/30 17:11:22] fastreid.utils.events INFO:  eta: 0:07:27  epoch/iter: 29/1769  total_loss: 17.51  loss_cls_b1: 1.768  loss_cls_b2: 1.909  loss_cls_b21: 2.007  loss_cls_b22: 2.305  loss_cls_b3: 1.928  loss_cls_b31: 2.139  loss_cls_b32: 2.199  loss_cls_b33: 2.536  loss_triplet_b1: 0.1552  loss_triplet_b2: 0.1576  loss_triplet_b3: 0.1615  loss_triplet_b22: 0.1616  loss_triplet_b33: 0.1542  time: 0.2508  data_time: 0.0006  lr: 3.13e-04  max_mem: 23742M
[05/30 17:11:29] fastreid.utils.events INFO:  eta: 0:07:20  epoch/iter: 30/1799  total_loss: 17.2  loss_cls_b1: 1.694  loss_cls_b2: 1.842  loss_cls_b21: 1.971  loss_cls_b22: 2.288  loss_cls_b3: 1.874  loss_cls_b31: 2.099  loss_cls_b32: 2.165  loss_cls_b33: 2.515  loss_triplet_b1: 0.1527  loss_triplet_b2: 0.155  loss_triplet_b3: 0.1571  loss_triplet_b22: 0.1529  loss_triplet_b33: 0.1454  time: 0.2508  data_time: 0.0006  lr: 3.17e-04  max_mem: 23742M
[05/30 17:11:37] fastreid.utils.events INFO:  eta: 0:07:13  epoch/iter: 30/1828  total_loss: 16.51  loss_cls_b1: 1.588  loss_cls_b2: 1.731  loss_cls_b21: 1.83  loss_cls_b22: 2.17  loss_cls_b3: 1.753  loss_cls_b31: 1.948  loss_cls_b32: 2.074  loss_cls_b33: 2.44  loss_triplet_b1: 0.1423  loss_triplet_b2: 0.143  loss_triplet_b3: 0.1544  loss_triplet_b22: 0.13  loss_triplet_b33: 0.1414  time: 0.2508  data_time: 0.0005  lr: 3.22e-04  max_mem: 23742M
[05/30 17:11:52] fastreid.utils.events INFO:  eta: 0:06:58  epoch/iter: 31/1887  total_loss: 14.93  loss_cls_b1: 1.467  loss_cls_b2: 1.552  loss_cls_b21: 1.716  loss_cls_b22: 2.007  loss_cls_b3: 1.616  loss_cls_b31: 1.846  loss_cls_b32: 1.874  loss_cls_b33: 2.262  loss_triplet_b1: 0.121  loss_triplet_b2: 0.1198  loss_triplet_b3: 0.1328  loss_triplet_b22: 0.1141  loss_triplet_b33: 0.1151  time: 0.2509  data_time: 0.0006  lr: 3.31e-04  max_mem: 23742M
[05/30 17:12:07] fastreid.utils.events INFO:  eta: 0:06:42  epoch/iter: 32/1946  total_loss: 14.37  loss_cls_b1: 1.404  loss_cls_b2: 1.479  loss_cls_b21: 1.62  loss_cls_b22: 1.96  loss_cls_b3: 1.551  loss_cls_b31: 1.788  loss_cls_b32: 1.862  loss_cls_b33: 2.179  loss_triplet_b1: 0.1098  loss_triplet_b2: 0.102  loss_triplet_b3: 0.1232  loss_triplet_b22: 0.1042  loss_triplet_b33: 0.1008  time: 0.2509  data_time: 0.0006  lr: 3.41e-04  max_mem: 23742M
[05/30 17:12:20] fastreid.utils.events INFO:  eta: 0:06:29  epoch/iter: 33/1999  total_loss: 13.67  loss_cls_b1: 1.344  loss_cls_b2: 1.404  loss_cls_b21: 1.504  loss_cls_b22: 1.839  loss_cls_b3: 1.462  loss_cls_b31: 1.677  loss_cls_b32: 1.8  loss_cls_b33: 2.049  loss_triplet_b1: 0.09211  loss_triplet_b2: 0.09439  loss_triplet_b3: 0.1072  loss_triplet_b22: 0.08446  loss_triplet_b33: 0.09433  time: 0.2510  data_time: 0.0005  lr: 3.49e-04  max_mem: 23742M
[05/30 17:12:22] fastreid.utils.events INFO:  eta: 0:06:27  epoch/iter: 33/2005  total_loss: 13.7  loss_cls_b1: 1.351  loss_cls_b2: 1.408  loss_cls_b21: 1.527  loss_cls_b22: 1.845  loss_cls_b3: 1.476  loss_cls_b31: 1.687  loss_cls_b32: 1.811  loss_cls_b33: 2.06  loss_triplet_b1: 0.09423  loss_triplet_b2: 0.09501  loss_triplet_b3: 0.1084  loss_triplet_b22: 0.0871  loss_triplet_b33: 0.09598  time: 0.2510  data_time: 0.0005  lr: 3.49e-04  max_mem: 23742M
[05/30 17:12:37] fastreid.utils.events INFO:  eta: 0:06:12  epoch/iter: 34/2064  total_loss: 13.08  loss_cls_b1: 1.247  loss_cls_b2: 1.343  loss_cls_b21: 1.478  loss_cls_b22: 1.75  loss_cls_b3: 1.402  loss_cls_b31: 1.621  loss_cls_b32: 1.721  loss_cls_b33: 2.003  loss_triplet_b1: 0.08131  loss_triplet_b2: 0.08771  loss_triplet_b3: 0.09871  loss_triplet_b22: 0.07724  loss_triplet_b33: 0.08439  time: 0.2510  data_time: 0.0004  lr: 3.48e-04  max_mem: 23742M
[05/30 17:12:52] fastreid.utils.events INFO:  eta: 0:05:58  epoch/iter: 35/2123  total_loss: 12.87  loss_cls_b1: 1.237  loss_cls_b2: 1.283  loss_cls_b21: 1.458  loss_cls_b22: 1.692  loss_cls_b3: 1.361  loss_cls_b31: 1.586  loss_cls_b32: 1.675  loss_cls_b33: 1.982  loss_triplet_b1: 0.08989  loss_triplet_b2: 0.09296  loss_triplet_b3: 0.09765  loss_triplet_b22: 0.08269  loss_triplet_b33: 0.08148  time: 0.2511  data_time: 0.0020  lr: 3.44e-04  max_mem: 23742M
[05/30 17:13:07] fastreid.utils.events INFO:  eta: 0:05:42  epoch/iter: 36/2182  total_loss: 12.08  loss_cls_b1: 1.178  loss_cls_b2: 1.236  loss_cls_b21: 1.348  loss_cls_b22: 1.605  loss_cls_b3: 1.297  loss_cls_b31: 1.485  loss_cls_b32: 1.599  loss_cls_b33: 1.838  loss_triplet_b1: 0.07128  loss_triplet_b2: 0.07543  loss_triplet_b3: 0.08581  loss_triplet_b22: 0.06854  loss_triplet_b33: 0.07359  time: 0.2512  data_time: 0.0005  lr: 3.38e-04  max_mem: 23742M
[05/30 17:13:11] fastreid.utils.events INFO:  eta: 0:05:38  epoch/iter: 37/2199  total_loss: 11.82  loss_cls_b1: 1.164  loss_cls_b2: 1.214  loss_cls_b21: 1.341  loss_cls_b22: 1.584  loss_cls_b3: 1.285  loss_cls_b31: 1.476  loss_cls_b32: 1.583  loss_cls_b33: 1.821  loss_triplet_b1: 0.06935  loss_triplet_b2: 0.07538  loss_triplet_b3: 0.08665  loss_triplet_b22: 0.06844  loss_triplet_b33: 0.07314  time: 0.2512  data_time: 0.0006  lr: 3.29e-04  max_mem: 23742M
[05/30 17:13:22] fastreid.utils.events INFO:  eta: 0:05:28  epoch/iter: 37/2241  total_loss: 11.12  loss_cls_b1: 1.093  loss_cls_b2: 1.122  loss_cls_b21: 1.218  loss_cls_b22: 1.51  loss_cls_b3: 1.158  loss_cls_b31: 1.37  loss_cls_b32: 1.496  loss_cls_b33: 1.758  loss_triplet_b1: 0.06291  loss_triplet_b2: 0.06038  loss_triplet_b3: 0.06741  loss_triplet_b22: 0.05517  loss_triplet_b33: 0.05881  time: 0.2512  data_time: 0.0007  lr: 3.29e-04  max_mem: 23742M
[05/30 17:13:37] fastreid.utils.events INFO:  eta: 0:05:13  epoch/iter: 38/2300  total_loss: 10.65  loss_cls_b1: 1.024  loss_cls_b2: 1.04  loss_cls_b21: 1.18  loss_cls_b22: 1.492  loss_cls_b3: 1.106  loss_cls_b31: 1.303  loss_cls_b32: 1.447  loss_cls_b33: 1.727  loss_triplet_b1: 0.05201  loss_triplet_b2: 0.05244  loss_triplet_b3: 0.05964  loss_triplet_b22: 0.04736  loss_triplet_b33: 0.04866  time: 0.2513  data_time: 0.0007  lr: 3.18e-04  max_mem: 23742M
[05/30 17:13:52] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:13:52] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 17:13:52] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 17:13:56] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.2378 s / batch. ETA=0:00:06
[05/30 17:14:01] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:06.852031 (0.214126 s / batch per device, on 1 devices)
[05/30 17:14:01] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:06 (0.212924 s / batch per device, on 1 devices)
[05/30 17:14:02] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[05/30 17:14:02] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 90.31    | 96.81    | 98.35     | 82.18 | 51.24  | 86.24    |[0m
[05/30 17:14:02] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[05/30 17:14:09] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_0039.pth
[05/30 17:14:11] fastreid.utils.events INFO:  eta: 0:04:58  epoch/iter: 39/2359  total_loss: 9.819  loss_cls_b1: 0.9214  loss_cls_b2: 0.9478  loss_cls_b21: 1.123  loss_cls_b22: 1.425  loss_cls_b3: 1.025  loss_cls_b31: 1.207  loss_cls_b32: 1.36  loss_cls_b33: 1.618  loss_triplet_b1: 0.04458  loss_triplet_b2: 0.04607  loss_triplet_b3: 0.05659  loss_triplet_b22: 0.03572  loss_triplet_b33: 0.04081  time: 0.2513  data_time: 0.0020  lr: 3.05e-04  max_mem: 23742M
[05/30 17:14:22] fastreid.utils.events INFO:  eta: 0:04:48  epoch/iter: 40/2399  total_loss: 9.684  loss_cls_b1: 0.8969  loss_cls_b2: 0.9218  loss_cls_b21: 1.058  loss_cls_b22: 1.38  loss_cls_b3: 0.9943  loss_cls_b31: 1.16  loss_cls_b32: 1.291  loss_cls_b33: 1.587  loss_triplet_b1: 0.0439  loss_triplet_b2: 0.04371  loss_triplet_b3: 0.05279  loss_triplet_b22: 0.03061  loss_triplet_b33: 0.03493  time: 0.2514  data_time: 0.0006  lr: 2.90e-04  max_mem: 23742M
[05/30 17:14:26] fastreid.utils.events INFO:  eta: 0:04:43  epoch/iter: 40/2418  total_loss: 9.03  loss_cls_b1: 0.8397  loss_cls_b2: 0.8834  loss_cls_b21: 1.031  loss_cls_b22: 1.299  loss_cls_b3: 0.9506  loss_cls_b31: 1.106  loss_cls_b32: 1.259  loss_cls_b33: 1.547  loss_triplet_b1: 0.03838  loss_triplet_b2: 0.03952  loss_triplet_b3: 0.04697  loss_triplet_b22: 0.02859  loss_triplet_b33: 0.03144  time: 0.2514  data_time: 0.0006  lr: 2.90e-04  max_mem: 23742M
[05/30 17:14:42] fastreid.utils.events INFO:  eta: 0:04:28  epoch/iter: 41/2477  total_loss: 8.821  loss_cls_b1: 0.8013  loss_cls_b2: 0.8522  loss_cls_b21: 0.9759  loss_cls_b22: 1.237  loss_cls_b3: 0.8951  loss_cls_b31: 1.075  loss_cls_b32: 1.253  loss_cls_b33: 1.465  loss_triplet_b1: 0.03456  loss_triplet_b2: 0.03774  loss_triplet_b3: 0.04052  loss_triplet_b22: 0.02432  loss_triplet_b33: 0.02645  time: 0.2515  data_time: 0.0017  lr: 2.74e-04  max_mem: 23742M
[05/30 17:14:57] fastreid.utils.events INFO:  eta: 0:04:13  epoch/iter: 42/2536  total_loss: 8.177  loss_cls_b1: 0.7144  loss_cls_b2: 0.7824  loss_cls_b21: 0.9003  loss_cls_b22: 1.134  loss_cls_b3: 0.8157  loss_cls_b31: 1.026  loss_cls_b32: 1.159  loss_cls_b33: 1.372  loss_triplet_b1: 0.02753  loss_triplet_b2: 0.02921  loss_triplet_b3: 0.0325  loss_triplet_b22: 0.01984  loss_triplet_b33: 0.01999  time: 0.2516  data_time: 0.0006  lr: 2.56e-04  max_mem: 23742M
[05/30 17:15:12] fastreid.utils.events INFO:  eta: 0:03:58  epoch/iter: 43/2595  total_loss: 7.217  loss_cls_b1: 0.6636  loss_cls_b2: 0.688  loss_cls_b21: 0.7871  loss_cls_b22: 1.053  loss_cls_b3: 0.7272  loss_cls_b31: 0.94  loss_cls_b32: 1.034  loss_cls_b33: 1.279  loss_triplet_b1: 0.02271  loss_triplet_b2: 0.02359  loss_triplet_b3: 0.0261  loss_triplet_b22: 0.01556  loss_triplet_b33: 0.01592  time: 0.2516  data_time: 0.0006  lr: 2.37e-04  max_mem: 23742M
[05/30 17:15:13] fastreid.utils.events INFO:  eta: 0:03:58  epoch/iter: 44/2599  total_loss: 7.183  loss_cls_b1: 0.6584  loss_cls_b2: 0.6859  loss_cls_b21: 0.7913  loss_cls_b22: 1.049  loss_cls_b3: 0.7234  loss_cls_b31: 0.9329  loss_cls_b32: 1.029  loss_cls_b33: 1.279  loss_triplet_b1: 0.02197  loss_triplet_b2: 0.02359  loss_triplet_b3: 0.0261  loss_triplet_b22: 0.01556  loss_triplet_b33: 0.01592  time: 0.2516  data_time: 0.0006  lr: 2.17e-04  max_mem: 23742M
[05/30 17:15:27] fastreid.utils.events INFO:  eta: 0:03:44  epoch/iter: 44/2654  total_loss: 6.931  loss_cls_b1: 0.6042  loss_cls_b2: 0.659  loss_cls_b21: 0.7687  loss_cls_b22: 0.9893  loss_cls_b3: 0.6869  loss_cls_b31: 0.8863  loss_cls_b32: 1.004  loss_cls_b33: 1.211  loss_triplet_b1: 0.01878  loss_triplet_b2: 0.022  loss_triplet_b3: 0.02495  loss_triplet_b22: 0.01454  loss_triplet_b33: 0.0142  time: 0.2517  data_time: 0.0010  lr: 2.17e-04  max_mem: 23742M
[05/30 17:15:43] fastreid.utils.events INFO:  eta: 0:03:29  epoch/iter: 45/2713  total_loss: 6.69  loss_cls_b1: 0.5835  loss_cls_b2: 0.614  loss_cls_b21: 0.7453  loss_cls_b22: 0.9577  loss_cls_b3: 0.6704  loss_cls_b31: 0.8381  loss_cls_b32: 0.9576  loss_cls_b33: 1.179  loss_triplet_b1: 0.01712  loss_triplet_b2: 0.01872  loss_triplet_b3: 0.02398  loss_triplet_b22: 0.01454  loss_triplet_b33: 0.01392  time: 0.2518  data_time: 0.0005  lr: 1.96e-04  max_mem: 23742M
[05/30 17:15:58] fastreid.utils.events INFO:  eta: 0:03:14  epoch/iter: 46/2772  total_loss: 6.213  loss_cls_b1: 0.5377  loss_cls_b2: 0.5691  loss_cls_b21: 0.7009  loss_cls_b22: 0.8853  loss_cls_b3: 0.6072  loss_cls_b31: 0.7733  loss_cls_b32: 0.8797  loss_cls_b33: 1.098  loss_triplet_b1: 0.01675  loss_triplet_b2: 0.01646  loss_triplet_b3: 0.0199  loss_triplet_b22: 0.01123  loss_triplet_b33: 0.01049  time: 0.2519  data_time: 0.0006  lr: 1.75e-04  max_mem: 23742M
[05/30 17:16:05] fastreid.utils.events INFO:  eta: 0:03:07  epoch/iter: 47/2799  total_loss: 6.123  loss_cls_b1: 0.5395  loss_cls_b2: 0.5715  loss_cls_b21: 0.6901  loss_cls_b22: 0.885  loss_cls_b3: 0.6095  loss_cls_b31: 0.781  loss_cls_b32: 0.8882  loss_cls_b33: 1.079  loss_triplet_b1: 0.01614  loss_triplet_b2: 0.01528  loss_triplet_b3: 0.01998  loss_triplet_b22: 0.01123  loss_triplet_b33: 0.01053  time: 0.2519  data_time: 0.0006  lr: 1.54e-04  max_mem: 23742M
[05/30 17:16:13] fastreid.utils.events INFO:  eta: 0:02:59  epoch/iter: 47/2831  total_loss: 5.778  loss_cls_b1: 0.5166  loss_cls_b2: 0.5338  loss_cls_b21: 0.6651  loss_cls_b22: 0.8341  loss_cls_b3: 0.5709  loss_cls_b31: 0.7352  loss_cls_b32: 0.8483  loss_cls_b33: 1.014  loss_triplet_b1: 0.01296  loss_triplet_b2: 0.01389  loss_triplet_b3: 0.01703  loss_triplet_b22: 0.009331  loss_triplet_b33: 0.009209  time: 0.2521  data_time: 0.0009  lr: 1.54e-04  max_mem: 23742M
[05/30 17:17:25] fastreid.utils.events INFO:  eta: 0:02:44  epoch/iter: 48/2890  total_loss: 5.53  loss_cls_b1: 0.4693  loss_cls_b2: 0.4979  loss_cls_b21: 0.6041  loss_cls_b22: 0.7927  loss_cls_b3: 0.537  loss_cls_b31: 0.6796  loss_cls_b32: 0.7818  loss_cls_b33: 0.9722  loss_triplet_b1: 0.009681  loss_triplet_b2: 0.01333  loss_triplet_b3: 0.01225  loss_triplet_b22: 0.007366  loss_triplet_b33: 0.005961  time: 0.2717  data_time: 0.0005  lr: 1.33e-04  max_mem: 23742M
[05/30 17:18:56] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:18:56] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 17:18:56] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 17:19:02] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.4358 s / batch. ETA=0:00:11
[05/30 17:19:13] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:13.524039 (0.422626 s / batch per device, on 1 devices)
[05/30 17:19:13] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:13 (0.421342 s / batch per device, on 1 devices)
[05/30 17:19:13] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[05/30 17:19:13] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 91.13    | 97.04    | 98.46     | 85.72 | 59.80  | 88.43    |[0m
[05/30 17:19:13] fastreid.utils.events INFO:  eta: 0:02:30  epoch/iter: 49/2949  total_loss: 5.086  loss_cls_b1: 0.434  loss_cls_b2: 0.4639  loss_cls_b21: 0.5435  loss_cls_b22: 0.7477  loss_cls_b3: 0.4891  loss_cls_b31: 0.6186  loss_cls_b32: 0.7407  loss_cls_b33: 0.9111  loss_triplet_b1: 0.008175  loss_triplet_b2: 0.01122  loss_triplet_b3: 0.01041  loss_triplet_b22: 0.005957  loss_triplet_b33: 0.003957  time: 0.2970  data_time: 0.0004  lr: 1.13e-04  max_mem: 23742M
[05/30 17:20:30] fastreid.utils.events INFO:  eta: 0:02:17  epoch/iter: 50/2999  total_loss: 4.81  loss_cls_b1: 0.4112  loss_cls_b2: 0.4353  loss_cls_b21: 0.5115  loss_cls_b22: 0.6955  loss_cls_b3: 0.4452  loss_cls_b31: 0.5951  loss_cls_b32: 0.719  loss_cls_b33: 0.8796  loss_triplet_b1: 0.006109  loss_triplet_b2: 0.009347  loss_triplet_b3: 0.008957  loss_triplet_b22: 0.004164  loss_triplet_b33: 0.003001  time: 0.3175  data_time: 0.0006  lr: 9.39e-05  max_mem: 23742M
[05/30 17:20:44] fastreid.utils.events INFO:  eta: 0:02:15  epoch/iter: 50/3008  total_loss: 4.784  loss_cls_b1: 0.397  loss_cls_b2: 0.4223  loss_cls_b21: 0.4981  loss_cls_b22: 0.6855  loss_cls_b3: 0.4435  loss_cls_b31: 0.5859  loss_cls_b32: 0.7152  loss_cls_b33: 0.8564  loss_triplet_b1: 0.005621  loss_triplet_b2: 0.008371  loss_triplet_b3: 0.008727  loss_triplet_b22: 0.003529  loss_triplet_b33: 0.00277  time: 0.3212  data_time: 0.0006  lr: 9.39e-05  max_mem: 23742M
[05/30 17:22:11] fastreid.utils.events INFO:  eta: 0:02:01  epoch/iter: 51/3067  total_loss: 4.695  loss_cls_b1: 0.3993  loss_cls_b2: 0.4138  loss_cls_b21: 0.4992  loss_cls_b22: 0.6674  loss_cls_b3: 0.4379  loss_cls_b31: 0.5896  loss_cls_b32: 0.6949  loss_cls_b33: 0.8332  loss_triplet_b1: 0.005504  loss_triplet_b2: 0.008534  loss_triplet_b3: 0.008727  loss_triplet_b22: 0.003395  loss_triplet_b33: 0.00286  time: 0.3435  data_time: 0.0007  lr: 7.59e-05  max_mem: 23742M
[05/30 17:23:40] fastreid.utils.events INFO:  eta: 0:01:46  epoch/iter: 52/3126  total_loss: 4.49  loss_cls_b1: 0.3716  loss_cls_b2: 0.402  loss_cls_b21: 0.4737  loss_cls_b22: 0.6338  loss_cls_b3: 0.4251  loss_cls_b31: 0.5648  loss_cls_b32: 0.665  loss_cls_b33: 0.7965  loss_triplet_b1: 0.004717  loss_triplet_b2: 0.006315  loss_triplet_b3: 0.008465  loss_triplet_b22: 0.002793  loss_triplet_b33: 0.00215  time: 0.3653  data_time: 0.0005  lr: 5.94e-05  max_mem: 23742M
[05/30 17:25:08] fastreid.utils.events INFO:  eta: 0:01:31  epoch/iter: 53/3185  total_loss: 4.249  loss_cls_b1: 0.3472  loss_cls_b2: 0.3596  loss_cls_b21: 0.4546  loss_cls_b22: 0.5975  loss_cls_b3: 0.398  loss_cls_b31: 0.5193  loss_cls_b32: 0.6123  loss_cls_b33: 0.7387  loss_triplet_b1: 0.004238  loss_triplet_b2: 0.005947  loss_triplet_b3: 0.007825  loss_triplet_b22: 0.002475  loss_triplet_b33: 0.001993  time: 0.3863  data_time: 0.0005  lr: 4.45e-05  max_mem: 23742M
[05/30 17:25:30] fastreid.utils.events INFO:  eta: 0:01:28  epoch/iter: 54/3199  total_loss: 4.227  loss_cls_b1: 0.3472  loss_cls_b2: 0.3595  loss_cls_b21: 0.4511  loss_cls_b22: 0.5968  loss_cls_b3: 0.4006  loss_cls_b31: 0.5193  loss_cls_b32: 0.612  loss_cls_b33: 0.7387  loss_triplet_b1: 0.004717  loss_triplet_b2: 0.006289  loss_triplet_b3: 0.008503  loss_triplet_b22: 0.002583  loss_triplet_b33: 0.002059  time: 0.3913  data_time: 0.0005  lr: 3.15e-05  max_mem: 23742M
[05/30 17:26:37] fastreid.utils.events INFO:  eta: 0:01:17  epoch/iter: 54/3244  total_loss: 4.091  loss_cls_b1: 0.332  loss_cls_b2: 0.3455  loss_cls_b21: 0.4446  loss_cls_b22: 0.5968  loss_cls_b3: 0.3901  loss_cls_b31: 0.5206  loss_cls_b32: 0.6034  loss_cls_b33: 0.7333  loss_triplet_b1: 0.004238  loss_triplet_b2: 0.005597  loss_triplet_b3: 0.008438  loss_triplet_b22: 0.002446  loss_triplet_b33: 0.001922  time: 0.4067  data_time: 0.0009  lr: 3.15e-05  max_mem: 23742M
[05/30 17:28:05] fastreid.utils.events INFO:  eta: 0:01:03  epoch/iter: 55/3303  total_loss: 3.875  loss_cls_b1: 0.3208  loss_cls_b2: 0.3363  loss_cls_b21: 0.4352  loss_cls_b22: 0.5712  loss_cls_b3: 0.374  loss_cls_b31: 0.4943  loss_cls_b32: 0.568  loss_cls_b33: 0.7124  loss_triplet_b1: 0.003649  loss_triplet_b2: 0.004989  loss_triplet_b3: 0.007388  loss_triplet_b22: 0.002045  loss_triplet_b33: 0.001485  time: 0.4261  data_time: 0.0004  lr: 2.07e-05  max_mem: 23742M
[05/30 17:29:34] fastreid.utils.events INFO:  eta: 0:04:07  epoch/iter: 56/3362  total_loss: 3.519  loss_cls_b1: 0.2937  loss_cls_b2: 0.3137  loss_cls_b21: 0.3946  loss_cls_b22: 0.5374  loss_cls_b3: 0.3361  loss_cls_b31: 0.468  loss_cls_b32: 0.5486  loss_cls_b33: 0.6809  loss_triplet_b1: 0.003121  loss_triplet_b2: 0.004149  loss_triplet_b3: 0.005854  loss_triplet_b22: 0.00168  loss_triplet_b33: 0.00135  time: 0.4449  data_time: 0.0004  lr: 1.20e-05  max_mem: 23742M
[05/30 17:30:30] fastreid.utils.events INFO:  eta: 0:03:26  epoch/iter: 57/3399  total_loss: 3.611  loss_cls_b1: 0.2953  loss_cls_b2: 0.3121  loss_cls_b21: 0.4055  loss_cls_b22: 0.5489  loss_cls_b3: 0.3354  loss_cls_b31: 0.483  loss_cls_b32: 0.5658  loss_cls_b33: 0.6813  loss_triplet_b1: 0.003031  loss_triplet_b2: 0.004149  loss_triplet_b3: 0.005734  loss_triplet_b22: 0.001691  loss_triplet_b33: 0.001351  time: 0.4565  data_time: 0.0006  lr: 5.76e-06  max_mem: 23742M
[05/30 17:30:51] fastreid.utils.events INFO:  eta: 0:02:54  epoch/iter: 57/3421  total_loss: 3.603  loss_cls_b1: 0.2924  loss_cls_b2: 0.311  loss_cls_b21: 0.3966  loss_cls_b22: 0.546  loss_cls_b3: 0.3339  loss_cls_b31: 0.4821  loss_cls_b32: 0.5491  loss_cls_b33: 0.6787  loss_triplet_b1: 0.002926  loss_triplet_b2: 0.00401  loss_triplet_b3: 0.005346  loss_triplet_b22: 0.001842  loss_triplet_b33: 0.001466  time: 0.4595  data_time: 0.0007  lr: 5.76e-06  max_mem: 23742M
[05/30 17:32:19] fastreid.utils.events INFO:  eta: 0:01:27  epoch/iter: 58/3480  total_loss: 3.783  loss_cls_b1: 0.2989  loss_cls_b2: 0.3206  loss_cls_b21: 0.409  loss_cls_b22: 0.5549  loss_cls_b3: 0.3487  loss_cls_b31: 0.4975  loss_cls_b32: 0.5734  loss_cls_b33: 0.6813  loss_triplet_b1: 0.003403  loss_triplet_b2: 0.004197  loss_triplet_b3: 0.005345  loss_triplet_b22: 0.001905  loss_triplet_b33: 0.001533  time: 0.4772  data_time: 0.0004  lr: 1.97e-06  max_mem: 23742M
[05/30 17:33:48] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3539  total_loss: 3.684  loss_cls_b1: 0.3001  loss_cls_b2: 0.3145  loss_cls_b21: 0.4046  loss_cls_b22: 0.5195  loss_cls_b3: 0.3455  loss_cls_b31: 0.491  loss_cls_b32: 0.5556  loss_cls_b33: 0.6353  loss_triplet_b1: 0.003392  loss_triplet_b2: 0.004493  loss_triplet_b3: 0.005025  loss_triplet_b22: 0.002218  loss_triplet_b33: 0.001533  time: 0.4943  data_time: 0.0003  lr: 7.00e-07  max_mem: 23742M
[05/30 17:33:48] fastreid.engine.defaults INFO: Prepare testing set
[05/30 17:33:48] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[05/30 17:33:48] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[05/30 17:33:54] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.4374 s / batch. ETA=0:00:11
[05/30 17:34:05] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:13.598459 (0.424952 s / batch per device, on 1 devices)
[05/30 17:34:05] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:13 (0.423362 s / batch per device, on 1 devices)
[05/30 17:34:06] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[05/30 17:34:06] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 91.84    | 97.28    | 98.58     | 86.78 | 62.36  | 89.31    |[0m
[05/30 17:34:06] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[05/30 17:34:11] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_final.pth
[05/30 17:34:13] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3539  total_loss: 3.684  loss_cls_b1: 0.3001  loss_cls_b2: 0.3145  loss_cls_b21: 0.4046  loss_cls_b22: 0.5195  loss_cls_b3: 0.3455  loss_cls_b31: 0.491  loss_cls_b32: 0.5556  loss_cls_b33: 0.6353  loss_triplet_b1: 0.003392  loss_triplet_b2: 0.004493  loss_triplet_b3: 0.005025  loss_triplet_b22: 0.002218  loss_triplet_b33: 0.001533  time: 0.4943  data_time: 0.0003  lr: 7.00e-07  max_mem: 23742M
[05/30 17:34:13] fastreid.engine.hooks INFO: Overall training speed: 3538 iterations in 0:29:08 (0.4943 s / it)
[05/30 17:34:13] fastreid.engine.hooks INFO: Total training time: 0:30:54 (0:01:46 on hooks)
[06/14 16:24:28] fastreid INFO: Rank of current process: 0. World size: 1
[06/14 16:24:30] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/14 16:24:30] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit1/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/14 16:24:30] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[06/14 16:24:30] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/14 16:24:30] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[06/14 16:24:30] fastreid.utils.env INFO: Using a generated random seed 30971653
[06/14 16:25:10] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/14 16:25:19] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/14 16:25:20] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb31_head.weight[0m
  [34mb32_head.weight[0m
  [34mb21_head.weight[0m
  [34mb22_head.weight[0m
  [34mb1_head.weight[0m
  [34mb33_head.weight[0m
  [34mb2_head.weight[0m
  [34mb3_head.weight[0m
[06/15 10:40:33] fastreid INFO: Rank of current process: 0. World size: 1
[06/15 10:40:34] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/15 10:40:34] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit1/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', 'cuda:1'], resume=False)
[06/15 10:40:34] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[06/15 10:40:34] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/15 10:40:34] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[06/15 10:40:34] fastreid.utils.env INFO: Using a generated random seed 35320706
[06/15 10:40:40] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/15 10:40:40] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 10:40:40] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb3_head.weight[0m
  [34mb32_head.weight[0m
  [34mb2_head.weight[0m
  [34mb1_head.weight[0m
  [34mb21_head.weight[0m
  [34mb22_head.weight[0m
  [34mb31_head.weight[0m
  [34mb33_head.weight[0m
[06/15 10:40:40] fastreid.engine.defaults INFO: Prepare testing set
[06/15 10:40:40] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[06/15 10:40:41] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[06/15 10:40:49] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.1522 s / batch. ETA=0:00:03
[06/15 10:40:53] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:05.013572 (0.156674 s / batch per device, on 1 devices)
[06/15 10:40:53] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:04 (0.152466 s / batch per device, on 1 devices)
[06/15 10:40:54] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[06/15 10:40:54] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 91.84    | 97.28    | 98.58     | 86.79 | 62.37  | 89.31    |[0m
[06/15 14:07:32] fastreid INFO: Rank of current process: 0. World size: 1
[06/15 14:07:34] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/15 14:07:34] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit1/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/15 14:07:34] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[06/15 14:07:34] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/15 14:07:34] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[06/15 14:07:34] fastreid.utils.env INFO: Using a generated random seed 36030825
[06/15 14:07:54] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/15 14:07:54] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:07:54] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb31_head.weight[0m
  [34mb21_head.weight[0m
  [34mb22_head.weight[0m
  [34mb1_head.weight[0m
  [34mb32_head.weight[0m
  [34mb2_head.weight[0m
  [34mb3_head.weight[0m
  [34mb33_head.weight[0m
[06/15 14:08:09] fastreid.engine.defaults INFO: Prepare testing set
[06/15 14:10:04] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[06/15 14:33:10] fastreid INFO: Rank of current process: 0. World size: 1
[06/15 14:33:12] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[06/15 14:33:12] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit1/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[06/15 14:33:12] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[06/15 14:33:12] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[06/15 14:33:12] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[06/15 14:33:12] fastreid.utils.env INFO: Using a generated random seed 14082787
[06/15 14:33:19] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[06/15 14:33:19] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[06/15 14:33:19] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb1_head.weight[0m
  [34mb31_head.weight[0m
  [34mb32_head.weight[0m
  [34mb3_head.weight[0m
  [34mb21_head.weight[0m
  [34mb33_head.weight[0m
  [34mb2_head.weight[0m
  [34mb22_head.weight[0m
[06/15 14:33:26] fastreid.engine.defaults INFO: Prepare testing set
[06/15 14:55:20] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[06/15 15:02:09] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[06/15 15:03:26] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.1864 s / batch. ETA=0:00:05
[07/06 14:35:47] fastreid INFO: Rank of current process: 0. World size: 1
[07/06 14:35:49] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/06 14:35:49] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit1/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[07/06 14:35:49] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[07/06 14:35:49] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/06 14:35:49] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[07/06 14:35:49] fastreid.utils.env INFO: Using a generated random seed 53091333
[07/06 14:50:56] fastreid INFO: Rank of current process: 0. World size: 1
[07/06 14:50:57] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/06 14:50:57] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './logs/wildsplit1/mgn_R50-ibn/model_best.pth', 'MODEL.DEVICE', '"cuda:1"'], resume=False)
[07/06 14:50:57] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[07/06 14:50:57] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/06 14:50:57] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[07/06 14:50:57] fastreid.utils.env INFO: Using a generated random seed 61033860
[07/06 15:15:55] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=0, scale=64, margin=0.35)
  )
)
[07/06 15:16:09] fastreid.utils.checkpoint INFO: Loading checkpoint from ./logs/wildsplit1/mgn_R50-ibn/model_best.pth
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b1_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b2_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b21_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b22_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b3_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b31_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b32_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint WARNING: Skip loading parameter 'b33_head.weight' to the model due to incompatible shapes: (286, 256) in the checkpoint but (0, 256) in the model! You might want to double check if this is expected.
[07/06 15:16:12] fastreid.utils.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mb32_head.weight[0m
  [34mb33_head.weight[0m
  [34mb1_head.weight[0m
  [34mb3_head.weight[0m
  [34mb31_head.weight[0m
  [34mb21_head.weight[0m
  [34mb22_head.weight[0m
  [34mb2_head.weight[0m
[07/06 15:17:01] fastreid.engine.defaults INFO: Prepare testing set
[07/06 15:18:40] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 227     | 850        | 1           |
| gallery  | 290     | 3829       | 1           |[0m
[12/26 21:50:00] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 21:50:02] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 21:50:02] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 21:50:02] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 21:50:02] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 21:50:02] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 21:50:02] fastreid.utils.env INFO: Using a generated random seed 3042338
[12/26 21:50:02] fastreid.engine.defaults INFO: Prepare training set
[12/26 21:50:02] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[12/26 21:50:02] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 21:50:03] fastreid.engine.defaults INFO: Auto-scaling the num_classes=286
[12/26 21:50:04] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[12/26 21:50:05] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[12/26 21:50:16] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=286, scale=64, margin=0.35)
  )
)
[12/26 21:53:41] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[12/26 22:46:57] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 22:47:00] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 22:47:00] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 22:47:00] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 22:47:00] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 22:47:00] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 22:47:00] fastreid.utils.env INFO: Using a generated random seed 886064
[12/26 22:47:39] fastreid.engine.defaults INFO: Prepare training set
[12/26 22:47:39] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[12/26 22:47:39] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 22:48:50] fastreid.engine.defaults INFO: Auto-scaling the num_classes=286
[12/26 22:50:52] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 22:50:55] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 22:50:55] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 22:50:55] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 22:50:55] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 22:50:55] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 22:50:55] fastreid.utils.env INFO: Using a generated random seed 55551235
[12/26 22:51:13] fastreid.engine.defaults INFO: Prepare training set
[12/26 22:54:49] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[12/26 22:55:34] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 22:57:59] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 22:58:02] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 22:58:02] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 22:58:02] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 22:58:02] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 22:58:02] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 22:58:02] fastreid.utils.env INFO: Using a generated random seed 2308149
[12/26 22:58:06] fastreid.engine.defaults INFO: Prepare training set
[12/26 22:58:06] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[12/26 22:58:06] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 22:59:19] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 22:59:21] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 22:59:21] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 22:59:21] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 22:59:21] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 22:59:21] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 22:59:21] fastreid.utils.env INFO: Using a generated random seed 21966354
[12/26 22:59:31] fastreid.engine.defaults INFO: Prepare training set
[12/26 22:59:31] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[12/26 22:59:31] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:00:15] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:00:18] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:00:18] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:00:18] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:00:18] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:00:18] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:00:18] fastreid.utils.env INFO: Using a generated random seed 18473700
[12/26 23:00:27] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:00:49] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 286     | 3827       | 1           |[0m
[12/26 23:00:49] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:01:18] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:01:20] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:01:20] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:01:20] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:01:20] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:01:21] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:01:21] fastreid.utils.env INFO: Using a generated random seed 21236582
[12/26 23:01:30] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:04:55] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:04:58] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:04:58] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:04:58] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:04:58] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:04:58] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:04:58] fastreid.utils.env INFO: Using a generated random seed 58763379
[12/26 23:05:09] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:05:09] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[12/26 23:05:09] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:05:18] fastreid.engine.defaults INFO: Auto-scaling the num_classes=286
[12/26 23:05:47] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:05:50] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:05:50] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:05:50] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:05:50] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:05:50] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:05:50] fastreid.utils.env INFO: Using a generated random seed 50717538
[12/26 23:05:50] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:05:50] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[12/26 23:05:50] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:08:01] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:08:04] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:08:04] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:08:04] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:08:04] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:08:04] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:08:04] fastreid.utils.env INFO: Using a generated random seed 4577845
[12/26 23:08:04] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:12:25] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:12:28] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:12:28] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:12:28] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:12:28] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:12:28] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:12:28] fastreid.utils.env INFO: Using a generated random seed 28679826
[12/26 23:12:28] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:13:20] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[12/26 23:14:03] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:15:33] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:15:36] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:15:36] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', '"cuda:3"'], resume=False)
[12/26 23:15:36] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:15:36] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:15:36] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:15:36] fastreid.utils.env INFO: Using a generated random seed 36279184
[12/26 23:15:36] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:15:36] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[12/26 23:15:36] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:18:48] fastreid INFO: Rank of current process: 0. World size: 1
[12/26 23:18:50] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/26 23:18:50] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', 'cuda:3'], resume=False)
[12/26 23:18:50] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/26 23:18:50] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:3
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/26 23:18:50] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/26 23:18:50] fastreid.utils.env INFO: Using a generated random seed 50296880
[12/26 23:18:50] fastreid.engine.defaults INFO: Prepare training set
[12/26 23:18:50] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[12/26 23:18:50] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/26 23:18:50] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[12/26 23:18:51] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[12/26 23:18:52] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[12/26 23:19:03] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:3', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[12/26 23:19:14] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[12/26 23:19:14] fastreid.engine.train_loop INFO: Starting training from epoch 0
[12/26 23:19:14] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[12/26 23:19:39] fastreid.utils.events INFO:  eta: 0:19:00  epoch/iter: 0/58  total_loss: 56.91  loss_cls_b1: 6.221  loss_cls_b2: 6.205  loss_cls_b21: 6.24  loss_cls_b22: 6.205  loss_cls_b3: 6.263  loss_cls_b31: 6.17  loss_cls_b32: 6.163  loss_cls_b33: 6.231  loss_triplet_b1: 1.321  loss_triplet_b2: 1.343  loss_triplet_b3: 1.323  loss_triplet_b22: 1.663  loss_triplet_b33: 1.753  time: 0.3275  data_time: 0.0007  lr: 4.33e-05  max_mem: 72M
[12/26 23:19:59] fastreid.utils.events INFO:  eta: 0:18:46  epoch/iter: 1/117  total_loss: 57.64  loss_cls_b1: 6.219  loss_cls_b2: 6.202  loss_cls_b21: 6.245  loss_cls_b22: 6.229  loss_cls_b3: 6.251  loss_cls_b31: 6.155  loss_cls_b32: 6.201  loss_cls_b33: 6.204  loss_triplet_b1: 1.397  loss_triplet_b2: 1.374  loss_triplet_b3: 1.431  loss_triplet_b22: 1.728  loss_triplet_b33: 1.858  time: 0.3311  data_time: 0.0007  lr: 5.26e-05  max_mem: 72M
[12/26 23:20:18] fastreid.utils.events INFO:  eta: 0:18:30  epoch/iter: 2/176  total_loss: 57.44  loss_cls_b1: 6.195  loss_cls_b2: 6.203  loss_cls_b21: 6.233  loss_cls_b22: 6.234  loss_cls_b3: 6.255  loss_cls_b31: 6.176  loss_cls_b32: 6.186  loss_cls_b33: 6.217  loss_triplet_b1: 1.368  loss_triplet_b2: 1.371  loss_triplet_b3: 1.392  loss_triplet_b22: 1.699  loss_triplet_b33: 1.84  time: 0.3326  data_time: 0.0004  lr: 6.19e-05  max_mem: 72M
[12/26 23:20:26] fastreid.utils.events INFO:  eta: 0:18:22  epoch/iter: 3/199  total_loss: 57.42  loss_cls_b1: 6.202  loss_cls_b2: 6.203  loss_cls_b21: 6.233  loss_cls_b22: 6.238  loss_cls_b3: 6.256  loss_cls_b31: 6.162  loss_cls_b32: 6.18  loss_cls_b33: 6.218  loss_triplet_b1: 1.343  loss_triplet_b2: 1.356  loss_triplet_b3: 1.37  loss_triplet_b22: 1.693  loss_triplet_b33: 1.828  time: 0.3325  data_time: 0.0018  lr: 6.56e-05  max_mem: 72M
[12/26 23:20:38] fastreid.utils.events INFO:  eta: 0:18:09  epoch/iter: 3/235  total_loss: 57.43  loss_cls_b1: 6.191  loss_cls_b2: 6.18  loss_cls_b21: 6.232  loss_cls_b22: 6.246  loss_cls_b3: 6.242  loss_cls_b31: 6.18  loss_cls_b32: 6.188  loss_cls_b33: 6.207  loss_triplet_b1: 1.383  loss_triplet_b2: 1.387  loss_triplet_b3: 1.399  loss_triplet_b22: 1.696  loss_triplet_b33: 1.838  time: 0.3325  data_time: 0.0005  lr: 7.12e-05  max_mem: 72M
[12/26 23:20:58] fastreid.utils.events INFO:  eta: 0:17:51  epoch/iter: 4/294  total_loss: 57.41  loss_cls_b1: 6.195  loss_cls_b2: 6.192  loss_cls_b21: 6.203  loss_cls_b22: 6.247  loss_cls_b3: 6.211  loss_cls_b31: 6.152  loss_cls_b32: 6.207  loss_cls_b33: 6.204  loss_triplet_b1: 1.355  loss_triplet_b2: 1.375  loss_triplet_b3: 1.37  loss_triplet_b22: 1.685  loss_triplet_b33: 1.821  time: 0.3327  data_time: 0.0006  lr: 8.05e-05  max_mem: 72M
[12/26 23:21:18] fastreid.utils.events INFO:  eta: 0:17:33  epoch/iter: 5/353  total_loss: 57.41  loss_cls_b1: 6.191  loss_cls_b2: 6.198  loss_cls_b21: 6.233  loss_cls_b22: 6.234  loss_cls_b3: 6.206  loss_cls_b31: 6.165  loss_cls_b32: 6.189  loss_cls_b33: 6.186  loss_triplet_b1: 1.366  loss_triplet_b2: 1.4  loss_triplet_b3: 1.384  loss_triplet_b22: 1.694  loss_triplet_b33: 1.861  time: 0.3333  data_time: 0.0013  lr: 8.98e-05  max_mem: 72M
[12/26 23:21:36] fastreid.utils.events INFO:  eta: 0:17:22  epoch/iter: 6/399  total_loss: 57.39  loss_cls_b1: 6.185  loss_cls_b2: 6.19  loss_cls_b21: 6.221  loss_cls_b22: 6.223  loss_cls_b3: 6.208  loss_cls_b31: 6.172  loss_cls_b32: 6.211  loss_cls_b33: 6.204  loss_triplet_b1: 1.37  loss_triplet_b2: 1.393  loss_triplet_b3: 1.385  loss_triplet_b22: 1.693  loss_triplet_b33: 1.856  time: 0.3397  data_time: 0.0004  lr: 9.71e-05  max_mem: 72M
[12/26 23:21:41] fastreid.utils.events INFO:  eta: 0:17:18  epoch/iter: 6/412  total_loss: 57.37  loss_cls_b1: 6.191  loss_cls_b2: 6.196  loss_cls_b21: 6.213  loss_cls_b22: 6.223  loss_cls_b3: 6.211  loss_cls_b31: 6.169  loss_cls_b32: 6.21  loss_cls_b33: 6.203  loss_triplet_b1: 1.366  loss_triplet_b2: 1.383  loss_triplet_b3: 1.383  loss_triplet_b22: 1.69  loss_triplet_b33: 1.854  time: 0.3411  data_time: 0.0005  lr: 9.91e-05  max_mem: 72M
[12/26 23:22:03] fastreid.utils.events INFO:  eta: 0:17:06  epoch/iter: 7/471  total_loss: 57.17  loss_cls_b1: 6.185  loss_cls_b2: 6.189  loss_cls_b21: 6.233  loss_cls_b22: 6.205  loss_cls_b3: 6.236  loss_cls_b31: 6.197  loss_cls_b32: 6.208  loss_cls_b33: 6.201  loss_triplet_b1: 1.35  loss_triplet_b2: 1.334  loss_triplet_b3: 1.368  loss_triplet_b22: 1.663  loss_triplet_b33: 1.847  time: 0.3441  data_time: 0.0007  lr: 1.08e-04  max_mem: 72M
[12/26 23:22:25] fastreid.utils.events INFO:  eta: 0:16:51  epoch/iter: 8/530  total_loss: 57.26  loss_cls_b1: 6.183  loss_cls_b2: 6.174  loss_cls_b21: 6.222  loss_cls_b22: 6.202  loss_cls_b3: 6.243  loss_cls_b31: 6.202  loss_cls_b32: 6.209  loss_cls_b33: 6.203  loss_triplet_b1: 1.358  loss_triplet_b2: 1.348  loss_triplet_b3: 1.371  loss_triplet_b22: 1.682  loss_triplet_b33: 1.869  time: 0.3472  data_time: 0.0003  lr: 1.18e-04  max_mem: 72M
[12/26 23:22:49] fastreid.engine.defaults INFO: Prepare testing set
[12/26 23:22:49] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[12/26 23:22:49] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[12/26 23:22:57] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.3028 s / batch. ETA=0:00:07
[12/26 23:23:06] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:10.807279 (0.337727 s / batch per device, on 1 devices)
[12/26 23:23:06] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:10 (0.334297 s / batch per device, on 1 devices)
[12/26 23:23:08] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[12/26 23:23:08] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 60.28    | 75.89    | 80.61     | 27.81 | 3.56   | 44.05    |[0m
[12/26 23:23:08] fastreid.utils.events INFO:  eta: 0:16:39  epoch/iter: 9/589  total_loss: 57.26  loss_cls_b1: 6.176  loss_cls_b2: 6.176  loss_cls_b21: 6.252  loss_cls_b22: 6.21  loss_cls_b3: 6.247  loss_cls_b31: 6.199  loss_cls_b32: 6.21  loss_cls_b33: 6.199  loss_triplet_b1: 1.358  loss_triplet_b2: 1.348  loss_triplet_b3: 1.355  loss_triplet_b22: 1.679  loss_triplet_b33: 1.846  time: 0.3530  data_time: 0.0008  lr: 1.27e-04  max_mem: 252M
[12/26 23:23:12] fastreid.utils.events INFO:  eta: 0:16:37  epoch/iter: 10/599  total_loss: 57.29  loss_cls_b1: 6.18  loss_cls_b2: 6.175  loss_cls_b21: 6.248  loss_cls_b22: 6.212  loss_cls_b3: 6.247  loss_cls_b31: 6.192  loss_cls_b32: 6.212  loss_cls_b33: 6.2  loss_triplet_b1: 1.366  loss_triplet_b2: 1.352  loss_triplet_b3: 1.368  loss_triplet_b22: 1.684  loss_triplet_b33: 1.848  time: 0.3542  data_time: 0.0006  lr: 1.29e-04  max_mem: 252M
[12/26 23:23:34] fastreid.utils.events INFO:  eta: 0:16:29  epoch/iter: 10/648  total_loss: 57.38  loss_cls_b1: 6.171  loss_cls_b2: 6.15  loss_cls_b21: 6.251  loss_cls_b22: 6.211  loss_cls_b3: 6.235  loss_cls_b31: 6.2  loss_cls_b32: 6.214  loss_cls_b33: 6.209  loss_triplet_b1: 1.388  loss_triplet_b2: 1.383  loss_triplet_b3: 1.384  loss_triplet_b22: 1.714  loss_triplet_b33: 1.842  time: 0.3610  data_time: 0.0005  lr: 1.36e-04  max_mem: 252M
[12/26 23:24:01] fastreid.utils.events INFO:  eta: 0:16:21  epoch/iter: 11/707  total_loss: 57.68  loss_cls_b1: 6.193  loss_cls_b2: 6.175  loss_cls_b21: 6.268  loss_cls_b22: 6.208  loss_cls_b3: 6.232  loss_cls_b31: 6.218  loss_cls_b32: 6.204  loss_cls_b33: 6.203  loss_triplet_b1: 1.425  loss_triplet_b2: 1.427  loss_triplet_b3: 1.465  loss_triplet_b22: 1.725  loss_triplet_b33: 1.883  time: 0.3683  data_time: 0.0011  lr: 1.46e-04  max_mem: 252M
[12/26 23:24:27] fastreid.utils.events INFO:  eta: 0:16:14  epoch/iter: 12/766  total_loss: 58.09  loss_cls_b1: 6.207  loss_cls_b2: 6.171  loss_cls_b21: 6.271  loss_cls_b22: 6.219  loss_cls_b3: 6.231  loss_cls_b31: 6.213  loss_cls_b32: 6.211  loss_cls_b33: 6.206  loss_triplet_b1: 1.518  loss_triplet_b2: 1.498  loss_triplet_b3: 1.52  loss_triplet_b22: 1.763  loss_triplet_b33: 1.952  time: 0.3738  data_time: 0.0005  lr: 1.55e-04  max_mem: 252M
[12/26 23:24:42] fastreid.utils.events INFO:  eta: 0:16:10  epoch/iter: 13/799  total_loss: 58.2  loss_cls_b1: 6.208  loss_cls_b2: 6.168  loss_cls_b21: 6.271  loss_cls_b22: 6.208  loss_cls_b3: 6.235  loss_cls_b31: 6.222  loss_cls_b32: 6.21  loss_cls_b33: 6.201  loss_triplet_b1: 1.575  loss_triplet_b2: 1.543  loss_triplet_b3: 1.551  loss_triplet_b22: 1.781  loss_triplet_b33: 1.997  time: 0.3770  data_time: 0.0006  lr: 1.60e-04  max_mem: 252M
[12/26 23:24:53] fastreid.utils.events INFO:  eta: 0:16:08  epoch/iter: 13/825  total_loss: 58.21  loss_cls_b1: 6.204  loss_cls_b2: 6.173  loss_cls_b21: 6.267  loss_cls_b22: 6.209  loss_cls_b3: 6.236  loss_cls_b31: 6.223  loss_cls_b32: 6.209  loss_cls_b33: 6.201  loss_triplet_b1: 1.573  loss_triplet_b2: 1.543  loss_triplet_b3: 1.555  loss_triplet_b22: 1.788  loss_triplet_b33: 1.987  time: 0.3792  data_time: 0.0006  lr: 1.64e-04  max_mem: 252M
[12/26 23:25:20] fastreid.utils.events INFO:  eta: 0:16:02  epoch/iter: 14/884  total_loss: 58.22  loss_cls_b1: 6.191  loss_cls_b2: 6.179  loss_cls_b21: 6.25  loss_cls_b22: 6.228  loss_cls_b3: 6.232  loss_cls_b31: 6.202  loss_cls_b32: 6.207  loss_cls_b33: 6.214  loss_triplet_b1: 1.589  loss_triplet_b2: 1.54  loss_triplet_b3: 1.564  loss_triplet_b22: 1.784  loss_triplet_b33: 1.976  time: 0.3838  data_time: 0.0012  lr: 1.73e-04  max_mem: 252M
[12/26 23:25:47] fastreid.utils.events INFO:  eta: 0:16:02  epoch/iter: 15/943  total_loss: 58.34  loss_cls_b1: 6.195  loss_cls_b2: 6.186  loss_cls_b21: 6.242  loss_cls_b22: 6.239  loss_cls_b3: 6.235  loss_cls_b31: 6.204  loss_cls_b32: 6.206  loss_cls_b33: 6.216  loss_triplet_b1: 1.606  loss_triplet_b2: 1.562  loss_triplet_b3: 1.584  loss_triplet_b22: 1.829  loss_triplet_b33: 2.016  time: 0.3881  data_time: 0.0006  lr: 1.83e-04  max_mem: 252M
[12/26 23:26:12] fastreid.utils.events INFO:  eta: 0:15:52  epoch/iter: 16/999  total_loss: 57.98  loss_cls_b1: 6.193  loss_cls_b2: 6.186  loss_cls_b21: 6.224  loss_cls_b22: 6.235  loss_cls_b3: 6.233  loss_cls_b31: 6.198  loss_cls_b32: 6.211  loss_cls_b33: 6.22  loss_triplet_b1: 1.532  loss_triplet_b2: 1.492  loss_triplet_b3: 1.534  loss_triplet_b22: 1.776  loss_triplet_b33: 1.941  time: 0.3911  data_time: 0.0013  lr: 1.91e-04  max_mem: 252M
[12/26 23:26:12] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[12/26 23:26:13] fastreid.utils.events INFO:  eta: 0:15:52  epoch/iter: 16/1002  total_loss: 57.98  loss_cls_b1: 6.193  loss_cls_b2: 6.189  loss_cls_b21: 6.226  loss_cls_b22: 6.231  loss_cls_b3: 6.236  loss_cls_b31: 6.198  loss_cls_b32: 6.208  loss_cls_b33: 6.22  loss_triplet_b1: 1.532  loss_triplet_b2: 1.492  loss_triplet_b3: 1.534  loss_triplet_b22: 1.776  loss_triplet_b33: 1.941  time: 0.3912  data_time: 0.0013  lr: 1.92e-04  max_mem: 252M
[12/26 23:26:39] fastreid.utils.events INFO:  eta: 0:16:20  epoch/iter: 17/1061  total_loss: 57.46  loss_cls_b1: 6.165  loss_cls_b2: 6.149  loss_cls_b21: 6.185  loss_cls_b22: 6.194  loss_cls_b3: 6.175  loss_cls_b31: 6.178  loss_cls_b32: 6.177  loss_cls_b33: 6.193  loss_triplet_b1: 1.423  loss_triplet_b2: 1.407  loss_triplet_b3: 1.411  loss_triplet_b22: 1.637  loss_triplet_b33: 1.793  time: 0.3940  data_time: 0.0006  lr: 2.01e-04  max_mem: 252M
[12/26 23:27:05] fastreid.utils.events INFO:  eta: 0:16:51  epoch/iter: 18/1120  total_loss: 54.16  loss_cls_b1: 6.085  loss_cls_b2: 6.06  loss_cls_b21: 6.118  loss_cls_b22: 6.077  loss_cls_b3: 6.072  loss_cls_b31: 6.075  loss_cls_b32: 6.106  loss_cls_b33: 6.119  loss_triplet_b1: 1.042  loss_triplet_b2: 0.9533  loss_triplet_b3: 0.8779  loss_triplet_b22: 1.032  loss_triplet_b33: 1.061  time: 0.3967  data_time: 0.0018  lr: 2.10e-04  max_mem: 252M
[12/26 23:27:32] fastreid.engine.defaults INFO: Prepare testing set
[12/26 23:27:32] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[12/26 23:27:32] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[12/26 23:27:37] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.3376 s / batch. ETA=0:00:08
[12/26 23:27:45] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:09.450452 (0.295327 s / batch per device, on 1 devices)
[12/26 23:27:45] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:09 (0.293225 s / batch per device, on 1 devices)
[12/26 23:27:46] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[12/26 23:27:46] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 80.85    | 90.90    | 93.14     | 58.40 | 17.95  | 69.63    |[0m
[12/26 23:27:46] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[12/26 23:27:54] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_0019.pth
[12/26 23:28:02] fastreid.utils.events INFO:  eta: 0:16:44  epoch/iter: 19/1179  total_loss: 48.49  loss_cls_b1: 5.549  loss_cls_b2: 5.616  loss_cls_b21: 5.647  loss_cls_b22: 5.703  loss_cls_b3: 5.621  loss_cls_b31: 5.505  loss_cls_b32: 5.556  loss_cls_b33: 5.635  loss_triplet_b1: 0.659  loss_triplet_b2: 0.653  loss_triplet_b3: 0.6478  loss_triplet_b22: 0.73  loss_triplet_b33: 0.7721  time: 0.3990  data_time: 0.0014  lr: 2.20e-04  max_mem: 252M
[12/26 23:28:12] fastreid.utils.events INFO:  eta: 0:16:42  epoch/iter: 20/1199  total_loss: 45.87  loss_cls_b1: 5.251  loss_cls_b2: 5.383  loss_cls_b21: 5.271  loss_cls_b22: 5.469  loss_cls_b3: 5.32  loss_cls_b31: 5.307  loss_cls_b32: 5.334  loss_cls_b33: 5.456  loss_triplet_b1: 0.6066  loss_triplet_b2: 0.6152  loss_triplet_b3: 0.589  loss_triplet_b22: 0.6801  loss_triplet_b33: 0.7224  time: 0.4000  data_time: 0.0008  lr: 2.23e-04  max_mem: 252M
[12/26 23:28:29] fastreid.utils.events INFO:  eta: 0:16:30  epoch/iter: 20/1238  total_loss: 42.5  loss_cls_b1: 4.837  loss_cls_b2: 4.983  loss_cls_b21: 4.878  loss_cls_b22: 5.115  loss_cls_b3: 5.01  loss_cls_b31: 4.872  loss_cls_b32: 5.013  loss_cls_b33: 5.092  loss_triplet_b1: 0.5374  loss_triplet_b2: 0.5319  loss_triplet_b3: 0.5284  loss_triplet_b22: 0.6004  loss_triplet_b33: 0.6057  time: 0.4014  data_time: 0.0011  lr: 2.29e-04  max_mem: 252M
[12/26 23:28:56] fastreid.utils.events INFO:  eta: 0:16:14  epoch/iter: 21/1297  total_loss: 36.64  loss_cls_b1: 4.069  loss_cls_b2: 4.22  loss_cls_b21: 4.228  loss_cls_b22: 4.48  loss_cls_b3: 4.241  loss_cls_b31: 4.1  loss_cls_b32: 4.277  loss_cls_b33: 4.477  loss_triplet_b1: 0.4845  loss_triplet_b2: 0.4754  loss_triplet_b3: 0.47  loss_triplet_b22: 0.5134  loss_triplet_b33: 0.5518  time: 0.4036  data_time: 0.0003  lr: 2.38e-04  max_mem: 252M
[12/26 23:29:21] fastreid.utils.events INFO:  eta: 0:15:52  epoch/iter: 22/1356  total_loss: 33.05  loss_cls_b1: 3.663  loss_cls_b2: 3.772  loss_cls_b21: 3.781  loss_cls_b22: 4.068  loss_cls_b3: 3.83  loss_cls_b31: 3.809  loss_cls_b32: 3.933  loss_cls_b33: 4.095  loss_triplet_b1: 0.4176  loss_triplet_b2: 0.4223  loss_triplet_b3: 0.411  loss_triplet_b22: 0.4427  loss_triplet_b33: 0.4362  time: 0.4046  data_time: 0.0012  lr: 2.48e-04  max_mem: 252M
[12/26 23:29:41] fastreid.utils.events INFO:  eta: 0:15:35  epoch/iter: 23/1399  total_loss: 30.63  loss_cls_b1: 3.393  loss_cls_b2: 3.529  loss_cls_b21: 3.466  loss_cls_b22: 3.733  loss_cls_b3: 3.521  loss_cls_b31: 3.501  loss_cls_b32: 3.553  loss_cls_b33: 3.826  loss_triplet_b1: 0.3654  loss_triplet_b2: 0.3757  loss_triplet_b3: 0.3657  loss_triplet_b22: 0.3914  loss_triplet_b33: 0.3914  time: 0.4059  data_time: 0.0007  lr: 2.54e-04  max_mem: 252M
[12/26 23:29:48] fastreid.utils.events INFO:  eta: 0:15:29  epoch/iter: 23/1415  total_loss: 29.6  loss_cls_b1: 3.245  loss_cls_b2: 3.372  loss_cls_b21: 3.372  loss_cls_b22: 3.591  loss_cls_b3: 3.451  loss_cls_b31: 3.397  loss_cls_b32: 3.474  loss_cls_b33: 3.728  loss_triplet_b1: 0.3523  loss_triplet_b2: 0.369  loss_triplet_b3: 0.3597  loss_triplet_b22: 0.3784  loss_triplet_b33: 0.3781  time: 0.4064  data_time: 0.0011  lr: 2.57e-04  max_mem: 252M
[12/26 23:30:15] fastreid.utils.events INFO:  eta: 0:15:06  epoch/iter: 24/1474  total_loss: 26.02  loss_cls_b1: 2.809  loss_cls_b2: 2.903  loss_cls_b21: 2.972  loss_cls_b22: 3.223  loss_cls_b3: 2.967  loss_cls_b31: 2.985  loss_cls_b32: 3.139  loss_cls_b33: 3.351  loss_triplet_b1: 0.2814  loss_triplet_b2: 0.2848  loss_triplet_b3: 0.282  loss_triplet_b22: 0.3174  loss_triplet_b33: 0.318  time: 0.4084  data_time: 0.0015  lr: 2.66e-04  max_mem: 252M
[12/26 23:30:41] fastreid.utils.events INFO:  eta: 0:14:42  epoch/iter: 25/1533  total_loss: 23.38  loss_cls_b1: 2.482  loss_cls_b2: 2.585  loss_cls_b21: 2.66  loss_cls_b22: 2.985  loss_cls_b3: 2.629  loss_cls_b31: 2.748  loss_cls_b32: 2.862  loss_cls_b33: 3.157  loss_triplet_b1: 0.2537  loss_triplet_b2: 0.2403  loss_triplet_b3: 0.2551  loss_triplet_b22: 0.2639  loss_triplet_b33: 0.2714  time: 0.4096  data_time: 0.0005  lr: 2.76e-04  max_mem: 252M
[12/26 23:31:08] fastreid.utils.events INFO:  eta: 0:14:20  epoch/iter: 26/1592  total_loss: 21.53  loss_cls_b1: 2.249  loss_cls_b2: 2.391  loss_cls_b21: 2.466  loss_cls_b22: 2.753  loss_cls_b3: 2.439  loss_cls_b31: 2.543  loss_cls_b32: 2.708  loss_cls_b33: 2.981  loss_triplet_b1: 0.2284  loss_triplet_b2: 0.2033  loss_triplet_b3: 0.2289  loss_triplet_b22: 0.2242  loss_triplet_b33: 0.2297  time: 0.4111  data_time: 0.0007  lr: 2.85e-04  max_mem: 252M
[12/26 23:31:11] fastreid.utils.events INFO:  eta: 0:14:17  epoch/iter: 27/1599  total_loss: 21.31  loss_cls_b1: 2.234  loss_cls_b2: 2.377  loss_cls_b21: 2.446  loss_cls_b22: 2.711  loss_cls_b3: 2.407  loss_cls_b31: 2.524  loss_cls_b32: 2.617  loss_cls_b33: 2.967  loss_triplet_b1: 0.2279  loss_triplet_b2: 0.2033  loss_triplet_b3: 0.2268  loss_triplet_b22: 0.2242  loss_triplet_b33: 0.2267  time: 0.4113  data_time: 0.0005  lr: 2.86e-04  max_mem: 252M
[12/26 23:31:35] fastreid.utils.events INFO:  eta: 0:13:55  epoch/iter: 27/1651  total_loss: 19.55  loss_cls_b1: 2.028  loss_cls_b2: 2.144  loss_cls_b21: 2.18  loss_cls_b22: 2.495  loss_cls_b3: 2.187  loss_cls_b31: 2.35  loss_cls_b32: 2.398  loss_cls_b33: 2.747  loss_triplet_b1: 0.1781  loss_triplet_b2: 0.1835  loss_triplet_b3: 0.1957  loss_triplet_b22: 0.1737  loss_triplet_b33: 0.1868  time: 0.4126  data_time: 0.0006  lr: 2.94e-04  max_mem: 252M
[12/26 23:32:01] fastreid.utils.events INFO:  eta: 0:13:30  epoch/iter: 28/1710  total_loss: 18.78  loss_cls_b1: 1.965  loss_cls_b2: 2.034  loss_cls_b21: 2.106  loss_cls_b22: 2.442  loss_cls_b3: 2.095  loss_cls_b31: 2.26  loss_cls_b32: 2.337  loss_cls_b33: 2.677  loss_triplet_b1: 0.1798  loss_triplet_b2: 0.1795  loss_triplet_b3: 0.1836  loss_triplet_b22: 0.1689  loss_triplet_b33: 0.1803  time: 0.4140  data_time: 0.0008  lr: 3.03e-04  max_mem: 252M
[12/26 23:32:29] fastreid.engine.defaults INFO: Prepare testing set
[12/26 23:32:29] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[12/26 23:32:29] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[12/26 23:32:34] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.3294 s / batch. ETA=0:00:08
[12/26 23:32:42] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:09.492353 (0.296636 s / batch per device, on 1 devices)
[12/26 23:32:42] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:09 (0.292965 s / batch per device, on 1 devices)
[12/26 23:32:43] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[12/26 23:32:43] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 87.47    | 95.63    | 97.40     | 75.55 | 38.03  | 81.51    |[0m
[12/26 23:32:43] fastreid.utils.events INFO:  eta: 0:13:04  epoch/iter: 29/1769  total_loss: 17.24  loss_cls_b1: 1.772  loss_cls_b2: 1.887  loss_cls_b21: 1.961  loss_cls_b22: 2.322  loss_cls_b3: 1.921  loss_cls_b31: 2.063  loss_cls_b32: 2.201  loss_cls_b33: 2.527  loss_triplet_b1: 0.1543  loss_triplet_b2: 0.1511  loss_triplet_b3: 0.1455  loss_triplet_b22: 0.1495  loss_triplet_b33: 0.1424  time: 0.4155  data_time: 0.0017  lr: 3.13e-04  max_mem: 252M
[12/26 23:32:57] fastreid.utils.events INFO:  eta: 0:12:51  epoch/iter: 30/1799  total_loss: 16.59  loss_cls_b1: 1.674  loss_cls_b2: 1.776  loss_cls_b21: 1.884  loss_cls_b22: 2.206  loss_cls_b3: 1.826  loss_cls_b31: 2.01  loss_cls_b32: 2.095  loss_cls_b33: 2.357  loss_triplet_b1: 0.1351  loss_triplet_b2: 0.1286  loss_triplet_b3: 0.1335  loss_triplet_b22: 0.1296  loss_triplet_b33: 0.1262  time: 0.4159  data_time: 0.0008  lr: 3.17e-04  max_mem: 252M
[12/26 23:33:10] fastreid.utils.events INFO:  eta: 0:12:38  epoch/iter: 30/1828  total_loss: 15.78  loss_cls_b1: 1.6  loss_cls_b2: 1.702  loss_cls_b21: 1.825  loss_cls_b22: 2.104  loss_cls_b3: 1.733  loss_cls_b31: 1.96  loss_cls_b32: 2.03  loss_cls_b33: 2.314  loss_triplet_b1: 0.1251  loss_triplet_b2: 0.1172  loss_triplet_b3: 0.1242  loss_triplet_b22: 0.1241  loss_triplet_b33: 0.1127  time: 0.4165  data_time: 0.0007  lr: 3.22e-04  max_mem: 252M
[12/26 23:33:36] fastreid.utils.events INFO:  eta: 0:12:11  epoch/iter: 31/1887  total_loss: 15.26  loss_cls_b1: 1.518  loss_cls_b2: 1.622  loss_cls_b21: 1.71  loss_cls_b22: 2.048  loss_cls_b3: 1.632  loss_cls_b31: 1.885  loss_cls_b32: 1.961  loss_cls_b33: 2.24  loss_triplet_b1: 0.1132  loss_triplet_b2: 0.106  loss_triplet_b3: 0.1188  loss_triplet_b22: 0.1167  loss_triplet_b33: 0.1123  time: 0.4173  data_time: 0.0012  lr: 3.31e-04  max_mem: 252M
[12/26 23:34:02] fastreid.utils.events INFO:  eta: 0:11:45  epoch/iter: 32/1946  total_loss: 14.48  loss_cls_b1: 1.427  loss_cls_b2: 1.56  loss_cls_b21: 1.675  loss_cls_b22: 1.973  loss_cls_b3: 1.575  loss_cls_b31: 1.803  loss_cls_b32: 1.855  loss_cls_b33: 2.197  loss_triplet_b1: 0.09689  loss_triplet_b2: 0.1038  loss_triplet_b3: 0.1101  loss_triplet_b22: 0.1042  loss_triplet_b33: 0.1006  time: 0.4182  data_time: 0.0010  lr: 3.41e-04  max_mem: 252M
[12/26 23:34:27] fastreid.utils.events INFO:  eta: 0:11:22  epoch/iter: 33/1999  total_loss: 13.83  loss_cls_b1: 1.296  loss_cls_b2: 1.423  loss_cls_b21: 1.558  loss_cls_b22: 1.916  loss_cls_b3: 1.436  loss_cls_b31: 1.666  loss_cls_b32: 1.795  loss_cls_b33: 2.122  loss_triplet_b1: 0.08165  loss_triplet_b2: 0.08671  loss_triplet_b3: 0.09126  loss_triplet_b22: 0.08705  loss_triplet_b33: 0.09221  time: 0.4194  data_time: 0.0014  lr: 3.49e-04  max_mem: 252M
[12/26 23:34:30] fastreid.utils.events INFO:  eta: 0:11:19  epoch/iter: 33/2005  total_loss: 13.92  loss_cls_b1: 1.305  loss_cls_b2: 1.431  loss_cls_b21: 1.559  loss_cls_b22: 1.923  loss_cls_b3: 1.44  loss_cls_b31: 1.673  loss_cls_b32: 1.813  loss_cls_b33: 2.134  loss_triplet_b1: 0.08255  loss_triplet_b2: 0.08699  loss_triplet_b3: 0.09276  loss_triplet_b22: 0.08737  loss_triplet_b33: 0.09645  time: 0.4195  data_time: 0.0007  lr: 3.49e-04  max_mem: 252M
[12/26 23:34:56] fastreid.utils.events INFO:  eta: 0:10:54  epoch/iter: 34/2064  total_loss: 12.95  loss_cls_b1: 1.266  loss_cls_b2: 1.37  loss_cls_b21: 1.457  loss_cls_b22: 1.772  loss_cls_b3: 1.326  loss_cls_b31: 1.579  loss_cls_b32: 1.692  loss_cls_b33: 2.007  loss_triplet_b1: 0.07461  loss_triplet_b2: 0.07627  loss_triplet_b3: 0.08838  loss_triplet_b22: 0.0781  loss_triplet_b33: 0.09407  time: 0.4203  data_time: 0.0006  lr: 3.48e-04  max_mem: 252M
[12/26 23:35:22] fastreid.utils.events INFO:  eta: 0:10:27  epoch/iter: 35/2123  total_loss: 12.94  loss_cls_b1: 1.25  loss_cls_b2: 1.341  loss_cls_b21: 1.441  loss_cls_b22: 1.757  loss_cls_b3: 1.307  loss_cls_b31: 1.528  loss_cls_b32: 1.679  loss_cls_b33: 2.001  loss_triplet_b1: 0.07653  loss_triplet_b2: 0.07882  loss_triplet_b3: 0.08439  loss_triplet_b22: 0.08004  loss_triplet_b33: 0.09176  time: 0.4207  data_time: 0.0021  lr: 3.44e-04  max_mem: 252M
[12/26 23:35:48] fastreid.utils.events INFO:  eta: 0:10:01  epoch/iter: 36/2182  total_loss: 12.1  loss_cls_b1: 1.153  loss_cls_b2: 1.238  loss_cls_b21: 1.399  loss_cls_b22: 1.658  loss_cls_b3: 1.248  loss_cls_b31: 1.466  loss_cls_b32: 1.577  loss_cls_b33: 1.882  loss_triplet_b1: 0.07117  loss_triplet_b2: 0.06873  loss_triplet_b3: 0.07933  loss_triplet_b22: 0.06848  loss_triplet_b33: 0.07067  time: 0.4211  data_time: 0.0016  lr: 3.38e-04  max_mem: 252M
[12/26 23:35:56] fastreid.utils.events INFO:  eta: 0:09:53  epoch/iter: 37/2199  total_loss: 12.02  loss_cls_b1: 1.13  loss_cls_b2: 1.183  loss_cls_b21: 1.369  loss_cls_b22: 1.622  loss_cls_b3: 1.205  loss_cls_b31: 1.424  loss_cls_b32: 1.56  loss_cls_b33: 1.864  loss_triplet_b1: 0.06784  loss_triplet_b2: 0.06647  loss_triplet_b3: 0.07065  loss_triplet_b22: 0.06743  loss_triplet_b33: 0.06506  time: 0.4213  data_time: 0.0005  lr: 3.29e-04  max_mem: 252M
[12/26 23:36:15] fastreid.utils.events INFO:  eta: 0:09:35  epoch/iter: 37/2241  total_loss: 10.75  loss_cls_b1: 1.034  loss_cls_b2: 1.063  loss_cls_b21: 1.196  loss_cls_b22: 1.499  loss_cls_b3: 1.109  loss_cls_b31: 1.328  loss_cls_b32: 1.411  loss_cls_b33: 1.733  loss_triplet_b1: 0.05646  loss_triplet_b2: 0.05518  loss_triplet_b3: 0.05947  loss_triplet_b22: 0.05306  loss_triplet_b33: 0.04956  time: 0.4218  data_time: 0.0020  lr: 3.29e-04  max_mem: 252M
[12/26 23:36:41] fastreid.utils.events INFO:  eta: 0:09:08  epoch/iter: 38/2300  total_loss: 10.28  loss_cls_b1: 0.9898  loss_cls_b2: 1.019  loss_cls_b21: 1.15  loss_cls_b22: 1.426  loss_cls_b3: 1.054  loss_cls_b31: 1.262  loss_cls_b32: 1.387  loss_cls_b33: 1.647  loss_triplet_b1: 0.0508  loss_triplet_b2: 0.05106  loss_triplet_b3: 0.05466  loss_triplet_b22: 0.04451  loss_triplet_b33: 0.0432  time: 0.4225  data_time: 0.0011  lr: 3.18e-04  max_mem: 252M
[12/26 23:37:08] fastreid.engine.defaults INFO: Prepare testing set
[12/26 23:37:08] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[12/26 23:37:08] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[12/26 23:37:13] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.3400 s / batch. ETA=0:00:08
[12/26 23:37:21] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:09.310273 (0.290946 s / batch per device, on 1 devices)
[12/26 23:37:21] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:09 (0.289007 s / batch per device, on 1 devices)
[12/26 23:37:22] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[12/26 23:37:22] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 90.66    | 96.57    | 98.23     | 82.95 | 52.57  | 86.80    |[0m
[12/26 23:37:22] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[12/26 23:37:31] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_0039.pth
[12/26 23:37:39] fastreid.utils.events INFO:  eta: 0:08:44  epoch/iter: 39/2359  total_loss: 9.848  loss_cls_b1: 0.9335  loss_cls_b2: 0.9579  loss_cls_b21: 1.103  loss_cls_b22: 1.352  loss_cls_b3: 1.003  loss_cls_b31: 1.194  loss_cls_b32: 1.374  loss_cls_b33: 1.551  loss_triplet_b1: 0.04501  loss_triplet_b2: 0.0438  loss_triplet_b3: 0.04868  loss_triplet_b22: 0.03808  loss_triplet_b33: 0.0379  time: 0.4231  data_time: 0.0006  lr: 3.05e-04  max_mem: 252M
[12/26 23:37:58] fastreid.utils.events INFO:  eta: 0:08:26  epoch/iter: 40/2399  total_loss: 9.315  loss_cls_b1: 0.8607  loss_cls_b2: 0.8996  loss_cls_b21: 1.028  loss_cls_b22: 1.319  loss_cls_b3: 0.9329  loss_cls_b31: 1.115  loss_cls_b32: 1.308  loss_cls_b33: 1.483  loss_triplet_b1: 0.03578  loss_triplet_b2: 0.03912  loss_triplet_b3: 0.04298  loss_triplet_b22: 0.03094  loss_triplet_b33: 0.03244  time: 0.4238  data_time: 0.0009  lr: 2.90e-04  max_mem: 252M
[12/26 23:38:06] fastreid.utils.events INFO:  eta: 0:08:18  epoch/iter: 40/2418  total_loss: 8.957  loss_cls_b1: 0.8342  loss_cls_b2: 0.8711  loss_cls_b21: 0.9903  loss_cls_b22: 1.271  loss_cls_b3: 0.9223  loss_cls_b31: 1.103  loss_cls_b32: 1.241  loss_cls_b33: 1.477  loss_triplet_b1: 0.03091  loss_triplet_b2: 0.0373  loss_triplet_b3: 0.03634  loss_triplet_b22: 0.02638  loss_triplet_b33: 0.02553  time: 0.4240  data_time: 0.0005  lr: 2.90e-04  max_mem: 252M
[12/26 23:38:33] fastreid.utils.events INFO:  eta: 0:07:52  epoch/iter: 41/2477  total_loss: 8.595  loss_cls_b1: 0.7537  loss_cls_b2: 0.8296  loss_cls_b21: 0.9618  loss_cls_b22: 1.221  loss_cls_b3: 0.8454  loss_cls_b31: 1.028  loss_cls_b32: 1.188  loss_cls_b33: 1.432  loss_triplet_b1: 0.02687  loss_triplet_b2: 0.03059  loss_triplet_b3: 0.0331  loss_triplet_b22: 0.02193  loss_triplet_b33: 0.02281  time: 0.4245  data_time: 0.0010  lr: 2.74e-04  max_mem: 252M
[12/26 23:38:59] fastreid.utils.events INFO:  eta: 0:07:26  epoch/iter: 42/2536  total_loss: 7.681  loss_cls_b1: 0.7076  loss_cls_b2: 0.7207  loss_cls_b21: 0.8499  loss_cls_b22: 1.155  loss_cls_b3: 0.7632  loss_cls_b31: 0.9413  loss_cls_b32: 1.096  loss_cls_b33: 1.328  loss_triplet_b1: 0.02043  loss_triplet_b2: 0.02308  loss_triplet_b3: 0.02531  loss_triplet_b22: 0.01741  loss_triplet_b33: 0.01703  time: 0.4250  data_time: 0.0006  lr: 2.56e-04  max_mem: 252M
[12/26 23:39:26] fastreid.utils.events INFO:  eta: 0:06:59  epoch/iter: 43/2595  total_loss: 7.112  loss_cls_b1: 0.6123  loss_cls_b2: 0.6529  loss_cls_b21: 0.776  loss_cls_b22: 1.053  loss_cls_b3: 0.692  loss_cls_b31: 0.8769  loss_cls_b32: 1.012  loss_cls_b33: 1.234  loss_triplet_b1: 0.01868  loss_triplet_b2: 0.02046  loss_triplet_b3: 0.02109  loss_triplet_b22: 0.01474  loss_triplet_b33: 0.01227  time: 0.4255  data_time: 0.0009  lr: 2.37e-04  max_mem: 252M
[12/26 23:39:28] fastreid.utils.events INFO:  eta: 0:06:58  epoch/iter: 44/2599  total_loss: 7.148  loss_cls_b1: 0.6178  loss_cls_b2: 0.6642  loss_cls_b21: 0.7827  loss_cls_b22: 1.065  loss_cls_b3: 0.6975  loss_cls_b31: 0.8866  loss_cls_b32: 1.022  loss_cls_b33: 1.24  loss_triplet_b1: 0.01907  loss_triplet_b2: 0.02075  loss_triplet_b3: 0.02168  loss_triplet_b22: 0.01543  loss_triplet_b33: 0.01233  time: 0.4256  data_time: 0.0009  lr: 2.17e-04  max_mem: 252M
[12/26 23:39:52] fastreid.utils.events INFO:  eta: 0:06:33  epoch/iter: 44/2654  total_loss: 6.761  loss_cls_b1: 0.5866  loss_cls_b2: 0.6338  loss_cls_b21: 0.7346  loss_cls_b22: 0.9712  loss_cls_b3: 0.6363  loss_cls_b31: 0.8159  loss_cls_b32: 0.9824  loss_cls_b33: 1.147  loss_triplet_b1: 0.01595  loss_triplet_b2: 0.01591  loss_triplet_b3: 0.01927  loss_triplet_b22: 0.01075  loss_triplet_b33: 0.009593  time: 0.4260  data_time: 0.0006  lr: 2.17e-04  max_mem: 252M
[12/26 23:40:18] fastreid.utils.events INFO:  eta: 0:06:05  epoch/iter: 45/2713  total_loss: 6.403  loss_cls_b1: 0.5486  loss_cls_b2: 0.5951  loss_cls_b21: 0.7207  loss_cls_b22: 0.9346  loss_cls_b3: 0.6236  loss_cls_b31: 0.7952  loss_cls_b32: 0.953  loss_cls_b33: 1.101  loss_triplet_b1: 0.01267  loss_triplet_b2: 0.01306  loss_triplet_b3: 0.01475  loss_triplet_b22: 0.008556  loss_triplet_b33: 0.00816  time: 0.4263  data_time: 0.0020  lr: 1.96e-04  max_mem: 252M
[12/26 23:40:45] fastreid.utils.events INFO:  eta: 0:05:39  epoch/iter: 46/2772  total_loss: 5.941  loss_cls_b1: 0.5074  loss_cls_b2: 0.5596  loss_cls_b21: 0.6552  loss_cls_b22: 0.8898  loss_cls_b3: 0.5654  loss_cls_b31: 0.7531  loss_cls_b32: 0.8587  loss_cls_b33: 1.035  loss_triplet_b1: 0.01094  loss_triplet_b2: 0.01019  loss_triplet_b3: 0.01264  loss_triplet_b22: 0.006028  loss_triplet_b33: 0.005094  time: 0.4267  data_time: 0.0011  lr: 1.75e-04  max_mem: 252M
[12/26 23:40:57] fastreid.utils.events INFO:  eta: 0:05:27  epoch/iter: 47/2799  total_loss: 5.814  loss_cls_b1: 0.5002  loss_cls_b2: 0.553  loss_cls_b21: 0.6402  loss_cls_b22: 0.8776  loss_cls_b3: 0.5549  loss_cls_b31: 0.7176  loss_cls_b32: 0.8299  loss_cls_b33: 1.03  loss_triplet_b1: 0.01037  loss_triplet_b2: 0.01029  loss_triplet_b3: 0.01147  loss_triplet_b22: 0.006139  loss_triplet_b33: 0.005094  time: 0.4268  data_time: 0.0011  lr: 1.54e-04  max_mem: 252M
[12/26 23:41:11] fastreid.utils.events INFO:  eta: 0:05:13  epoch/iter: 47/2831  total_loss: 5.565  loss_cls_b1: 0.4709  loss_cls_b2: 0.5278  loss_cls_b21: 0.613  loss_cls_b22: 0.8369  loss_cls_b3: 0.5407  loss_cls_b31: 0.693  loss_cls_b32: 0.8146  loss_cls_b33: 0.9756  loss_triplet_b1: 0.008418  loss_triplet_b2: 0.009606  loss_triplet_b3: 0.01059  loss_triplet_b22: 0.005509  loss_triplet_b33: 0.004629  time: 0.4271  data_time: 0.0007  lr: 1.54e-04  max_mem: 252M
[12/26 23:41:37] fastreid.utils.events INFO:  eta: 0:04:47  epoch/iter: 48/2890  total_loss: 5.205  loss_cls_b1: 0.4422  loss_cls_b2: 0.4922  loss_cls_b21: 0.5999  loss_cls_b22: 0.7792  loss_cls_b3: 0.5032  loss_cls_b31: 0.6582  loss_cls_b32: 0.7693  loss_cls_b33: 0.94  loss_triplet_b1: 0.00737  loss_triplet_b2: 0.008725  loss_triplet_b3: 0.01039  loss_triplet_b22: 0.004969  loss_triplet_b33: 0.004407  time: 0.4273  data_time: 0.0008  lr: 1.33e-04  max_mem: 252M
[12/26 23:42:00] fastreid.engine.defaults INFO: Prepare testing set
[12/26 23:42:00] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[12/26 23:42:00] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[12/26 23:42:05] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.3142 s / batch. ETA=0:00:08
[12/26 23:42:12] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.801155 (0.275036 s / batch per device, on 1 devices)
[12/26 23:42:12] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.273324 s / batch per device, on 1 devices)
[12/26 23:42:14] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[12/26 23:42:14] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 91.13    | 97.52    | 98.82     | 86.25 | 62.23  | 88.69    |[0m
[12/26 23:42:14] fastreid.utils.events INFO:  eta: 0:04:20  epoch/iter: 49/2949  total_loss: 4.986  loss_cls_b1: 0.4186  loss_cls_b2: 0.4735  loss_cls_b21: 0.5696  loss_cls_b22: 0.7433  loss_cls_b3: 0.4757  loss_cls_b31: 0.6345  loss_cls_b32: 0.738  loss_cls_b33: 0.8776  loss_triplet_b1: 0.006662  loss_triplet_b2: 0.0086  loss_triplet_b3: 0.01039  loss_triplet_b22: 0.004428  loss_triplet_b33: 0.003879  time: 0.4264  data_time: 0.0015  lr: 1.13e-04  max_mem: 252M
[12/26 23:42:34] fastreid.utils.events INFO:  eta: 0:03:57  epoch/iter: 50/2999  total_loss: 4.764  loss_cls_b1: 0.3903  loss_cls_b2: 0.4257  loss_cls_b21: 0.5195  loss_cls_b22: 0.6941  loss_cls_b3: 0.4529  loss_cls_b31: 0.5996  loss_cls_b32: 0.7039  loss_cls_b33: 0.8374  loss_triplet_b1: 0.005475  loss_triplet_b2: 0.00823  loss_triplet_b3: 0.01001  loss_triplet_b22: 0.004067  loss_triplet_b33: 0.00357  time: 0.4259  data_time: 0.0018  lr: 9.39e-05  max_mem: 252M
[12/26 23:42:37] fastreid.utils.events INFO:  eta: 0:03:53  epoch/iter: 50/3008  total_loss: 4.697  loss_cls_b1: 0.381  loss_cls_b2: 0.4202  loss_cls_b21: 0.5043  loss_cls_b22: 0.6811  loss_cls_b3: 0.4467  loss_cls_b31: 0.5921  loss_cls_b32: 0.6871  loss_cls_b33: 0.8189  loss_triplet_b1: 0.005172  loss_triplet_b2: 0.007817  loss_triplet_b3: 0.009351  loss_triplet_b22: 0.003914  loss_triplet_b33: 0.00357  time: 0.4258  data_time: 0.0018  lr: 9.39e-05  max_mem: 252M
[12/26 23:43:00] fastreid.utils.events INFO:  eta: 0:03:26  epoch/iter: 51/3067  total_loss: 4.569  loss_cls_b1: 0.3754  loss_cls_b2: 0.3982  loss_cls_b21: 0.4838  loss_cls_b22: 0.6761  loss_cls_b3: 0.4417  loss_cls_b31: 0.5585  loss_cls_b32: 0.6832  loss_cls_b33: 0.7947  loss_triplet_b1: 0.005889  loss_triplet_b2: 0.008045  loss_triplet_b3: 0.009871  loss_triplet_b22: 0.004147  loss_triplet_b33: 0.004515  time: 0.4251  data_time: 0.0010  lr: 7.59e-05  max_mem: 252M
[12/26 23:43:23] fastreid.utils.events INFO:  eta: 0:02:59  epoch/iter: 52/3126  total_loss: 4.317  loss_cls_b1: 0.3631  loss_cls_b2: 0.3862  loss_cls_b21: 0.4675  loss_cls_b22: 0.6389  loss_cls_b3: 0.4076  loss_cls_b31: 0.5308  loss_cls_b32: 0.644  loss_cls_b33: 0.7616  loss_triplet_b1: 0.006382  loss_triplet_b2: 0.008095  loss_triplet_b3: 0.009871  loss_triplet_b22: 0.004358  loss_triplet_b33: 0.004804  time: 0.4242  data_time: 0.0011  lr: 5.94e-05  max_mem: 252M
[12/26 23:43:45] fastreid.utils.events INFO:  eta: 0:02:33  epoch/iter: 53/3185  total_loss: 4.003  loss_cls_b1: 0.3418  loss_cls_b2: 0.3667  loss_cls_b21: 0.4402  loss_cls_b22: 0.5734  loss_cls_b3: 0.3747  loss_cls_b31: 0.5104  loss_cls_b32: 0.5843  loss_cls_b33: 0.699  loss_triplet_b1: 0.005593  loss_triplet_b2: 0.007459  loss_triplet_b3: 0.008919  loss_triplet_b22: 0.003264  loss_triplet_b33: 0.003398  time: 0.4234  data_time: 0.0004  lr: 4.45e-05  max_mem: 252M
[12/26 23:43:51] fastreid.utils.events INFO:  eta: 0:02:27  epoch/iter: 54/3199  total_loss: 4.033  loss_cls_b1: 0.3433  loss_cls_b2: 0.3667  loss_cls_b21: 0.4483  loss_cls_b22: 0.5848  loss_cls_b3: 0.3874  loss_cls_b31: 0.524  loss_cls_b32: 0.5895  loss_cls_b33: 0.7044  loss_triplet_b1: 0.005593  loss_triplet_b2: 0.007349  loss_triplet_b3: 0.008945  loss_triplet_b22: 0.003305  loss_triplet_b33: 0.003599  time: 0.4232  data_time: 0.0004  lr: 3.15e-05  max_mem: 252M
[12/26 23:44:08] fastreid.utils.events INFO:  eta: 0:02:06  epoch/iter: 54/3244  total_loss: 4  loss_cls_b1: 0.3361  loss_cls_b2: 0.3668  loss_cls_b21: 0.448  loss_cls_b22: 0.5791  loss_cls_b3: 0.3848  loss_cls_b31: 0.5163  loss_cls_b32: 0.5835  loss_cls_b33: 0.702  loss_triplet_b1: 0.004962  loss_triplet_b2: 0.007191  loss_triplet_b3: 0.009051  loss_triplet_b22: 0.003225  loss_triplet_b33: 0.003599  time: 0.4226  data_time: 0.0013  lr: 3.15e-05  max_mem: 252M
[12/26 23:44:30] fastreid.utils.events INFO:  eta: 0:01:40  epoch/iter: 55/3303  total_loss: 3.824  loss_cls_b1: 0.3248  loss_cls_b2: 0.3511  loss_cls_b21: 0.4284  loss_cls_b22: 0.5517  loss_cls_b3: 0.3598  loss_cls_b31: 0.4941  loss_cls_b32: 0.5631  loss_cls_b33: 0.6632  loss_triplet_b1: 0.003685  loss_triplet_b2: 0.005515  loss_triplet_b3: 0.006744  loss_triplet_b22: 0.002461  loss_triplet_b33: 0.002527  time: 0.4219  data_time: 0.0012  lr: 2.07e-05  max_mem: 252M
[12/26 23:44:53] fastreid.utils.events INFO:  eta: 0:01:13  epoch/iter: 56/3362  total_loss: 3.763  loss_cls_b1: 0.3091  loss_cls_b2: 0.338  loss_cls_b21: 0.4154  loss_cls_b22: 0.5341  loss_cls_b3: 0.3497  loss_cls_b31: 0.4861  loss_cls_b32: 0.5472  loss_cls_b33: 0.6439  loss_triplet_b1: 0.003418  loss_triplet_b2: 0.004826  loss_triplet_b3: 0.006283  loss_triplet_b22: 0.002402  loss_triplet_b33: 0.00222  time: 0.4211  data_time: 0.0012  lr: 1.20e-05  max_mem: 252M
[12/26 23:45:07] fastreid.utils.events INFO:  eta: 0:00:57  epoch/iter: 57/3399  total_loss: 3.756  loss_cls_b1: 0.3091  loss_cls_b2: 0.345  loss_cls_b21: 0.4246  loss_cls_b22: 0.5354  loss_cls_b3: 0.3435  loss_cls_b31: 0.4856  loss_cls_b32: 0.554  loss_cls_b33: 0.6382  loss_triplet_b1: 0.003217  loss_triplet_b2: 0.004278  loss_triplet_b3: 0.005895  loss_triplet_b22: 0.00223  loss_triplet_b33: 0.00222  time: 0.4207  data_time: 0.0010  lr: 5.76e-06  max_mem: 252M
[12/26 23:45:16] fastreid.utils.events INFO:  eta: 0:00:48  epoch/iter: 57/3421  total_loss: 3.731  loss_cls_b1: 0.3101  loss_cls_b2: 0.3358  loss_cls_b21: 0.4246  loss_cls_b22: 0.5311  loss_cls_b3: 0.3435  loss_cls_b31: 0.482  loss_cls_b32: 0.5561  loss_cls_b33: 0.638  loss_triplet_b1: 0.003418  loss_triplet_b2: 0.004151  loss_triplet_b3: 0.006063  loss_triplet_b22: 0.002218  loss_triplet_b33: 0.00226  time: 0.4204  data_time: 0.0012  lr: 5.76e-06  max_mem: 252M
[12/26 23:45:38] fastreid.utils.events INFO:  eta: 0:00:23  epoch/iter: 58/3480  total_loss: 3.769  loss_cls_b1: 0.3136  loss_cls_b2: 0.3338  loss_cls_b21: 0.4288  loss_cls_b22: 0.5382  loss_cls_b3: 0.3461  loss_cls_b31: 0.4816  loss_cls_b32: 0.566  loss_cls_b33: 0.6536  loss_triplet_b1: 0.004333  loss_triplet_b2: 0.004702  loss_triplet_b3: 0.00638  loss_triplet_b22: 0.002549  loss_triplet_b33: 0.002443  time: 0.4198  data_time: 0.0007  lr: 1.97e-06  max_mem: 252M
[12/26 23:46:01] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3539  total_loss: 3.641  loss_cls_b1: 0.3108  loss_cls_b2: 0.3286  loss_cls_b21: 0.4139  loss_cls_b22: 0.5066  loss_cls_b3: 0.333  loss_cls_b31: 0.4812  loss_cls_b32: 0.5579  loss_cls_b33: 0.6299  loss_triplet_b1: 0.003291  loss_triplet_b2: 0.004561  loss_triplet_b3: 0.006021  loss_triplet_b22: 0.002134  loss_triplet_b33: 0.001698  time: 0.4192  data_time: 0.0011  lr: 7.00e-07  max_mem: 252M
[12/26 23:46:01] fastreid.engine.defaults INFO: Prepare testing set
[12/26 23:46:01] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[12/26 23:46:01] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[12/26 23:46:06] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.3060 s / batch. ETA=0:00:08
[12/26 23:46:13] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:08.257808 (0.258056 s / batch per device, on 1 devices)
[12/26 23:46:13] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:08 (0.256179 s / batch per device, on 1 devices)
[12/26 23:46:14] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[12/26 23:46:14] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 91.73    | 97.28    | 98.70     | 86.91 | 64.59  | 89.32    |[0m
[12/26 23:46:14] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[12/26 23:46:22] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_final.pth
[12/26 23:46:29] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3539  total_loss: 3.641  loss_cls_b1: 0.3108  loss_cls_b2: 0.3286  loss_cls_b21: 0.4139  loss_cls_b22: 0.5066  loss_cls_b3: 0.333  loss_cls_b31: 0.4812  loss_cls_b32: 0.5579  loss_cls_b33: 0.6299  loss_triplet_b1: 0.003291  loss_triplet_b2: 0.004561  loss_triplet_b3: 0.006021  loss_triplet_b22: 0.002134  loss_triplet_b33: 0.001698  time: 0.4192  data_time: 0.0011  lr: 7.00e-07  max_mem: 252M
[12/26 23:46:29] fastreid.engine.hooks INFO: Overall training speed: 3538 iterations in 0:24:43 (0.4192 s / it)
[12/26 23:46:29] fastreid.engine.hooks INFO: Total training time: 0:27:09 (0:02:26 on hooks)
[12/27 00:26:01] fastreid INFO: Rank of current process: 0. World size: 1
[12/27 00:26:02] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.14 | packaged by conda-forge | (default, Nov 21 2022, 13:18:34) [GCC 10.4.0]
numpy                   1.23.5
fastreid                1.3 @/data01/zhangleiting/_codes/fast-reid/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA A100-PCIE-40GB
CUDA_HOME               /usr/local/cuda-11.4
Pillow                  9.3.0
torchvision             0.12.0+cu113 @/data01/zhangleiting/anaconda3/envs/fast/lib/python3.8/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75, sm_80, sm_86
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/27 00:26:02] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.DEVICE', 'cuda:0'], resume=False)
[12/27 00:26:02] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[12/27 00:26:02] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:0
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[12/27 00:26:02] fastreid INFO: Full config saved to /data01/zhangleiting/_codes/fast-reid/logs/wildsplit1/mgn_R50-ibn/config.yaml
[12/27 00:26:02] fastreid.utils.env INFO: Using a generated random seed 3121603
[12/27 00:26:02] fastreid.engine.defaults INFO: Prepare training set
[12/27 00:26:02] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[12/27 00:26:02] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[12/27 00:26:03] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[12/27 00:26:03] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /data01/zhangleiting/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[12/27 00:26:04] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[12/27 00:26:15] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:0', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[12/27 00:26:17] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[12/27 00:26:17] fastreid.engine.train_loop INFO: Starting training from epoch 0
[12/27 00:26:17] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[12/27 00:26:41] fastreid.utils.events INFO:  eta: 0:19:03  epoch/iter: 0/58  total_loss: 57.41  loss_cls_b1: 6.261  loss_cls_b2: 6.263  loss_cls_b21: 6.245  loss_cls_b22: 6.19  loss_cls_b3: 6.207  loss_cls_b31: 6.238  loss_cls_b32: 6.233  loss_cls_b33: 6.235  loss_triplet_b1: 1.333  loss_triplet_b2: 1.386  loss_triplet_b3: 1.365  loss_triplet_b22: 1.647  loss_triplet_b33: 1.846  time: 0.3319  data_time: 0.0007  lr: 4.35e-05  max_mem: 23742M
[12/27 00:27:03] fastreid.utils.events INFO:  eta: 0:19:18  epoch/iter: 1/117  total_loss: 57.42  loss_cls_b1: 6.239  loss_cls_b2: 6.266  loss_cls_b21: 6.233  loss_cls_b22: 6.238  loss_cls_b3: 6.24  loss_cls_b31: 6.259  loss_cls_b32: 6.232  loss_cls_b33: 6.198  loss_triplet_b1: 1.34  loss_triplet_b2: 1.371  loss_triplet_b3: 1.369  loss_triplet_b22: 1.657  loss_triplet_b33: 1.874  time: 0.3474  data_time: 0.0011  lr: 5.26e-05  max_mem: 23742M
[12/27 00:27:24] fastreid.utils.events INFO:  eta: 0:19:08  epoch/iter: 2/176  total_loss: 57.47  loss_cls_b1: 6.232  loss_cls_b2: 6.263  loss_cls_b21: 6.231  loss_cls_b22: 6.235  loss_cls_b3: 6.248  loss_cls_b31: 6.262  loss_cls_b32: 6.244  loss_cls_b33: 6.2  loss_triplet_b1: 1.359  loss_triplet_b2: 1.379  loss_triplet_b3: 1.379  loss_triplet_b22: 1.667  loss_triplet_b33: 1.89  time: 0.3478  data_time: 0.0005  lr: 6.19e-05  max_mem: 23742M
[12/27 00:27:32] fastreid.utils.events INFO:  eta: 0:19:02  epoch/iter: 3/199  total_loss: 57.47  loss_cls_b1: 6.236  loss_cls_b2: 6.256  loss_cls_b21: 6.231  loss_cls_b22: 6.223  loss_cls_b3: 6.243  loss_cls_b31: 6.257  loss_cls_b32: 6.251  loss_cls_b33: 6.213  loss_triplet_b1: 1.356  loss_triplet_b2: 1.379  loss_triplet_b3: 1.378  loss_triplet_b22: 1.666  loss_triplet_b33: 1.886  time: 0.3478  data_time: 0.0016  lr: 6.56e-05  max_mem: 23742M
[12/27 00:27:44] fastreid.utils.events INFO:  eta: 0:18:51  epoch/iter: 3/235  total_loss: 57.56  loss_cls_b1: 6.221  loss_cls_b2: 6.253  loss_cls_b21: 6.231  loss_cls_b22: 6.233  loss_cls_b3: 6.248  loss_cls_b31: 6.258  loss_cls_b32: 6.252  loss_cls_b33: 6.2  loss_triplet_b1: 1.368  loss_triplet_b2: 1.389  loss_triplet_b3: 1.393  loss_triplet_b22: 1.675  loss_triplet_b33: 1.895  time: 0.3474  data_time: 0.0007  lr: 7.12e-05  max_mem: 23742M
[12/27 00:27:50] fastreid.engine.hooks INFO: Overall training speed: 249 iterations in 0:01:26 (0.3482 s / it)
[12/27 00:27:50] fastreid.engine.hooks INFO: Total training time: 0:01:27 (0:00:00 on hooks)
[07/09 15:34:07] fastreid INFO: Rank of current process: 0. World size: 1
[07/09 15:34:07] fastreid INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
numpy                   1.24.3
fastreid                1.3 @/home/zhourui/hyf_lpl_multicamera/codes/./fastreid
FASTREID_ENV_MODULE     <not set>
PyTorch                 1.11.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1,2,3             NVIDIA GeForce GTX 1080 Ti
CUDA_HOME               :/usr/local/cuda-10.2
Pillow                  10.3.0
torchvision             0.12.0 @/opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision
torchvision arch flags  /opt/anaconda3/envs/multicamera/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
----------------------  ----------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[07/09 15:34:07] fastreid INFO: Command line arguments: Namespace(config_file='./configs/WildSplit1/mgn_R50-ibn.yml', dist_url='tcp://127.0.0.1:50154', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/09 15:34:07] fastreid INFO: Contents of args.config_file=./configs/WildSplit1/mgn_R50-ibn.yml:
_BASE_: ../Base-MGN.yml

MODEL:
  BACKBONE:
    WITH_IBN: True

DATASETS:
  NAMES: ("WildSplit1",)
  TESTS: ("WildSplit1",)

OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn

[07/09 15:34:07] fastreid INFO: Running with full config:
CUDNN_BENCHMARK: True
DATALOADER:
  NUM_INSTANCE: 16
  NUM_WORKERS: 8
  SAMPLER_TRAIN: NaiveIdentitySampler
  SET_WEIGHT: []
DATASETS:
  COMBINEALL: False
  NAMES: ('WildSplit1',)
  TESTS: ('WildSplit1',)
INPUT:
  AFFINE:
    ENABLED: False
  AUGMIX:
    ENABLED: False
    PROB: 0.0
  AUTOAUG:
    ENABLED: True
    PROB: 0.1
  CJ:
    BRIGHTNESS: 0.15
    CONTRAST: 0.15
    ENABLED: False
    HUE: 0.1
    PROB: 0.5
    SATURATION: 0.1
  CROP:
    ENABLED: False
    RATIO: [0.75, 1.3333333333333333]
    SCALE: [0.16, 1]
    SIZE: [224, 224]
  FLIP:
    ENABLED: True
    PROB: 0.5
  PADDING:
    ENABLED: True
    MODE: constant
    SIZE: 10
  REA:
    ENABLED: True
    PROB: 0.5
    VALUE: [123.675, 116.28, 103.53]
  RPT:
    ENABLED: False
    PROB: 0.5
  SIZE_TEST: [384, 128]
  SIZE_TRAIN: [384, 128]
KD:
  EMA:
    ENABLED: False
    MOMENTUM: 0.999
  MODEL_CONFIG: []
  MODEL_WEIGHTS: []
MODEL:
  BACKBONE:
    ATT_DROP_RATE: 0.0
    DEPTH: 50x
    DROP_PATH_RATIO: 0.1
    DROP_RATIO: 0.0
    FEAT_DIM: 2048
    LAST_STRIDE: 1
    NAME: build_resnet_backbone
    NORM: BN
    PRETRAIN: True
    PRETRAIN_PATH: 
    SIE_COE: 3.0
    STRIDE_SIZE: (16, 16)
    WITH_IBN: True
    WITH_NL: False
    WITH_SE: False
  DEVICE: cuda:1
  FREEZE_LAYERS: ['backbone', 'b1', 'b2', 'b3']
  HEADS:
    CLS_LAYER: CircleSoftmax
    EMBEDDING_DIM: 256
    MARGIN: 0.35
    NAME: EmbeddingHead
    NECK_FEAT: after
    NORM: BN
    NUM_CLASSES: 0
    POOL_LAYER: GeneralizedMeanPoolingP
    SCALE: 64
    WITH_BNNECK: True
  LOSSES:
    CE:
      ALPHA: 0.2
      EPSILON: 0.1
      SCALE: 1.0
    CIRCLE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    COSFACE:
      GAMMA: 128
      MARGIN: 0.25
      SCALE: 1.0
    FL:
      ALPHA: 0.25
      GAMMA: 2
      SCALE: 1.0
    NAME: ('CrossEntropyLoss', 'TripletLoss')
    TRI:
      HARD_MINING: True
      MARGIN: 0.0
      NORM_FEAT: False
      SCALE: 1.0
  META_ARCHITECTURE: MGN
  PIXEL_MEAN: [123.675, 116.28, 103.53]
  PIXEL_STD: [58.395, 57.120000000000005, 57.375]
  QUEUE_SIZE: 8192
  WEIGHTS: 
OUTPUT_DIR: logs/wildsplit1/mgn_R50-ibn
SOLVER:
  AMP:
    ENABLED: True
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 20
  CLIP_GRADIENTS:
    CLIP_TYPE: norm
    CLIP_VALUE: 5.0
    ENABLED: False
    NORM_TYPE: 2.0
  DELAY_EPOCHS: 30
  ETA_MIN_LR: 7e-07
  FREEZE_ITERS: 1000
  GAMMA: 0.1
  HEADS_LR_FACTOR: 1.0
  IMS_PER_BATCH: 64
  MAX_EPOCH: 60
  MOMENTUM: 0.9
  NESTEROV: False
  OPT: Adam
  SCHED: CosineAnnealingLR
  STEPS: [40, 90]
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 2000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0005
  WEIGHT_DECAY_BIAS: 0.0005
  WEIGHT_DECAY_NORM: 0.0005
TEST:
  AQE:
    ALPHA: 3.0
    ENABLED: False
    QE_K: 5
    QE_TIME: 1
  EVAL_PERIOD: 10
  FLIP:
    ENABLED: False
  IMS_PER_BATCH: 128
  METRIC: cosine
  PRECISE_BN:
    DATASET: Market1501
    ENABLED: False
    NUM_ITER: 300
  RERANK:
    ENABLED: False
    K1: 20
    K2: 6
    LAMBDA: 0.3
  ROC:
    ENABLED: False
[07/09 15:34:07] fastreid INFO: Full config saved to /home/zhourui/hyf_lpl_multicamera/codes/logs/wildsplit1/mgn_R50-ibn/config.yaml
[07/09 15:34:07] fastreid.utils.env INFO: Using a generated random seed 10029736
[07/09 15:34:07] fastreid.engine.defaults INFO: Prepare training set
[07/09 15:34:08] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| train    | 297     | 3827       | 1           |[0m
[07/09 15:34:08] fastreid.data.build INFO: Using training sampler NaiveIdentitySampler
[07/09 15:34:10] fastreid.engine.defaults INFO: Auto-scaling the num_classes=297
[07/09 15:34:10] fastreid.modeling.backbones.resnet INFO: Loading pretrained model from /home/zhourui/.cache/torch/checkpoints/resnet50_ibn_a-d9d0bb7b.pth
[07/09 15:34:10] fastreid.modeling.backbones.resnet INFO: The checkpoint state_dict contains keys that are not used by the model:
  [35mfc.{weight, bias}[0m
[07/09 15:34:12] fastreid.engine.defaults INFO: Model:
MGN(
  (backbone): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (5): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): IBN(
        (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (se): Identity()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (b1): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b1_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b2): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b2_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b21_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b22_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b3): Sequential(
    (0): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): IBN(
          (IN): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
          (BN): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
    (1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (se): Identity()
      )
    )
  )
  (b3_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b31_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b32_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
  (b33_head): EmbeddingHead(
    (pool_layer): GeneralizedMeanPoolingP(Parameter containing:
    tensor([3.], device='cuda:1', requires_grad=True), output_size=(1, 1))
    (bottleneck): Sequential(
      (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (cls_layer): CircleSoftmax(num_classes=297, scale=64, margin=0.35)
  )
)
[07/09 15:34:16] fastreid.utils.checkpoint INFO: No checkpoint found. Training model from scratch
[07/09 15:34:16] fastreid.engine.train_loop INFO: Starting training from epoch 0
[07/09 15:34:17] fastreid.engine.hooks INFO: Freeze layer group "backbone, b1, b2, b3" training for 1000 iterations
[07/09 15:35:15] fastreid.utils.events INFO:  eta: 0:52:16  epoch/iter: 0/58  total_loss: 57.22  loss_cls_b1: 6.263  loss_cls_b2: 6.182  loss_cls_b21: 6.193  loss_cls_b22: 6.212  loss_cls_b3: 6.183  loss_cls_b31: 6.261  loss_cls_b32: 6.194  loss_cls_b33: 6.31  loss_triplet_b1: 1.41  loss_triplet_b2: 1.326  loss_triplet_b3: 1.321  loss_triplet_b22: 1.607  loss_triplet_b33: 1.784  time: 0.9143  data_time: 0.0008  lr: 4.33e-05  max_mem: 72M
[07/09 15:36:10] fastreid.utils.events INFO:  eta: 0:52:00  epoch/iter: 1/117  total_loss: 57.59  loss_cls_b1: 6.262  loss_cls_b2: 6.179  loss_cls_b21: 6.219  loss_cls_b22: 6.22  loss_cls_b3: 6.193  loss_cls_b31: 6.243  loss_cls_b32: 6.212  loss_cls_b33: 6.303  loss_triplet_b1: 1.42  loss_triplet_b2: 1.364  loss_triplet_b3: 1.358  loss_triplet_b22: 1.63  loss_triplet_b33: 1.874  time: 0.9222  data_time: 0.0006  lr: 5.26e-05  max_mem: 72M
[07/09 15:37:05] fastreid.utils.events INFO:  eta: 0:51:27  epoch/iter: 2/176  total_loss: 57.54  loss_cls_b1: 6.258  loss_cls_b2: 6.187  loss_cls_b21: 6.226  loss_cls_b22: 6.214  loss_cls_b3: 6.185  loss_cls_b31: 6.243  loss_cls_b32: 6.221  loss_cls_b33: 6.295  loss_triplet_b1: 1.41  loss_triplet_b2: 1.364  loss_triplet_b3: 1.346  loss_triplet_b22: 1.652  loss_triplet_b33: 1.864  time: 0.9260  data_time: 0.0005  lr: 6.19e-05  max_mem: 72M
[07/09 15:37:26] fastreid.utils.events INFO:  eta: 0:51:19  epoch/iter: 3/199  total_loss: 57.5  loss_cls_b1: 6.238  loss_cls_b2: 6.188  loss_cls_b21: 6.228  loss_cls_b22: 6.227  loss_cls_b3: 6.184  loss_cls_b31: 6.243  loss_cls_b32: 6.227  loss_cls_b33: 6.272  loss_triplet_b1: 1.397  loss_triplet_b2: 1.358  loss_triplet_b3: 1.346  loss_triplet_b22: 1.637  loss_triplet_b33: 1.825  time: 0.9272  data_time: 0.0010  lr: 6.56e-05  max_mem: 72M
[07/09 15:38:00] fastreid.utils.events INFO:  eta: 0:50:49  epoch/iter: 3/235  total_loss: 57.41  loss_cls_b1: 6.257  loss_cls_b2: 6.198  loss_cls_b21: 6.245  loss_cls_b22: 6.227  loss_cls_b3: 6.179  loss_cls_b31: 6.229  loss_cls_b32: 6.232  loss_cls_b33: 6.265  loss_triplet_b1: 1.388  loss_triplet_b2: 1.362  loss_triplet_b3: 1.338  loss_triplet_b22: 1.64  loss_triplet_b33: 1.801  time: 0.9289  data_time: 0.0011  lr: 7.12e-05  max_mem: 72M
[07/09 15:38:55] fastreid.utils.events INFO:  eta: 0:49:57  epoch/iter: 4/294  total_loss: 57.39  loss_cls_b1: 6.228  loss_cls_b2: 6.208  loss_cls_b21: 6.245  loss_cls_b22: 6.223  loss_cls_b3: 6.174  loss_cls_b31: 6.238  loss_cls_b32: 6.22  loss_cls_b33: 6.255  loss_triplet_b1: 1.394  loss_triplet_b2: 1.369  loss_triplet_b3: 1.346  loss_triplet_b22: 1.657  loss_triplet_b33: 1.814  time: 0.9287  data_time: 0.0015  lr: 8.05e-05  max_mem: 72M
[07/09 15:39:49] fastreid.utils.events INFO:  eta: 0:49:02  epoch/iter: 5/353  total_loss: 57.59  loss_cls_b1: 6.256  loss_cls_b2: 6.223  loss_cls_b21: 6.259  loss_cls_b22: 6.201  loss_cls_b3: 6.175  loss_cls_b31: 6.237  loss_cls_b32: 6.228  loss_cls_b33: 6.255  loss_triplet_b1: 1.401  loss_triplet_b2: 1.39  loss_triplet_b3: 1.361  loss_triplet_b22: 1.669  loss_triplet_b33: 1.833  time: 0.9279  data_time: 0.0009  lr: 8.98e-05  max_mem: 72M
[07/09 15:40:32] fastreid.utils.events INFO:  eta: 0:48:19  epoch/iter: 6/399  total_loss: 57.6  loss_cls_b1: 6.249  loss_cls_b2: 6.22  loss_cls_b21: 6.245  loss_cls_b22: 6.201  loss_cls_b3: 6.184  loss_cls_b31: 6.238  loss_cls_b32: 6.225  loss_cls_b33: 6.253  loss_triplet_b1: 1.401  loss_triplet_b2: 1.398  loss_triplet_b3: 1.363  loss_triplet_b22: 1.671  loss_triplet_b33: 1.86  time: 0.9274  data_time: 0.0011  lr: 9.71e-05  max_mem: 72M
[07/09 15:40:44] fastreid.utils.events INFO:  eta: 0:48:08  epoch/iter: 6/412  total_loss: 57.6  loss_cls_b1: 6.236  loss_cls_b2: 6.22  loss_cls_b21: 6.231  loss_cls_b22: 6.204  loss_cls_b3: 6.182  loss_cls_b31: 6.238  loss_cls_b32: 6.227  loss_cls_b33: 6.255  loss_triplet_b1: 1.401  loss_triplet_b2: 1.41  loss_triplet_b3: 1.366  loss_triplet_b22: 1.686  loss_triplet_b33: 1.878  time: 0.9277  data_time: 0.0021  lr: 9.91e-05  max_mem: 72M
[07/09 15:41:39] fastreid.utils.events INFO:  eta: 0:47:12  epoch/iter: 7/471  total_loss: 57.64  loss_cls_b1: 6.247  loss_cls_b2: 6.22  loss_cls_b21: 6.237  loss_cls_b22: 6.212  loss_cls_b3: 6.198  loss_cls_b31: 6.235  loss_cls_b32: 6.221  loss_cls_b33: 6.266  loss_triplet_b1: 1.403  loss_triplet_b2: 1.409  loss_triplet_b3: 1.377  loss_triplet_b22: 1.689  loss_triplet_b33: 1.889  time: 0.9273  data_time: 0.0007  lr: 1.08e-04  max_mem: 72M
[07/09 15:42:33] fastreid.utils.events INFO:  eta: 0:46:16  epoch/iter: 8/530  total_loss: 57.72  loss_cls_b1: 6.241  loss_cls_b2: 6.217  loss_cls_b21: 6.234  loss_cls_b22: 6.215  loss_cls_b3: 6.198  loss_cls_b31: 6.215  loss_cls_b32: 6.209  loss_cls_b33: 6.275  loss_triplet_b1: 1.406  loss_triplet_b2: 1.413  loss_triplet_b3: 1.4  loss_triplet_b22: 1.703  loss_triplet_b33: 1.916  time: 0.9272  data_time: 0.0006  lr: 1.18e-04  max_mem: 72M
[07/09 15:43:28] fastreid.engine.defaults INFO: Prepare testing set
[07/09 15:43:28] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[07/09 15:43:28] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[07/09 15:43:38] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.5514 s / batch. ETA=0:00:14
[07/09 15:43:53] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:18.680026 (0.583751 s / batch per device, on 1 devices)
[07/09 15:43:53] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:18 (0.582087 s / batch per device, on 1 devices)
[07/09 15:43:54] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[07/09 15:43:54] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 59.57    | 74.82    | 81.09     | 28.18 | 3.93   | 43.88    |[0m
[07/09 15:43:54] fastreid.utils.events INFO:  eta: 0:45:21  epoch/iter: 9/589  total_loss: 57.67  loss_cls_b1: 6.237  loss_cls_b2: 6.238  loss_cls_b21: 6.228  loss_cls_b22: 6.221  loss_cls_b3: 6.199  loss_cls_b31: 6.223  loss_cls_b32: 6.208  loss_cls_b33: 6.272  loss_triplet_b1: 1.394  loss_triplet_b2: 1.398  loss_triplet_b3: 1.382  loss_triplet_b22: 1.686  loss_triplet_b33: 1.898  time: 0.9270  data_time: 0.0008  lr: 1.27e-04  max_mem: 252M
[07/09 15:44:03] fastreid.utils.events INFO:  eta: 0:45:11  epoch/iter: 10/599  total_loss: 57.73  loss_cls_b1: 6.239  loss_cls_b2: 6.231  loss_cls_b21: 6.232  loss_cls_b22: 6.221  loss_cls_b3: 6.184  loss_cls_b31: 6.228  loss_cls_b32: 6.207  loss_cls_b33: 6.275  loss_triplet_b1: 1.42  loss_triplet_b2: 1.413  loss_triplet_b3: 1.395  loss_triplet_b22: 1.7  loss_triplet_b33: 1.904  time: 0.9271  data_time: 0.0006  lr: 1.28e-04  max_mem: 252M
[07/09 15:44:49] fastreid.utils.events INFO:  eta: 0:44:27  epoch/iter: 10/648  total_loss: 57.75  loss_cls_b1: 6.232  loss_cls_b2: 6.229  loss_cls_b21: 6.219  loss_cls_b22: 6.239  loss_cls_b3: 6.192  loss_cls_b31: 6.232  loss_cls_b32: 6.213  loss_cls_b33: 6.229  loss_triplet_b1: 1.439  loss_triplet_b2: 1.432  loss_triplet_b3: 1.416  loss_triplet_b22: 1.678  loss_triplet_b33: 1.894  time: 0.9275  data_time: 0.0006  lr: 1.36e-04  max_mem: 252M
[07/09 15:45:43] fastreid.utils.events INFO:  eta: 0:43:31  epoch/iter: 11/707  total_loss: 57.98  loss_cls_b1: 6.227  loss_cls_b2: 6.224  loss_cls_b21: 6.222  loss_cls_b22: 6.236  loss_cls_b3: 6.165  loss_cls_b31: 6.244  loss_cls_b32: 6.208  loss_cls_b33: 6.229  loss_triplet_b1: 1.525  loss_triplet_b2: 1.487  loss_triplet_b3: 1.481  loss_triplet_b22: 1.744  loss_triplet_b33: 1.924  time: 0.9271  data_time: 0.0005  lr: 1.45e-04  max_mem: 252M
[07/09 15:46:38] fastreid.utils.events INFO:  eta: 0:42:37  epoch/iter: 12/766  total_loss: 58.1  loss_cls_b1: 6.244  loss_cls_b2: 6.193  loss_cls_b21: 6.229  loss_cls_b22: 6.255  loss_cls_b3: 6.154  loss_cls_b31: 6.221  loss_cls_b32: 6.197  loss_cls_b33: 6.244  loss_triplet_b1: 1.548  loss_triplet_b2: 1.51  loss_triplet_b3: 1.495  loss_triplet_b22: 1.774  loss_triplet_b33: 1.943  time: 0.9271  data_time: 0.0008  lr: 1.55e-04  max_mem: 252M
[07/09 15:47:09] fastreid.utils.events INFO:  eta: 0:42:07  epoch/iter: 13/799  total_loss: 58.13  loss_cls_b1: 6.224  loss_cls_b2: 6.194  loss_cls_b21: 6.221  loss_cls_b22: 6.248  loss_cls_b3: 6.149  loss_cls_b31: 6.219  loss_cls_b32: 6.196  loss_cls_b33: 6.232  loss_triplet_b1: 1.551  loss_triplet_b2: 1.512  loss_triplet_b3: 1.503  loss_triplet_b22: 1.788  loss_triplet_b33: 1.96  time: 0.9271  data_time: 0.0009  lr: 1.60e-04  max_mem: 252M
[07/09 15:47:33] fastreid.utils.events INFO:  eta: 0:41:42  epoch/iter: 13/825  total_loss: 58.17  loss_cls_b1: 6.241  loss_cls_b2: 6.189  loss_cls_b21: 6.201  loss_cls_b22: 6.244  loss_cls_b3: 6.158  loss_cls_b31: 6.218  loss_cls_b32: 6.193  loss_cls_b33: 6.236  loss_triplet_b1: 1.561  loss_triplet_b2: 1.512  loss_triplet_b3: 1.508  loss_triplet_b22: 1.793  loss_triplet_b33: 1.964  time: 0.9270  data_time: 0.0005  lr: 1.64e-04  max_mem: 252M
[07/09 15:48:27] fastreid.utils.events INFO:  eta: 0:40:47  epoch/iter: 14/884  total_loss: 58  loss_cls_b1: 6.24  loss_cls_b2: 6.186  loss_cls_b21: 6.21  loss_cls_b22: 6.255  loss_cls_b3: 6.18  loss_cls_b31: 6.207  loss_cls_b32: 6.189  loss_cls_b33: 6.246  loss_triplet_b1: 1.553  loss_triplet_b2: 1.499  loss_triplet_b3: 1.493  loss_triplet_b22: 1.759  loss_triplet_b33: 1.949  time: 0.9268  data_time: 0.0006  lr: 1.73e-04  max_mem: 252M
[07/09 15:49:22] fastreid.utils.events INFO:  eta: 0:39:53  epoch/iter: 15/943  total_loss: 58.35  loss_cls_b1: 6.244  loss_cls_b2: 6.199  loss_cls_b21: 6.219  loss_cls_b22: 6.234  loss_cls_b3: 6.2  loss_cls_b31: 6.208  loss_cls_b32: 6.199  loss_cls_b33: 6.244  loss_triplet_b1: 1.608  loss_triplet_b2: 1.548  loss_triplet_b3: 1.527  loss_triplet_b22: 1.828  loss_triplet_b33: 1.989  time: 0.9267  data_time: 0.0008  lr: 1.83e-04  max_mem: 252M
[07/09 15:50:13] fastreid.utils.events INFO:  eta: 0:39:01  epoch/iter: 16/999  total_loss: 58.08  loss_cls_b1: 6.244  loss_cls_b2: 6.187  loss_cls_b21: 6.214  loss_cls_b22: 6.229  loss_cls_b3: 6.211  loss_cls_b31: 6.211  loss_cls_b32: 6.203  loss_cls_b33: 6.239  loss_triplet_b1: 1.576  loss_triplet_b2: 1.52  loss_triplet_b3: 1.519  loss_triplet_b22: 1.794  loss_triplet_b33: 1.97  time: 0.9264  data_time: 0.0006  lr: 1.91e-04  max_mem: 252M
[07/09 15:50:13] fastreid.engine.hooks INFO: Open layer group "backbone, b1, b2, b3" training
[07/09 15:50:16] fastreid.utils.events INFO:  eta: 0:38:58  epoch/iter: 16/1002  total_loss: 58.15  loss_cls_b1: 6.242  loss_cls_b2: 6.186  loss_cls_b21: 6.217  loss_cls_b22: 6.229  loss_cls_b3: 6.209  loss_cls_b31: 6.208  loss_cls_b32: 6.204  loss_cls_b33: 6.239  loss_triplet_b1: 1.583  loss_triplet_b2: 1.536  loss_triplet_b3: 1.523  loss_triplet_b22: 1.801  loss_triplet_b33: 1.976  time: 0.9264  data_time: 0.0006  lr: 1.92e-04  max_mem: 252M
[07/09 15:51:12] fastreid.utils.events INFO:  eta: 0:38:09  epoch/iter: 17/1061  total_loss: 57.4  loss_cls_b1: 6.181  loss_cls_b2: 6.16  loss_cls_b21: 6.207  loss_cls_b22: 6.186  loss_cls_b3: 6.169  loss_cls_b31: 6.18  loss_cls_b32: 6.184  loss_cls_b33: 6.209  loss_triplet_b1: 1.431  loss_triplet_b2: 1.391  loss_triplet_b3: 1.413  loss_triplet_b22: 1.634  loss_triplet_b33: 1.822  time: 0.9271  data_time: 0.0008  lr: 2.01e-04  max_mem: 252M
[07/09 15:52:07] fastreid.utils.events INFO:  eta: 0:37:16  epoch/iter: 18/1120  total_loss: 54.28  loss_cls_b1: 6.117  loss_cls_b2: 6.099  loss_cls_b21: 6.095  loss_cls_b22: 6.116  loss_cls_b3: 6.085  loss_cls_b31: 6.1  loss_cls_b32: 6.108  loss_cls_b33: 6.145  loss_triplet_b1: 1.043  loss_triplet_b2: 0.9389  loss_triplet_b3: 0.9322  loss_triplet_b22: 1.015  loss_triplet_b33: 1.067  time: 0.9277  data_time: 0.0008  lr: 2.10e-04  max_mem: 252M
[07/09 15:53:02] fastreid.engine.defaults INFO: Prepare testing set
[07/09 15:53:02] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[07/09 15:53:02] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[07/09 15:53:10] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.5725 s / batch. ETA=0:00:14
[07/09 15:53:24] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:17.157517 (0.536172 s / batch per device, on 1 devices)
[07/09 15:53:24] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:17 (0.534859 s / batch per device, on 1 devices)
[07/09 15:53:24] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[07/09 15:53:24] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 81.32    | 91.96    | 93.97     | 58.67 | 19.20  | 69.99    |[0m
[07/09 15:53:25] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[07/09 15:53:27] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_0019.pth
[07/09 15:53:29] fastreid.utils.events INFO:  eta: 0:36:24  epoch/iter: 19/1179  total_loss: 49.52  loss_cls_b1: 5.613  loss_cls_b2: 5.623  loss_cls_b21: 5.596  loss_cls_b22: 5.663  loss_cls_b3: 5.741  loss_cls_b31: 5.641  loss_cls_b32: 5.66  loss_cls_b33: 5.668  loss_triplet_b1: 0.7084  loss_triplet_b2: 0.6868  loss_triplet_b3: 0.6838  loss_triplet_b22: 0.7364  loss_triplet_b33: 0.7881  time: 0.9282  data_time: 0.0007  lr: 2.20e-04  max_mem: 252M
[07/09 15:53:49] fastreid.utils.events INFO:  eta: 0:36:05  epoch/iter: 20/1199  total_loss: 47.13  loss_cls_b1: 5.33  loss_cls_b2: 5.451  loss_cls_b21: 5.331  loss_cls_b22: 5.476  loss_cls_b3: 5.51  loss_cls_b31: 5.398  loss_cls_b32: 5.454  loss_cls_b33: 5.55  loss_triplet_b1: 0.6595  loss_triplet_b2: 0.6327  loss_triplet_b3: 0.6532  loss_triplet_b22: 0.6847  loss_triplet_b33: 0.7304  time: 0.9297  data_time: 0.0018  lr: 2.23e-04  max_mem: 252M
[07/09 15:54:26] fastreid.utils.events INFO:  eta: 0:35:31  epoch/iter: 20/1238  total_loss: 42.77  loss_cls_b1: 4.83  loss_cls_b2: 4.941  loss_cls_b21: 4.816  loss_cls_b22: 5.049  loss_cls_b3: 4.966  loss_cls_b31: 4.956  loss_cls_b32: 4.97  loss_cls_b33: 5.109  loss_triplet_b1: 0.5875  loss_triplet_b2: 0.5693  loss_triplet_b3: 0.5736  loss_triplet_b22: 0.5958  loss_triplet_b33: 0.6343  time: 0.9303  data_time: 0.0006  lr: 2.29e-04  max_mem: 252M
[07/09 15:55:22] fastreid.utils.events INFO:  eta: 0:34:40  epoch/iter: 21/1297  total_loss: 36.35  loss_cls_b1: 3.998  loss_cls_b2: 4.239  loss_cls_b21: 4.092  loss_cls_b22: 4.393  loss_cls_b3: 4.303  loss_cls_b31: 4.165  loss_cls_b32: 4.302  loss_cls_b33: 4.453  loss_triplet_b1: 0.4636  loss_triplet_b2: 0.4451  loss_triplet_b3: 0.4431  loss_triplet_b22: 0.4829  loss_triplet_b33: 0.521  time: 0.9311  data_time: 0.0008  lr: 2.38e-04  max_mem: 252M
[07/09 15:56:18] fastreid.utils.events INFO:  eta: 0:33:48  epoch/iter: 22/1356  total_loss: 33.43  loss_cls_b1: 3.761  loss_cls_b2: 3.836  loss_cls_b21: 3.771  loss_cls_b22: 4.027  loss_cls_b3: 3.923  loss_cls_b31: 3.881  loss_cls_b32: 3.973  loss_cls_b33: 4.107  loss_triplet_b1: 0.3905  loss_triplet_b2: 0.3849  loss_triplet_b3: 0.3905  loss_triplet_b22: 0.4127  loss_triplet_b33: 0.4482  time: 0.9318  data_time: 0.0008  lr: 2.48e-04  max_mem: 252M
[07/09 15:56:58] fastreid.utils.events INFO:  eta: 0:33:09  epoch/iter: 23/1399  total_loss: 30.76  loss_cls_b1: 3.305  loss_cls_b2: 3.505  loss_cls_b21: 3.426  loss_cls_b22: 3.721  loss_cls_b3: 3.53  loss_cls_b31: 3.533  loss_cls_b32: 3.654  loss_cls_b33: 3.806  loss_triplet_b1: 0.3529  loss_triplet_b2: 0.3527  loss_triplet_b3: 0.3643  loss_triplet_b22: 0.3775  loss_triplet_b33: 0.402  time: 0.9320  data_time: 0.0005  lr: 2.54e-04  max_mem: 252M
[07/09 15:57:14] fastreid.utils.events INFO:  eta: 0:32:55  epoch/iter: 23/1415  total_loss: 29.9  loss_cls_b1: 3.2  loss_cls_b2: 3.36  loss_cls_b21: 3.32  loss_cls_b22: 3.597  loss_cls_b3: 3.412  loss_cls_b31: 3.444  loss_cls_b32: 3.552  loss_cls_b33: 3.718  loss_triplet_b1: 0.3475  loss_triplet_b2: 0.3407  loss_triplet_b3: 0.3546  loss_triplet_b22: 0.3707  loss_triplet_b33: 0.3952  time: 0.9323  data_time: 0.0005  lr: 2.57e-04  max_mem: 252M
[07/09 15:58:10] fastreid.utils.events INFO:  eta: 0:32:04  epoch/iter: 24/1474  total_loss: 24.94  loss_cls_b1: 2.685  loss_cls_b2: 2.831  loss_cls_b21: 2.891  loss_cls_b22: 3.128  loss_cls_b3: 2.919  loss_cls_b31: 2.934  loss_cls_b32: 3.044  loss_cls_b33: 3.37  loss_triplet_b1: 0.2978  loss_triplet_b2: 0.2834  loss_triplet_b3: 0.2978  loss_triplet_b22: 0.3051  loss_triplet_b33: 0.3244  time: 0.9329  data_time: 0.0007  lr: 2.66e-04  max_mem: 252M
[07/09 15:59:06] fastreid.utils.events INFO:  eta: 0:31:12  epoch/iter: 25/1533  total_loss: 23.09  loss_cls_b1: 2.484  loss_cls_b2: 2.614  loss_cls_b21: 2.649  loss_cls_b22: 2.934  loss_cls_b3: 2.646  loss_cls_b31: 2.78  loss_cls_b32: 2.849  loss_cls_b33: 3.129  loss_triplet_b1: 0.247  loss_triplet_b2: 0.2628  loss_triplet_b3: 0.2504  loss_triplet_b22: 0.2571  loss_triplet_b33: 0.2673  time: 0.9337  data_time: 0.0007  lr: 2.76e-04  max_mem: 252M
[07/09 16:00:02] fastreid.utils.events INFO:  eta: 0:30:20  epoch/iter: 26/1592  total_loss: 21.79  loss_cls_b1: 2.285  loss_cls_b2: 2.395  loss_cls_b21: 2.448  loss_cls_b22: 2.74  loss_cls_b3: 2.447  loss_cls_b31: 2.576  loss_cls_b32: 2.656  loss_cls_b33: 2.95  loss_triplet_b1: 0.2264  loss_triplet_b2: 0.2459  loss_triplet_b3: 0.2344  loss_triplet_b22: 0.2347  loss_triplet_b33: 0.2483  time: 0.9342  data_time: 0.0005  lr: 2.85e-04  max_mem: 252M
[07/09 16:00:09] fastreid.utils.events INFO:  eta: 0:30:14  epoch/iter: 27/1599  total_loss: 21.64  loss_cls_b1: 2.261  loss_cls_b2: 2.35  loss_cls_b21: 2.43  loss_cls_b22: 2.717  loss_cls_b3: 2.418  loss_cls_b31: 2.547  loss_cls_b32: 2.619  loss_cls_b33: 2.925  loss_triplet_b1: 0.2232  loss_triplet_b2: 0.244  loss_triplet_b3: 0.2337  loss_triplet_b22: 0.2311  loss_triplet_b33: 0.2265  time: 0.9343  data_time: 0.0005  lr: 2.86e-04  max_mem: 252M
[07/09 16:00:58] fastreid.utils.events INFO:  eta: 0:29:27  epoch/iter: 27/1651  total_loss: 19.82  loss_cls_b1: 2.054  loss_cls_b2: 2.165  loss_cls_b21: 2.258  loss_cls_b22: 2.521  loss_cls_b3: 2.197  loss_cls_b31: 2.362  loss_cls_b32: 2.404  loss_cls_b33: 2.749  loss_triplet_b1: 0.1932  loss_triplet_b2: 0.2044  loss_triplet_b3: 0.2131  loss_triplet_b22: 0.188  loss_triplet_b33: 0.2117  time: 0.9347  data_time: 0.0004  lr: 2.94e-04  max_mem: 252M
[07/09 16:01:54] fastreid.utils.events INFO:  eta: 0:28:34  epoch/iter: 28/1710  total_loss: 18.95  loss_cls_b1: 1.917  loss_cls_b2: 2.055  loss_cls_b21: 2.144  loss_cls_b22: 2.422  loss_cls_b3: 2.108  loss_cls_b31: 2.266  loss_cls_b32: 2.345  loss_cls_b33: 2.696  loss_triplet_b1: 0.1888  loss_triplet_b2: 0.1829  loss_triplet_b3: 0.1883  loss_triplet_b22: 0.1836  loss_triplet_b33: 0.2046  time: 0.9352  data_time: 0.0007  lr: 3.03e-04  max_mem: 252M
[07/09 16:02:50] fastreid.engine.defaults INFO: Prepare testing set
[07/09 16:02:50] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[07/09 16:02:50] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[07/09 16:02:58] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.5644 s / batch. ETA=0:00:14
[07/09 16:03:12] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:17.131161 (0.535349 s / batch per device, on 1 devices)
[07/09 16:03:12] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:17 (0.533149 s / batch per device, on 1 devices)
[07/09 16:03:12] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[07/09 16:03:12] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 87.47    | 95.98    | 97.64     | 75.69 | 40.86  | 81.58    |[0m
[07/09 16:03:12] fastreid.utils.events INFO:  eta: 0:27:42  epoch/iter: 29/1769  total_loss: 17.42  loss_cls_b1: 1.768  loss_cls_b2: 1.856  loss_cls_b21: 1.955  loss_cls_b22: 2.268  loss_cls_b3: 1.898  loss_cls_b31: 2.143  loss_cls_b32: 2.2  loss_cls_b33: 2.544  loss_triplet_b1: 0.1712  loss_triplet_b2: 0.166  loss_triplet_b3: 0.1763  loss_triplet_b22: 0.1705  loss_triplet_b33: 0.1726  time: 0.9358  data_time: 0.0004  lr: 3.13e-04  max_mem: 252M
[07/09 16:03:41] fastreid.utils.events INFO:  eta: 0:27:15  epoch/iter: 30/1799  total_loss: 17.07  loss_cls_b1: 1.702  loss_cls_b2: 1.802  loss_cls_b21: 1.933  loss_cls_b22: 2.189  loss_cls_b3: 1.846  loss_cls_b31: 2.073  loss_cls_b32: 2.134  loss_cls_b33: 2.43  loss_triplet_b1: 0.1642  loss_triplet_b2: 0.1575  loss_triplet_b3: 0.1719  loss_triplet_b22: 0.1667  loss_triplet_b33: 0.1712  time: 0.9361  data_time: 0.0006  lr: 3.17e-04  max_mem: 252M
[07/09 16:04:09] fastreid.utils.events INFO:  eta: 0:26:49  epoch/iter: 30/1828  total_loss: 16.11  loss_cls_b1: 1.598  loss_cls_b2: 1.731  loss_cls_b21: 1.855  loss_cls_b22: 2.116  loss_cls_b3: 1.748  loss_cls_b31: 1.963  loss_cls_b32: 2.023  loss_cls_b33: 2.333  loss_triplet_b1: 0.1402  loss_triplet_b2: 0.1353  loss_triplet_b3: 0.1536  loss_triplet_b22: 0.1507  loss_triplet_b33: 0.1397  time: 0.9365  data_time: 0.0005  lr: 3.22e-04  max_mem: 252M
[07/09 16:05:05] fastreid.utils.events INFO:  eta: 0:25:55  epoch/iter: 31/1887  total_loss: 15.95  loss_cls_b1: 1.563  loss_cls_b2: 1.687  loss_cls_b21: 1.826  loss_cls_b22: 2.081  loss_cls_b3: 1.709  loss_cls_b31: 1.916  loss_cls_b32: 2  loss_cls_b33: 2.301  loss_triplet_b1: 0.1181  loss_triplet_b2: 0.123  loss_triplet_b3: 0.1332  loss_triplet_b22: 0.138  loss_triplet_b33: 0.1254  time: 0.9369  data_time: 0.0008  lr: 3.31e-04  max_mem: 252M
[07/09 16:06:01] fastreid.utils.events INFO:  eta: 0:25:02  epoch/iter: 32/1946  total_loss: 14.37  loss_cls_b1: 1.453  loss_cls_b2: 1.531  loss_cls_b21: 1.657  loss_cls_b22: 1.927  loss_cls_b3: 1.565  loss_cls_b31: 1.754  loss_cls_b32: 1.842  loss_cls_b33: 2.171  loss_triplet_b1: 0.1041  loss_triplet_b2: 0.1003  loss_triplet_b3: 0.1085  loss_triplet_b22: 0.1092  loss_triplet_b33: 0.1173  time: 0.9373  data_time: 0.0006  lr: 3.41e-04  max_mem: 252M
[07/09 16:06:51] fastreid.utils.events INFO:  eta: 0:24:13  epoch/iter: 33/1999  total_loss: 13.8  loss_cls_b1: 1.36  loss_cls_b2: 1.398  loss_cls_b21: 1.561  loss_cls_b22: 1.839  loss_cls_b3: 1.497  loss_cls_b31: 1.634  loss_cls_b32: 1.785  loss_cls_b33: 2.085  loss_triplet_b1: 0.08788  loss_triplet_b2: 0.08359  loss_triplet_b3: 0.1008  loss_triplet_b22: 0.08071  loss_triplet_b33: 0.09512  time: 0.9375  data_time: 0.0006  lr: 3.49e-04  max_mem: 252M
[07/09 16:06:57] fastreid.utils.events INFO:  eta: 0:24:07  epoch/iter: 33/2005  total_loss: 14.02  loss_cls_b1: 1.366  loss_cls_b2: 1.415  loss_cls_b21: 1.578  loss_cls_b22: 1.875  loss_cls_b3: 1.502  loss_cls_b31: 1.64  loss_cls_b32: 1.799  loss_cls_b33: 2.103  loss_triplet_b1: 0.09138  loss_triplet_b2: 0.08934  loss_triplet_b3: 0.104  loss_triplet_b22: 0.08394  loss_triplet_b33: 0.1002  time: 0.9375  data_time: 0.0006  lr: 3.49e-04  max_mem: 252M
[07/09 16:07:52] fastreid.utils.events INFO:  eta: 0:23:12  epoch/iter: 34/2064  total_loss: 13.38  loss_cls_b1: 1.297  loss_cls_b2: 1.344  loss_cls_b21: 1.488  loss_cls_b22: 1.809  loss_cls_b3: 1.381  loss_cls_b31: 1.583  loss_cls_b32: 1.705  loss_cls_b33: 2.043  loss_triplet_b1: 0.08814  loss_triplet_b2: 0.0819  loss_triplet_b3: 0.09556  loss_triplet_b22: 0.07585  loss_triplet_b33: 0.07872  time: 0.9376  data_time: 0.0005  lr: 3.48e-04  max_mem: 252M
[07/09 16:08:48] fastreid.utils.events INFO:  eta: 0:22:17  epoch/iter: 35/2123  total_loss: 12.72  loss_cls_b1: 1.269  loss_cls_b2: 1.282  loss_cls_b21: 1.439  loss_cls_b22: 1.783  loss_cls_b3: 1.324  loss_cls_b31: 1.536  loss_cls_b32: 1.691  loss_cls_b33: 1.968  loss_triplet_b1: 0.08358  loss_triplet_b2: 0.0796  loss_triplet_b3: 0.09307  loss_triplet_b22: 0.0718  loss_triplet_b33: 0.07749  time: 0.9377  data_time: 0.0005  lr: 3.44e-04  max_mem: 252M
[07/09 16:09:44] fastreid.utils.events INFO:  eta: 0:21:21  epoch/iter: 36/2182  total_loss: 12.1  loss_cls_b1: 1.15  loss_cls_b2: 1.185  loss_cls_b21: 1.302  loss_cls_b22: 1.649  loss_cls_b3: 1.245  loss_cls_b31: 1.443  loss_cls_b32: 1.586  loss_cls_b33: 1.875  loss_triplet_b1: 0.06765  loss_triplet_b2: 0.06134  loss_triplet_b3: 0.07178  loss_triplet_b22: 0.0631  loss_triplet_b33: 0.05959  time: 0.9379  data_time: 0.0008  lr: 3.38e-04  max_mem: 252M
[07/09 16:10:00] fastreid.utils.events INFO:  eta: 0:21:05  epoch/iter: 37/2199  total_loss: 11.71  loss_cls_b1: 1.132  loss_cls_b2: 1.162  loss_cls_b21: 1.282  loss_cls_b22: 1.609  loss_cls_b3: 1.212  loss_cls_b31: 1.417  loss_cls_b32: 1.549  loss_cls_b33: 1.839  loss_triplet_b1: 0.06266  loss_triplet_b2: 0.05399  loss_triplet_b3: 0.07077  loss_triplet_b22: 0.06099  loss_triplet_b33: 0.0575  time: 0.9380  data_time: 0.0008  lr: 3.29e-04  max_mem: 252M
[07/09 16:10:39] fastreid.utils.events INFO:  eta: 0:20:25  epoch/iter: 37/2241  total_loss: 11  loss_cls_b1: 1.042  loss_cls_b2: 1.116  loss_cls_b21: 1.212  loss_cls_b22: 1.527  loss_cls_b3: 1.132  loss_cls_b31: 1.316  loss_cls_b32: 1.462  loss_cls_b33: 1.74  loss_triplet_b1: 0.05767  loss_triplet_b2: 0.05173  loss_triplet_b3: 0.06522  loss_triplet_b22: 0.05196  loss_triplet_b33: 0.05138  time: 0.9380  data_time: 0.0007  lr: 3.29e-04  max_mem: 252M
[07/09 16:11:35] fastreid.utils.events INFO:  eta: 0:19:29  epoch/iter: 38/2300  total_loss: 10.4  loss_cls_b1: 0.9837  loss_cls_b2: 1.056  loss_cls_b21: 1.154  loss_cls_b22: 1.494  loss_cls_b3: 1.062  loss_cls_b31: 1.255  loss_cls_b32: 1.379  loss_cls_b33: 1.693  loss_triplet_b1: 0.05546  loss_triplet_b2: 0.05141  loss_triplet_b3: 0.059  loss_triplet_b22: 0.04946  loss_triplet_b33: 0.054  time: 0.9381  data_time: 0.0007  lr: 3.18e-04  max_mem: 252M
[07/09 16:12:30] fastreid.engine.defaults INFO: Prepare testing set
[07/09 16:12:30] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[07/09 16:12:30] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[07/09 16:12:38] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.5520 s / batch. ETA=0:00:14
[07/09 16:12:52] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:16.898974 (0.528093 s / batch per device, on 1 devices)
[07/09 16:12:52] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:16 (0.526714 s / batch per device, on 1 devices)
[07/09 16:12:52] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[07/09 16:12:52] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 90.66    | 96.93    | 98.23     | 82.45 | 53.35  | 86.56    |[0m
[07/09 16:12:53] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[07/09 16:12:57] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_0039.pth
[07/09 16:13:00] fastreid.utils.events INFO:  eta: 0:18:33  epoch/iter: 39/2359  total_loss: 9.991  loss_cls_b1: 0.925  loss_cls_b2: 0.9794  loss_cls_b21: 1.092  loss_cls_b22: 1.412  loss_cls_b3: 0.9857  loss_cls_b31: 1.158  loss_cls_b32: 1.343  loss_cls_b33: 1.634  loss_triplet_b1: 0.04602  loss_triplet_b2: 0.04948  loss_triplet_b3: 0.05252  loss_triplet_b22: 0.04199  loss_triplet_b33: 0.04279  time: 0.9382  data_time: 0.0005  lr: 3.05e-04  max_mem: 252M
[07/09 16:13:39] fastreid.utils.events INFO:  eta: 0:17:55  epoch/iter: 40/2399  total_loss: 9.603  loss_cls_b1: 0.9241  loss_cls_b2: 0.9539  loss_cls_b21: 1.076  loss_cls_b22: 1.377  loss_cls_b3: 0.975  loss_cls_b31: 1.147  loss_cls_b32: 1.327  loss_cls_b33: 1.603  loss_triplet_b1: 0.04368  loss_triplet_b2: 0.04483  loss_triplet_b3: 0.04988  loss_triplet_b22: 0.03233  loss_triplet_b33: 0.03853  time: 0.9388  data_time: 0.0006  lr: 2.90e-04  max_mem: 252M
[07/09 16:13:56] fastreid.utils.events INFO:  eta: 0:17:37  epoch/iter: 40/2418  total_loss: 9.011  loss_cls_b1: 0.8701  loss_cls_b2: 0.8958  loss_cls_b21: 1.012  loss_cls_b22: 1.3  loss_cls_b3: 0.9271  loss_cls_b31: 1.073  loss_cls_b32: 1.28  loss_cls_b33: 1.539  loss_triplet_b1: 0.03821  loss_triplet_b2: 0.03678  loss_triplet_b3: 0.04322  loss_triplet_b22: 0.02915  loss_triplet_b33: 0.02965  time: 0.9388  data_time: 0.0004  lr: 2.90e-04  max_mem: 252M
[07/09 16:14:52] fastreid.utils.events INFO:  eta: 0:16:41  epoch/iter: 41/2477  total_loss: 8.73  loss_cls_b1: 0.8131  loss_cls_b2: 0.8376  loss_cls_b21: 0.989  loss_cls_b22: 1.223  loss_cls_b3: 0.8605  loss_cls_b31: 1.058  loss_cls_b32: 1.241  loss_cls_b33: 1.451  loss_triplet_b1: 0.03027  loss_triplet_b2: 0.03326  loss_triplet_b3: 0.03494  loss_triplet_b22: 0.02468  loss_triplet_b33: 0.02517  time: 0.9389  data_time: 0.0007  lr: 2.74e-04  max_mem: 252M
[07/09 16:15:48] fastreid.utils.events INFO:  eta: 0:15:45  epoch/iter: 42/2536  total_loss: 8.266  loss_cls_b1: 0.7492  loss_cls_b2: 0.7837  loss_cls_b21: 0.8978  loss_cls_b22: 1.161  loss_cls_b3: 0.8068  loss_cls_b31: 1.027  loss_cls_b32: 1.161  loss_cls_b33: 1.373  loss_triplet_b1: 0.02665  loss_triplet_b2: 0.02996  loss_triplet_b3: 0.03216  loss_triplet_b22: 0.01937  loss_triplet_b33: 0.01994  time: 0.9390  data_time: 0.0004  lr: 2.56e-04  max_mem: 252M
[07/09 16:16:43] fastreid.utils.events INFO:  eta: 0:14:48  epoch/iter: 43/2595  total_loss: 7.359  loss_cls_b1: 0.6714  loss_cls_b2: 0.6888  loss_cls_b21: 0.841  loss_cls_b22: 1.066  loss_cls_b3: 0.721  loss_cls_b31: 0.9185  loss_cls_b32: 1.07  loss_cls_b33: 1.294  loss_triplet_b1: 0.02223  loss_triplet_b2: 0.02297  loss_triplet_b3: 0.02638  loss_triplet_b22: 0.01507  loss_triplet_b33: 0.01717  time: 0.9389  data_time: 0.0005  lr: 2.37e-04  max_mem: 252M
[07/09 16:16:47] fastreid.utils.events INFO:  eta: 0:14:45  epoch/iter: 44/2599  total_loss: 7.336  loss_cls_b1: 0.6583  loss_cls_b2: 0.6822  loss_cls_b21: 0.8387  loss_cls_b22: 1.062  loss_cls_b3: 0.7125  loss_cls_b31: 0.9185  loss_cls_b32: 1.067  loss_cls_b33: 1.275  loss_triplet_b1: 0.02181  loss_triplet_b2: 0.02152  loss_triplet_b3: 0.0262  loss_triplet_b22: 0.01474  loss_triplet_b33: 0.0164  time: 0.9389  data_time: 0.0005  lr: 2.17e-04  max_mem: 252M
[07/09 16:17:39] fastreid.utils.events INFO:  eta: 0:13:52  epoch/iter: 44/2654  total_loss: 7.204  loss_cls_b1: 0.612  loss_cls_b2: 0.6698  loss_cls_b21: 0.7923  loss_cls_b22: 1.026  loss_cls_b3: 0.7015  loss_cls_b31: 0.8887  loss_cls_b32: 1.037  loss_cls_b33: 1.237  loss_triplet_b1: 0.02041  loss_triplet_b2: 0.01938  loss_triplet_b3: 0.02404  loss_triplet_b22: 0.01324  loss_triplet_b33: 0.01454  time: 0.9389  data_time: 0.0007  lr: 2.17e-04  max_mem: 252M
[07/09 16:18:34] fastreid.utils.events INFO:  eta: 0:12:56  epoch/iter: 45/2713  total_loss: 6.806  loss_cls_b1: 0.5707  loss_cls_b2: 0.6048  loss_cls_b21: 0.749  loss_cls_b22: 0.9586  loss_cls_b3: 0.651  loss_cls_b31: 0.8392  loss_cls_b32: 0.9603  loss_cls_b33: 1.146  loss_triplet_b1: 0.01712  loss_triplet_b2: 0.016  loss_triplet_b3: 0.02034  loss_triplet_b22: 0.01061  loss_triplet_b33: 0.01058  time: 0.9390  data_time: 0.0005  lr: 1.96e-04  max_mem: 252M
[07/09 16:19:29] fastreid.utils.events INFO:  eta: 0:12:00  epoch/iter: 46/2772  total_loss: 5.83  loss_cls_b1: 0.5129  loss_cls_b2: 0.5341  loss_cls_b21: 0.6713  loss_cls_b22: 0.8536  loss_cls_b3: 0.5568  loss_cls_b31: 0.7249  loss_cls_b32: 0.8816  loss_cls_b33: 1.032  loss_triplet_b1: 0.0124  loss_triplet_b2: 0.01279  loss_triplet_b3: 0.01429  loss_triplet_b22: 0.00832  loss_triplet_b33: 0.007228  time: 0.9390  data_time: 0.0005  lr: 1.75e-04  max_mem: 252M
[07/09 16:19:55] fastreid.utils.events INFO:  eta: 0:11:35  epoch/iter: 47/2799  total_loss: 5.822  loss_cls_b1: 0.5142  loss_cls_b2: 0.5366  loss_cls_b21: 0.6792  loss_cls_b22: 0.8597  loss_cls_b3: 0.5707  loss_cls_b31: 0.7324  loss_cls_b32: 0.8823  loss_cls_b33: 1.034  loss_triplet_b1: 0.01218  loss_triplet_b2: 0.0143  loss_triplet_b3: 0.0148  loss_triplet_b22: 0.009221  loss_triplet_b33: 0.007228  time: 0.9391  data_time: 0.0005  lr: 1.54e-04  max_mem: 252M
[07/09 16:20:25] fastreid.utils.events INFO:  eta: 0:11:04  epoch/iter: 47/2831  total_loss: 5.756  loss_cls_b1: 0.5105  loss_cls_b2: 0.5319  loss_cls_b21: 0.6592  loss_cls_b22: 0.8415  loss_cls_b3: 0.5569  loss_cls_b31: 0.7224  loss_cls_b32: 0.875  loss_cls_b33: 1.03  loss_triplet_b1: 0.0118  loss_triplet_b2: 0.01346  loss_triplet_b3: 0.01463  loss_triplet_b22: 0.008047  loss_triplet_b33: 0.007228  time: 0.9391  data_time: 0.0006  lr: 1.54e-04  max_mem: 252M
[07/09 16:21:21] fastreid.utils.events INFO:  eta: 0:10:09  epoch/iter: 48/2890  total_loss: 5.489  loss_cls_b1: 0.4757  loss_cls_b2: 0.5006  loss_cls_b21: 0.6078  loss_cls_b22: 0.778  loss_cls_b3: 0.5208  loss_cls_b31: 0.6808  loss_cls_b32: 0.8416  loss_cls_b33: 0.9886  loss_triplet_b1: 0.009496  loss_triplet_b2: 0.01139  loss_triplet_b3: 0.01068  loss_triplet_b22: 0.007476  loss_triplet_b33: 0.006464  time: 0.9392  data_time: 0.0004  lr: 1.33e-04  max_mem: 252M
[07/09 16:22:17] fastreid.engine.defaults INFO: Prepare testing set
[07/09 16:22:17] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[07/09 16:22:17] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[07/09 16:22:25] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.5587 s / batch. ETA=0:00:14
[07/09 16:22:38] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:16.860437 (0.526889 s / batch per device, on 1 devices)
[07/09 16:22:38] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:16 (0.524743 s / batch per device, on 1 devices)
[07/09 16:22:38] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[07/09 16:22:38] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 91.73    | 97.52    | 98.58     | 86.24 | 61.63  | 88.98    |[0m
[07/09 16:22:39] fastreid.utils.events INFO:  eta: 0:09:13  epoch/iter: 49/2949  total_loss: 5.098  loss_cls_b1: 0.4406  loss_cls_b2: 0.4592  loss_cls_b21: 0.5645  loss_cls_b22: 0.7487  loss_cls_b3: 0.4944  loss_cls_b31: 0.6418  loss_cls_b32: 0.7501  loss_cls_b33: 0.9207  loss_triplet_b1: 0.008347  loss_triplet_b2: 0.008939  loss_triplet_b3: 0.009237  loss_triplet_b22: 0.005347  loss_triplet_b33: 0.0054  time: 0.9393  data_time: 0.0004  lr: 1.13e-04  max_mem: 252M
[07/09 16:23:26] fastreid.utils.events INFO:  eta: 0:08:26  epoch/iter: 50/2999  total_loss: 4.889  loss_cls_b1: 0.4181  loss_cls_b2: 0.4457  loss_cls_b21: 0.5379  loss_cls_b22: 0.7027  loss_cls_b3: 0.4612  loss_cls_b31: 0.6327  loss_cls_b32: 0.7256  loss_cls_b33: 0.8502  loss_triplet_b1: 0.008309  loss_triplet_b2: 0.007958  loss_triplet_b3: 0.009671  loss_triplet_b22: 0.005251  loss_triplet_b33: 0.005462  time: 0.9393  data_time: 0.0007  lr: 9.39e-05  max_mem: 252M
[07/09 16:23:34] fastreid.utils.events INFO:  eta: 0:08:17  epoch/iter: 50/3008  total_loss: 4.871  loss_cls_b1: 0.4141  loss_cls_b2: 0.442  loss_cls_b21: 0.534  loss_cls_b22: 0.7027  loss_cls_b3: 0.4563  loss_cls_b31: 0.6157  loss_cls_b32: 0.7199  loss_cls_b33: 0.8419  loss_triplet_b1: 0.007899  loss_triplet_b2: 0.007413  loss_triplet_b3: 0.009521  loss_triplet_b22: 0.005068  loss_triplet_b33: 0.005312  time: 0.9393  data_time: 0.0007  lr: 9.39e-05  max_mem: 252M
[07/09 16:24:30] fastreid.utils.events INFO:  eta: 0:07:22  epoch/iter: 51/3067  total_loss: 4.589  loss_cls_b1: 0.3748  loss_cls_b2: 0.3941  loss_cls_b21: 0.5051  loss_cls_b22: 0.6606  loss_cls_b3: 0.4349  loss_cls_b31: 0.5906  loss_cls_b32: 0.6867  loss_cls_b33: 0.7906  loss_triplet_b1: 0.006444  loss_triplet_b2: 0.005961  loss_triplet_b3: 0.008291  loss_triplet_b22: 0.00414  loss_triplet_b33: 0.003984  time: 0.9394  data_time: 0.0004  lr: 7.59e-05  max_mem: 252M
[07/09 16:25:25] fastreid.utils.events INFO:  eta: 0:06:27  epoch/iter: 52/3126  total_loss: 4.281  loss_cls_b1: 0.3447  loss_cls_b2: 0.3787  loss_cls_b21: 0.4913  loss_cls_b22: 0.6372  loss_cls_b3: 0.4053  loss_cls_b31: 0.5642  loss_cls_b32: 0.648  loss_cls_b33: 0.7681  loss_triplet_b1: 0.0046  loss_triplet_b2: 0.005475  loss_triplet_b3: 0.006823  loss_triplet_b22: 0.003041  loss_triplet_b33: 0.002616  time: 0.9394  data_time: 0.0004  lr: 5.94e-05  max_mem: 252M
[07/09 16:26:21] fastreid.utils.events INFO:  eta: 0:05:31  epoch/iter: 53/3185  total_loss: 4.123  loss_cls_b1: 0.3299  loss_cls_b2: 0.3622  loss_cls_b21: 0.4664  loss_cls_b22: 0.5969  loss_cls_b3: 0.3929  loss_cls_b31: 0.5453  loss_cls_b32: 0.6289  loss_cls_b33: 0.7303  loss_triplet_b1: 0.004207  loss_triplet_b2: 0.005396  loss_triplet_b3: 0.006808  loss_triplet_b22: 0.002653  loss_triplet_b33: 0.002314  time: 0.9394  data_time: 0.0004  lr: 4.45e-05  max_mem: 252M
[07/09 16:26:34] fastreid.utils.events INFO:  eta: 0:05:18  epoch/iter: 54/3199  total_loss: 4.057  loss_cls_b1: 0.3253  loss_cls_b2: 0.3599  loss_cls_b21: 0.459  loss_cls_b22: 0.5824  loss_cls_b3: 0.3848  loss_cls_b31: 0.5283  loss_cls_b32: 0.6168  loss_cls_b33: 0.7222  loss_triplet_b1: 0.003949  loss_triplet_b2: 0.0052  loss_triplet_b3: 0.006464  loss_triplet_b22: 0.002393  loss_triplet_b33: 0.002215  time: 0.9394  data_time: 0.0005  lr: 3.15e-05  max_mem: 252M
[07/09 16:27:17] fastreid.utils.events INFO:  eta: 0:04:36  epoch/iter: 54/3244  total_loss: 4.033  loss_cls_b1: 0.3253  loss_cls_b2: 0.3596  loss_cls_b21: 0.4559  loss_cls_b22: 0.5875  loss_cls_b3: 0.3786  loss_cls_b31: 0.5384  loss_cls_b32: 0.6156  loss_cls_b33: 0.7151  loss_triplet_b1: 0.003949  loss_triplet_b2: 0.005421  loss_triplet_b3: 0.006742  loss_triplet_b22: 0.002656  loss_triplet_b33: 0.00212  time: 0.9395  data_time: 0.0004  lr: 3.15e-05  max_mem: 252M
[07/09 16:28:12] fastreid.utils.events INFO:  eta: 0:03:41  epoch/iter: 55/3303  total_loss: 4.031  loss_cls_b1: 0.3321  loss_cls_b2: 0.3599  loss_cls_b21: 0.4512  loss_cls_b22: 0.5775  loss_cls_b3: 0.3863  loss_cls_b31: 0.5298  loss_cls_b32: 0.6162  loss_cls_b33: 0.7072  loss_triplet_b1: 0.003905  loss_triplet_b2: 0.005434  loss_triplet_b3: 0.00702  loss_triplet_b22: 0.00269  loss_triplet_b33: 0.002385  time: 0.9395  data_time: 0.0004  lr: 2.07e-05  max_mem: 252M
[07/09 16:29:08] fastreid.utils.events INFO:  eta: 0:02:45  epoch/iter: 56/3362  total_loss: 3.834  loss_cls_b1: 0.3209  loss_cls_b2: 0.3401  loss_cls_b21: 0.4305  loss_cls_b22: 0.5564  loss_cls_b3: 0.3647  loss_cls_b31: 0.4895  loss_cls_b32: 0.5652  loss_cls_b33: 0.6826  loss_triplet_b1: 0.003565  loss_triplet_b2: 0.005053  loss_triplet_b3: 0.006557  loss_triplet_b22: 0.00215  loss_triplet_b33: 0.001707  time: 0.9396  data_time: 0.0004  lr: 1.20e-05  max_mem: 252M
[07/09 16:29:43] fastreid.utils.events INFO:  eta: 0:02:11  epoch/iter: 57/3399  total_loss: 3.885  loss_cls_b1: 0.3206  loss_cls_b2: 0.3401  loss_cls_b21: 0.4339  loss_cls_b22: 0.5387  loss_cls_b3: 0.3714  loss_cls_b31: 0.5043  loss_cls_b32: 0.5838  loss_cls_b33: 0.6826  loss_triplet_b1: 0.003712  loss_triplet_b2: 0.005154  loss_triplet_b3: 0.006573  loss_triplet_b22: 0.002326  loss_triplet_b33: 0.001772  time: 0.9396  data_time: 0.0003  lr: 5.76e-06  max_mem: 252M
[07/09 16:30:03] fastreid.utils.events INFO:  eta: 0:01:50  epoch/iter: 57/3421  total_loss: 3.811  loss_cls_b1: 0.3215  loss_cls_b2: 0.3369  loss_cls_b21: 0.4262  loss_cls_b22: 0.5308  loss_cls_b3: 0.3714  loss_cls_b31: 0.5043  loss_cls_b32: 0.5658  loss_cls_b33: 0.674  loss_triplet_b1: 0.003806  loss_triplet_b2: 0.005053  loss_triplet_b3: 0.006658  loss_triplet_b22: 0.002326  loss_triplet_b33: 0.001883  time: 0.9396  data_time: 0.0007  lr: 5.76e-06  max_mem: 252M
[07/09 16:30:59] fastreid.utils.events INFO:  eta: 0:00:55  epoch/iter: 58/3480  total_loss: 3.71  loss_cls_b1: 0.3106  loss_cls_b2: 0.3236  loss_cls_b21: 0.4054  loss_cls_b22: 0.5117  loss_cls_b3: 0.3564  loss_cls_b31: 0.4904  loss_cls_b32: 0.557  loss_cls_b33: 0.6399  loss_triplet_b1: 0.003781  loss_triplet_b2: 0.004851  loss_triplet_b3: 0.006472  loss_triplet_b22: 0.002459  loss_triplet_b33: 0.001924  time: 0.9396  data_time: 0.0004  lr: 1.97e-06  max_mem: 252M
[07/09 16:31:54] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3539  total_loss: 3.575  loss_cls_b1: 0.2987  loss_cls_b2: 0.3153  loss_cls_b21: 0.4036  loss_cls_b22: 0.507  loss_cls_b3: 0.3426  loss_cls_b31: 0.489  loss_cls_b32: 0.5347  loss_cls_b33: 0.6114  loss_triplet_b1: 0.003393  loss_triplet_b2: 0.004147  loss_triplet_b3: 0.005419  loss_triplet_b22: 0.00195  loss_triplet_b33: 0.001663  time: 0.9397  data_time: 0.0004  lr: 7.00e-07  max_mem: 252M
[07/09 16:31:54] fastreid.engine.defaults INFO: Prepare testing set
[07/09 16:31:54] fastreid.data.datasets.bases INFO: => Loaded WildSplit1 in csv format: 
[36m| subset   | # ids   | # images   | # cameras   |
|:---------|:--------|:-----------|:------------|
| query    | 297     | 850        | 1           |
| gallery  | 297     | 3829       | 1           |[0m
[07/09 16:31:54] fastreid.evaluation.evaluator INFO: Start inference on 4679 images
[07/09 16:32:03] fastreid.evaluation.evaluator INFO: Inference done 11/37. 0.5750 s / batch. ETA=0:00:14
[07/09 16:32:16] fastreid.evaluation.evaluator INFO: Total inference time: 0:00:17.173588 (0.536675 s / batch per device, on 1 devices)
[07/09 16:32:16] fastreid.evaluation.evaluator INFO: Total inference pure compute time: 0:00:17 (0.535399 s / batch per device, on 1 devices)
[07/09 16:32:17] fastreid.engine.defaults INFO: Evaluation results for WildSplit1 in csv format:
[07/09 16:32:17] fastreid.evaluation.testing INFO: Evaluation results in csv format: 
[36m| Dataset    | Rank-1   | Rank-5   | Rank-10   | mAP   | mINP   | metric   |
|:-----------|:---------|:---------|:----------|:------|:-------|:---------|
| WildSplit1 | 92.43    | 97.64    | 98.82     | 87.40 | 64.86  | 89.92    |[0m
[07/09 16:32:17] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_best.pth
[07/09 16:32:21] fastreid.utils.checkpoint INFO: Saving checkpoint to logs/wildsplit1/mgn_R50-ibn/model_final.pth
[07/09 16:32:24] fastreid.utils.events INFO:  eta: 0:00:00  epoch/iter: 59/3539  total_loss: 3.575  loss_cls_b1: 0.2987  loss_cls_b2: 0.3153  loss_cls_b21: 0.4036  loss_cls_b22: 0.507  loss_cls_b3: 0.3426  loss_cls_b31: 0.489  loss_cls_b32: 0.5347  loss_cls_b33: 0.6114  loss_triplet_b1: 0.003393  loss_triplet_b2: 0.004147  loss_triplet_b3: 0.005419  loss_triplet_b22: 0.00195  loss_triplet_b33: 0.001663  time: 0.9397  data_time: 0.0004  lr: 7.00e-07  max_mem: 252M
[07/09 16:32:24] fastreid.engine.hooks INFO: Overall training speed: 3538 iterations in 0:55:24 (0.9397 s / it)
[07/09 16:32:24] fastreid.engine.hooks INFO: Total training time: 0:58:01 (0:02:36 on hooks)
